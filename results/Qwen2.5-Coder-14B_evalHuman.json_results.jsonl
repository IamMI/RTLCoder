{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "\n\tassign out = (sel == 1'b0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(*) begin\n    case ({y[3:1], w})\n        4'b0000: Y2 = 0; // State A\n        4'b0001: Y2 = 0; // State A\n        4'b0010: Y2 = 1; // State B\n        4'b0011: Y2 = 1; // State B\n        4'b0100: Y2 = 1; // State C\n        4'b0101: Y2 = 1; // State C\n        4'b0110: Y2 = 1; // State D\n        4'b0111: Y2 = 0; // State D\n        4'b1000: Y2 = 0; // State E\n        4'b1001: Y2 = 1; // State E\n        4'b1010: Y2 = 0; // State F\n        4'b1011: Y2 = 1; // State F\n    endcase\nend\nendmodule", "result": "failed: 15 out of 100 samples.", "passed": false}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "assign ringer = ~vibrate_mode & ring;\nassign motor = vibrate_mode & ring;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*) begin\n    if (a & b)\n        out_alwaysblock = 1;\n    else\n        out_alwaysblock = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": "\n\tassign zero = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1'b1)\n        q <= ~q;\n    else\n        q <= 1'b1;\nend\n\nendmodule", "result": "failed: 26 out of 123 samples.", "passed": false}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\nlogic carry;\n\n// State transition logic\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\n\n// Next state logic\nalways_comb\n\tcase(state)\n\t\t2'b00: next_state = (x == 1'b1) ? 2'b01 : 2'b00; // Wait for first '1' to start complementing\n\t\t2'b01: next_state = 2'b10; // Start inverting after first '1'\n\t\t2'b10: next_state = 2'b10; // Stay in inverting state\n\tendcase\n\n// Output logic\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tz <= 1'b0;\n\telse if (state == 2'b00)\n\t\tz <= ~x; // Complement x until first '1'\n\telse if (state == 2'b01 || state == 2'b10)\n\t\tz <= ~x | carry; // Complement x and add carry after first '1'\n\n// Carry logic\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tcarry <= 1'b0;\n\telse if (state == 2'b00 && x == 1'b1)\n\t\tcarry <= 1'b1; // Set carry when first '1' is detected\n\telse if (state == 2'b01)\n\t\tcarry <= 1'b1; // Propagate carry through inversion state\n\telse if (state == 2'b10)\n\t\tcarry <= 1'b0; // Reset carry once inversion is complete\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] current_state, next_state;\n\nalways_ff @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tcurrent_state <= 2'b00;\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways_comb begin\n\tcase (current_state)\n\t\t2'b00: if (!in) next_state = 2'b00; else next_state = 2'b01;\n\t\t2'b01: if (!in) next_state = 2'b10; else next_state = 2'b01;\n\t\t2'b10: if (!in) next_state = 2'b00; else next_state = 2'b11;\n\t\t2'b11: if (!in) next_state = 2'b10; else next_state = 2'b01;\n\tendcase\nend\n\nassign out = (current_state == 2'b11) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "assign out[7:0] = in[24:16];\nassign out[15:8] = in[8:0];\nassign out[23:16] = in[31:23];\nassign out[31:24] = in[15:7]; \n\nendmodule", "result": "failed: 109 out of 110 samples.", "passed": false}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "\nalways @(posedge clk) begin\n\tif (r)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\n\t\n\tassign z = (x ^ y) & x;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else if (ena) begin\n        case (amount)\n            2'b00: q <= {q[62:0], 1'b0}; // Shift left by 1 bit\n            2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8 bits\n            2'b10: q <= {{1{q[63]}}, q[62:1]}; // Arithmetic shift right by 1 bit\n            2'b11: q <= {{8{q[63]}}, q[55:0]}; // Arithmetic shift right by 8 bits\n        endcase\n    end\nend\n\nendmodule", "result": "failed: 2944 out of 4041 samples.", "passed": false}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn) begin\n\tif (!aresetn)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase(state)\n\t\tS0: if (x == 1) next_state = S1; else next_state = S0;\n\t\tS1: if (x == 0) next_state = S2; else next_state = S0;\n\t\tS2: if (x == 1) next_state = S2; else next_state = S0;\n\tdefault: next_state = S0;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(next_state)\n\t\tS0: z <= 0;\n\t\tS1: z <= 0;\n\t\tS2: z <= 1;\n\tendcase\nend\n\nendmodule", "result": "failed: 91 out of 440 samples.", "passed": false}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "logic [2:0] state, next_state;\n\n// State transition logic\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\n\n// Next state logic\nalways_comb begin\n\tcase(state)\n\t\t3'b000: if (w == 1'b0) next_state = 3'b001; else next_state = 3'b000;\n\t\t3'b001: if (w == 1'b0) next_state = 3'b010; else if (w == 1'b1) next_state = 3'b011;\n\t\t3'b010: if (w == 1'b0) next_state = 3'b011; else if (w == 1'b1) next_state = 3'b100;\n\t\t3'b011: if (w == 1'b0) next_state = 3'b101; else if (w == 1'b1) next_state = 3'b000;\n\t\t3'b100: if (w == 1'b0) next_state = 3'b100; else if (w == 1'b1) next_state = 3'b011;\n\t\t3'b101: if (w == 1'b0) next_state = 3'b010; else if (w == 1'b1) next_state = 3'b011;\n\tendcase\nend\n\n// Output logic\nassign z = (state == 3'b100 || state == 3'b101) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 19 out of 200 samples.", "passed": false}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "logic [7:0] byte1, byte2, byte3;\nlogic [1:0] state;\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 2'b00;\n\telse if (state == 2'b00 && in[3])\n\t\tstate <= 2'b01;\n\telse if (state == 2'b01 && in[3])\n\t\tstate <= 2'b10;\n\telse if (state == 2'b10 && in[3])\n\t\tstate <= 2'b11;\n\telse if (state == 2'b11 && in[3])\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= 2'b00;\nend\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tbyte1 <= 8'h00;\n\t\tbyte2 <= 8'h00;\n\t\tbyte3 <= 8'h00;\n\tend else if (state == 2'b01) begin\n\t\tbyte1 <= in;\n\t\tbyte2 <= 8'h00;\n\t\tbyte3 <= 8'h00;\n\tend else if (state == 2'b10) begin\n\t\tbyte2 <= in;\n\t\tbyte3 <= 8'h00;\n\tend else if (state == 2'b11) begin\n\t\tbyte3 <= in;\n\tend\nend\n\nassign done = (state == 2'b11);\nassign out_bytes = {byte3, byte2, byte1};\n\nendmodule", "result": "failed: 554 out of 1619 samples.", "passed": false}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = (y == 6'b000001) ? w : // State A\n            (y == 6'b000010) ? ~w : // State B\n            (y == 6'b001000) ? ~w : // State D\n            (y == 6'b010000) ? w :  // State E\n            (y == 6'b100000) ? w;   // State F\n\nassign Y3 = (y == 6'b000001) ? 0 : // State A\n            (y == 6'b000010) ? w : // State B\n            (y == 6'b000100) ? w : // State C\n            (y == 6'b001000) ? 0 : // State D\n            (y == 6'b010000) ? 0 : // State E\n            (y == 6'b100000) ? 0;  // State F\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "assign outv = vec;\nassign o2 = vec[2];\nassign o1 = vec[1];\nassign o0 = vec[0];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case ({a,b,c,d})\n        4'b0000: out <= 1'b0;\n        4'b0001: out <= 1'b1;\n        4'b0011: out <= 1'b0;\n        4'b0010: out <= 1'b1;\n        4'b0100: out <= 1'b1;\n        4'b0101: out <= 1'b0;\n        4'b0111: out <= 1'b1;\n        4'b0110: out <= 1'b0;\n        4'b1100: out <= 1'b0;\n        4'b1101: out <= 1'b1;\n        4'b1111: out <= 1'b0;\n        4'b1110: out <= 1'b1;\n        4'b1000: out <= 1'b1;\n        4'b1001: out <= 1'b0;\n        4'b1011: out <= 1'b1;\n        4'b1010: out <= 1'b0;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "assign out_lo = in[7:0];\nassign out_hi = in[15:8];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a | b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @(*) begin\n\tout_always_comb = a ^ b;\nend\n\nreg q;\nalways @(posedge clk) begin\n\tq <= a ^ b;\n\tout_always_ff <= q;\nend\n\nendmodule", "result": "failed: 92 out of 219 samples.", "passed": false}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "assign Y2 = ~y[1] & ~y[2] & w | y[1] & ~w;\nassign Y4 = ~y[1] & ~y[2] & ~w & y[3] | ~y[1] & ~y[2] & w & ~y[5] | y[1] & ~y[2] & ~w & ~y[3] | y[1] & ~y[2] & w & y[5] | y[1] & y[2];\n\nendmodule", "result": "failed: 377 out of 600 samples.", "passed": false}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "\n\t\n\talways @(*) begin\n\t\tcase (sel)\n\t\t\t8'd0: out <= in[0];\n\t\t\t8'd1: out <= in[1];\n\t\t\t8'd2: out <= in[2];\n\t\t\t8'd3: out <= in[3];\n\t\t\t8'd4: out <= in[4];\n\t\t\t8'd5: out <= in[5];\n\t\t\t8'd6: out <= in[6];\n\t\t\t8'd7: out <= in[7];\n\t\t\t8'd8: out <= in[8];\n\t\t\t8'd9: out <= in[9];\n\t\t\t8'd10: out <= in[10];\n\t\t\t8'd11: out <= in[11];\n\t\t\t8'd12: out <= in[12];\n\t\t\t8'd13: out <= in[13];\n\t\t\t8'd14: out <= in[14];\n\t\t\t8'd15: out <= in[15];\n\t\t\t8'd16: out <= in[16];\n\t\t\t8'd17: out <= in[17];\n\t\t\t8'd18: out <= in[18];\n\t\t\t8'd19: out <= in[19];\n\t\t\t8'd20: out <= in[20];\n\t\t\t8'd21: out <= in[21];\n\t\t\t8'd22: out <= in[22];\n\t\t\t8'd23: out <= in[23];\n\t\t\t8'd24: out <= in[24];\n\t\t\t8'd25: out <= in[25];\n\t\t\t8'd26: out <= in[26];\n\t\t\t8'd27: out <= in[27];\n\t\t\t8'd28: out <= in[28];\n\t\t\t8'd29: out <= in[29];\n\t\t\t8'd30: out <= in[30];\n\t\t\t8'd31: out <= in[31];\n\t\t\t8'd32: out <= in[32];\n\t\t\t8'd33: out <= in[33];\n\t\t\t8'd34: out <= in[34];\n\t\t\t8'd35: out <= in[35];\n\t\t\t8'd36: out <= in[36];\n\t\t\t8'd37: out <= in[37];\n\t\t\t8'd38: out <= in[38];\n\t\t\t8'd39: out <= in[39];\n\t\t\t8'd40: out <= in[40];\n\t\t\t8'd41: out <= in[41];\n\t\t\t8'd42: out <= in[42];\n\t\t\t8'd43: out <= in[43];\n\t\t\t8'd44: out <= in[44];\n\t\t\t8'd45: out <= in[45];\n\t\t\t8'd46: out <= in[46];\n\t\t\t8'd47: out <= in[47];\n\t\t\t8'd48: out <= in[48];\n\t\t\t8'd49: out <= in[49];\n\t\t\t8'd50: out <= in[50];\n\t\t\t8'd51: out <= in[51];\n\t\t\t8'd52: out <= in[52];\n\t\t\t8'd53: out <= in[53];\n\t\t\t8'd54: out <= in[54];\n\t\t\t8'd55: out <= in[55];\n\t\t\t8'd56: out <= in[56];\n\t\t\t8'd57: out <= in[57];\n\t\t\t8'd58: out <= in[58];\n\t\t\t8'd59: out <= in[59];\n\t\t\t8'd60: out <= in[60];\n\t\t\t8'd61: out <= in[61];\n\t\t\t8'd62: out <= in[62];\n\t\t\t8'd63: out <= in[63];\n\t\t\t8'd64: out <= in[64];\n\t\t\t8'd65: out <= in[65];\n\t\t\t8'd66: out <= in[66];\n\t\t\t8'd67: out <= in[67];\n\t\t\t8'd68: out <= in[68];\n\t\t\t8'd69: out <= in[69];\n\t\t\t8'd70: out <= in[70];\n\t\t\t8'd71: out <= in[71];\n\t\t\t8'd72: out <= in[72];\n\t\t\t8'd73: out <= in[73];\n\t\t\t8'd74: out <= in[74];\n\t\t\t8'd75: out <= in[75];\n\t\t\t8'd76: out <= in[76];\n\t\t\t8'd77: out <= in[77];\n\t\t\t8'd78: out <= in[78];\n\t\t\t8'd79: out <= in[79];\n\t\t\t8'd80: out <= in[80];\n\t\t\t8'd81: out <= in[81];\n\t\t\t8'd82: out <= in[82];\n\t\t\t8'd83: out <= in[83];\n\t\t\t8'd84: out <= in[84];\n\t\t\t8'd85: out <= in[85];\n\t\t\t8'd86: out <= in[86];\n\t\t\t8'd87: out <= in[87];\n\t\t\t8'd88: out <= in[88];\n\t\t\t8'd89: out <= in[89];\n\t\t\t8'd90: out <= in[90];\n\t\t\t8'd91: out <= in[91];\n\t\t\t8'd92: out <= in[92];\n\t\t\t8'd93: out <= in[93];\n\t\t\t8'd94: out <= in[94];\n\t\t\t8'd95: out <= in[95];\n\t\t\t8'd96: out <= in[96];\n\t\t\t8'd97: out <= in[97];\n\t\t\t8'd98: out <= in[98];\n\t\t\t8'd99: out <= in[99];\n\t\t\t8'd100: out <= in[100];\n\t\t\t8'd101: out <= in[101];\n\t\t\t8'd102: out <= in[102];\n\t\t\t8'd103: out <= in[103];\n\t\t\t8'd104: out <= in[104];\n\t\t\t8'd105: out <= in[105];\n\t\t\t8'd106: out <= in[106];\n\t\t\t8'd107: out <= in[107];\n\t\t\t8'd108: out <= in[108];\n\t\t\t8'd109: out <= in[109];\n\t\t\t8'd110: out <= in[110];\n\t\t\t8'd111: out <= in[111];\n\t\t\t8'd112: out <= in[112];\n\t\t\t8'd113: out <= in[113];\n\t\t\t8'd114: out <= in[114];\n\t\t\t8'd115: out <= in[115];\n\t\t\t8'd116: out <= in[116];\n\t\t\t8'd117: out <= in[117];\n\t\t\t8'd118: out <= in[118];\n\t\t\t8'd119: out <= in[119];\n\t\t\t8'd120: out <= in[120];\n\t\t\t8'd121: out <= in[121];\n\t\t\t8'd122: out <= in[122];\n\t\t\t8'd123: out <= in[123];\n\t\t\t8'd124: out <= in[124];\n\t\t\t8'd125: out <= in[125];\n\t\t\t8'd126: out <= in[126];\n\t\t\t8'd127: out <= in[127];\n\t\t\t8'd128: out <= in[128];\n\t\t\t8'd129: out <= in[129];\n\t\t\t8'd130: out <= in[130];\n\t\t\t8'd131: out <= in[131];\n\t\t\t8'd132: out <= in[132];\n\t\t\t8'd133: out <= in[133];\n\t\t\t8'd134: out <= in[134];\n\t\t\t8'd135: out <= in[135];\n\t\t\t8'd136: out <= in[136];\n\t\t\t8'd137: out <= in[137];\n\t\t\t8'd138: out <= in[138];\n\t\t\t8'd139: out <= in[139];\n\t\t\t8'd140: out <= in[140];\n\t\t\t8'd141: out <= in[141];\n\t\t\t8'd142: out <= in[142];\n\t\t\t8'd143: out <= in[143];\n\t\t\t8'd144: out <= in[144];\n\t\t\t8'd145: out <= in[145];\n\t\t\t8'd146: out <= in[146];\n\t\t\t8'd147: out <= in[147];\n\t\t\t8'd148: out <= in[148];\n\t\t\t8'd149: out <= in[149];\n\t\t\t8'd150: out <= in[150];\n\t\t\t8'd151: out <= in[151];\n\t\t\t8'd152: out <= in[152];\n\t\t\t8'd153: out <= in[153];\n\t\t\t8'd154: out <= in[154];\n\t\t\t8'd155: out <= in[155];\n\t\t\t8'd156: out <= in[156];\n\t\t\t8'd157: out <= in[157];\n\t\t\t8'd158: out <= in[158];\n\t\t\t8'd159: out <= in[159];\n\t\t\t8'd160: out <= in[160];\n\t\t\t8'd161: out <= in[161];\n\t\t\t8'd162: out <= in[162];\n\t\t\t8'd163: out <= in[163];\n\t\t\t8'd164: out <= in[164];\n\t\t\t8'd165: out <= in[165];\n\t\t\t8'd166: out <= in[166];\n\t\t\t8'd167: out <= in[167];\n\t\t\t8'd168: out <= in[168];\n\t\t\t8'd169: out <= in[169];\n\t\t\t8'd170: out <= in[170];\n\t\t\t8'd171: out <= in[171];\n\t\t\t8'd172: out <= in[172];\n\t\t\t8'd173: out <= in[173];\n\t\t\t8'd174: out <= in[174];\n\t\t\t8'd175: out <= in[175];\n\t\t\t8'd176: out <= in[176];\n\t\t\t8'd177: out <= in[177];\n\t\t\t8'd178: out <= in[178];\n\t\t\t8'd179: out <= in[179];\n\t\t\t8'd180: out <= in[180];\n\t\t\t8'd181: out <= in[181];\n\t\t\t8'd182: out <= in[182];\n\t\t\t8'd183: out <= in[183];\n\t\t\t8'd184: out <= in[184];\n\t\t\t8'd185: out <= in[185];\n\t\t\t8'd186: out <= in[186];\n\t\t\t8'd187: out <= in[187];\n\t\t\t8'd188: out <= in[188];\n\t\t\t8'd189: out <= in[189];\n\t\t\t8'd190: out <= in[190];\n\t\t\t8'd191: out <= in[191];\n\t\t\t8'd192: out <= in[192];\n\t\t\t8'd193: out <= in[193];\n\t\t\t8'd194: out <= in[194];\n\t\t\t8'd195: out <= in[195];\n\t\t\t8'd196: out <= in[196];\n\t\t\t8'd197: out <= in[197];\n\t\t\t8'd198: out <= in[198];\n\t\t\t8'd199: out <= in[199];\n\t\t\t8'd200: out <= in[200];\n\t\t\t8'd201: out <= in[201];\n\t\t\t8'd202: out <= in[202];\n\t\t\t8'd203: out <= in[203];\n\t\t\t8'd204: out <= in[204];\n\t\t\t8'd205: out <= in[205];\n\t\t\t8'd206: out <= in[206];\n\t\t\t8'd207: out <= in[207];\n\t\t\t8'd208: out <= in[208];\n\t\t\t8'd209: out <= in[209];\n\t\t\t8'd210: out <= in[210];\n\t\t\t8'd211: out <= in[211];\n\t\t\t8'd212: out <= in[212];\n\t\t\t8'd213: out <= in[213];\n\t\t\t8'd214: out <= in[214];\n\t\t\t8'd215: out <= in[215];\n\t\t\t8'd216: out <= in[216];\n\t\t\t8'd217: out <= in[217];\n\t\t\t8'd218: out <= in[218];\n\t\t\t8'd219: out <= in[219];\n\t\t\t8'd220: out <= in[220];\n\t\t\t8'd221: out <= in[221];\n\t\t\t8'd222: out <= in[222];\n\t\t\t8'd223: out <= in[223];\n\t\t\t8'd224: out <= in[224];\n\t\t\t8'd225: out <= in[225];\n\t\t\t8'd226: out <= in[226];\n\t\t\t8'd227: out <= in[227];\n\t\t\t8'd228: out <= in[228];\n\t\t\t8'd229: out <= in[229];\n\t\t\t8'd230: out <= in[230];\n\t\t\t8'd231: out <= in[231];\n\t\t\t8'd232: out <= in[232];\n\t\t\t8'd233: out <= in[233];\n\t\t\t8'd234: out <= in[234];\n\t\t\t8'd235: out <= in[235];\n\t\t\t8'd236: out <= in[236];\n\t\t\t8'd237: out <= in[237];\n\t\t\t8'd238: out <= in[238];\n\t\t\t8'd239: out <= in[239];\n\t\t\t8'd240: out <= in[240];\n\t\t\t8'd241: out <= in[241];\n\t\t\t8'd242: out <= in[242];\n\t\t\t8'd243: out <= in[243];\n\t\t\t8'd244: out <= in[244];\n\t\t\t8'd245: out <= in[245];\n\t\t\t8'd246: out <= in[246];\n\t\t\t8'd247: out <= in[247];\n\t\t\t8'd248: out <= in[248];\n\t\t\t8'd249: out <= in[249];\n\t\t\t8'd250: out <= in[250];\n\t\t\t8'd251: out <= in[251];\n\t\t\t8'd252: out <= in[252];\n\t\t\t8'd253: out <= in[253];\n\t\t\t8'd254: out <= in[254];\n\t\t\t8'd255: out <= in[255];\n\t\t\tdefault: out <= 1'b0;\n\t\tendcase\n\tend\n\t\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "\n\treg Q_next;\n\n\talways @(posedge clk) begin\n\t\tif (L)\n\t\t\tQ <= R;\n\t\telse if (E)\n\t\t\tQ <= Q_next;\n\tend\n\n\talways @* begin\n\t\tcase ({L, E})\n\t\t\t2'b00: Q_next = Q; // Hold state\n\t\t\t2'b01: Q_next = Q; // Shift but not loading\n\t\t\t2'b10: Q_next = R; // Load new value\n\t\t\t2'b11: Q_next = w; // Load new value and shift in\n\t\tendcase\n\tend\nendmodule", "result": "failed: 26 out of 200 samples.", "passed": false}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "logic q1, q2, q3;\n\nalways_ff @(posedge clk) begin\n\tq1 <= x ^ q1;\n\tq2 <= x & (~q2);\n\tq3 <= x | (~q3);\nend\n\nassign z = ~(q1 ^ q2 ^ q3);\n\nendmodule", "result": "failed: 118 out of 118 samples.", "passed": false}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = a & (b | c | d) | (~a & d);\n\nendmodule", "result": "failed: 35 out of 121 samples.", "passed": false}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        for (int i = 0; i < 512; i++) begin\n            case ({data[i-1], data[i], data[(i+1)%512]})\n                3'b111: q[i] <= 1'b0;\n                3'b110: q[i] <= 1'b1;\n                3'b101: q[i] <= 1'b1;\n                3'b100: q[i] <= 1'b0;\n                3'b011: q[i] <= 1'b1;\n                3'b010: q[i] <= 1'b1;\n                3'b001: q[i] <= 1'b1;\n                3'b000: q[i] <= 1'b0;\n            endcase\n        end\nend\n\nendmodule", "result": "failed: 6220 out of 6283 samples.", "passed": false}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] current_state, next_state;\n\nalways_ff @(posedge clk, posedge reset) begin\n\tif (reset)\n\t\tcurrent_state <= 2'b00;\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways_comb begin\n\tcase (current_state)\n\t\t2'b00: if (!in) next_state = 2'b00; else next_state = 2'b01;\n\t\t2'b01: if (!in) next_state = 2'b10; else next_state = 2'b01;\n\t\t2'b10: if (!in) next_state = 2'b00; else next_state = 2'b11;\n\t\t2'b11: if (!in) next_state = 2'b10; else next_state = 2'b01;\n\tendcase\nend\n\nalways_comb begin\n\tcase (current_state)\n\t\t2'b00: out = 1'b0;\n\t\t2'b01: out = 1'b0;\n\t\t2'b10: out = 1'b0;\n\t\t2'b11: out = 1'b1;\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @(*) begin\n    case (c)\n        4'b0000: q = b;\n        4'b0001: q = e;\n        4'b0010: q = a;\n        4'b0011: q = d;\n        default: q = 4'b1111; // Assuming f is represented as all 1's in binary for output\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "always @(sel or a or b) \nbegin\n\tif (!sel)\n\t\tout <= a;\n\telse\n\t\tout <= b;\nend\n\nendmodule", "result": "failed: 111 out of 114 samples.", "passed": false}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "always @(posedge clk) begin\n    if (L) begin\n        Q <= r_in;\n    end else begin\n        Q <= q_in ^ Q;\n    end\nend\n\nendmodule", "result": "failed: 49 out of 199 samples.", "passed": false}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "always @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tout <= 32'b0;\n\telse\n\tbegin\n\t\tfor (int i = 0; i < 32; i++)\n\t\t\tif (~in[i] & in[i+32*i])\n\t\t\t\tout[i] <= 1;\n\tend\nend\n\nendmodule", "result": "failed: 227 out of 266 samples.", "passed": false}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n    q[0] <= d[0];\n    q[1] <= d[1];\n    q[2] <= d[2];\n    q[3] <= d[3];\n    q[4] <= d[4];\n    q[5] <= d[5];\n    q[6] <= d[6];\n    q[7] <= d[7];\nend\n\nendmodule", "result": "failed: 1 out of 41 samples.", "passed": false}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "\n\tlogic [8:0] sum;\n\tassign sum = {a[7], a} + {b[7], b};\n\tassign s = sum[7:0];\n\tassign overflow = (sum[8] != a[7] ^ b[7]);\nendmodule", "result": "failed: 55 out of 116 samples.", "passed": false}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = &state[8:0];\nassign S_next = (state == 10'b0000000001) ? (~d & ~state[1]) : (state == 10'b0000000110) ? (~d & ~state[3]) : (state == 10'b0011000000) ? 1'b1 : 1'b0;\nassign S1_next = (state == 10'b0000000010) ? (~d & ~state[2]) : 1'b0;\nassign Count_next = (state == 10'b0000001000) ? ~done_counting : 1'b0;\nassign Wait_next = (state == 10'b1000000000) ? ~ack : 1'b0;\nassign done = (state == 10'b1000000000);\nassign counting = (state == 10'b0000001000);\nassign shift_ena = |{state[5], state[6], state[7], state[8]};\nendmodule", "result": "failed: 3154 out of 3303 samples.", "passed": false}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            state <= 2'b01;\n        else if (train_valid) begin\n            if (train_taken)\n                state <= state == 2'b11 ? 2'b11 : state + 1;\n            else\n                state <= state == 2'b00 ? 2'b00 : state - 1;\n        end\n    end\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "\n\talways @(*) begin\n\t\tcase (in)\n\t\t\t8'b00000001: pos = 3'd0;\n\t\t\t8'b00000010: pos = 3'd1;\n\t\t\t8'b00000100: pos = 3'd2;\n\t\t\t8'b00001000: pos = 3'd3;\n\t\t\t8'b00010000: pos = 3'd4;\n\t\t\t8'b00100000: pos = 3'd5;\n\t\t\t8'b01000000: pos = 3'd6;\n\t\t\t8'b10000000: pos = 3'd7;\n\t\t\tdefault: pos = 3'd0; // or can be default: pos = 3'd0; if no bits are high\n\t\tendcase\n\tend\nendmodule", "result": "failed: 147 out of 346 samples.", "passed": false}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    unique case (scancode)\n        16'hE06B: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'hE072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'hE074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'hE075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "\nwire c_out_3;\n\nfull_adder fa0 (.a(x[0]), .b(y[0]), .cin(1'b0), .sum(sum[0]), .cout(c_out));\nfull_adder fa1 (.a(x[1]), .b(y[1]), .cin(c_out), .sum(sum[1]), .cout(c_out1));\nfull_adder fa2 (.a(x[2]), .b(y[2]), .cin(c_out1), .sum(sum[2]), .cout(c_out2));\nfull_adder fa3 (.a(x[3]), .b(y[3]), .cin(c_out2), .sum(sum[3]), .cout(c_out_3));\n\nassign sum[4] = c_out_2 ^ c_out_3;\nendmodule\n\n// Full Adder module definition\nmodule full_adder(\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput reg sum,\n\toutput reg cout\n);\nalways @(a or b or cin) begin\n\tsum = a ^ b ^ cin;\n\tcout = (a & b) | (cin & (a ^ b));\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "always_ff @(posedge clk or posedge areset)\nbegin\n    if (areset)\n        predict_history <= 32'b0;\n    else if (train_mispredicted)\n        predict_history <= {train_history[30:0], train_taken};\n    else if (predict_valid)\n        predict_history <= {predict_history[30:0], predict_taken};\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "\n\twire and1_output;\n\twire and2_output;\n\n\tand #1 and1 (.A(a), .B(b), .Y(and1_output));\n\tand #1 and2 (.A(c), .B(d), .Y(and2_output));\n\tor #1 or1 (.A(and1_output), .B(and2_output), .Y(out));\n\tnot #1 not1 (.A(out), .Y(out_n));\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk) begin\n    q <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] shift_reg;\n\nalways @(posedge clk) begin\n\tif (enable)\n\t\tshift_reg <= {S, shift_reg[7:1]};\nend\n\nalways @* begin\n\tcase ({A, B, C})\n\t\t2'b00: Z = shift_reg[0];\n\t\t2'b01: Z = shift_reg[1];\n\t\t2'b10: Z = shift_reg[2];\n\t\t2'b11: Z = shift_reg[3];\n\tendcase\n\tif ({A, B, C} == 4'b0100) Z = shift_reg[4];\n\tif ({A, B, C} == 4'b0101) Z = shift_reg[5];\n\tif ({A, B, C} == 4'b0110) Z = shift_reg[6];\n\tif ({A, B, C} == 4'b0111) Z = shift_reg[7];\nend\n\nendmodule", "result": "failed: 263 out of 530 samples.", "passed": false}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "assign heater = mode & too_cold;\nassign aircon = ~mode & too_hot;\nassign fan = mode & too_cold | ~mode & too_hot | fan_on;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "assign out_sop = (a & ~b & ~c & ~d) | (~a & b & ~c & d) | (~a & ~b & ~c & ~d);\nassign out_pos = ~(a | b | c | d) & ~(a | ~b | ~c | ~d) & ~(~a | b | ~c | ~d);\n\nendmodule", "result": "failed: 49 out of 107 samples.", "passed": false}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 32'h1;\n\telse\n\t\tq <= {q[30:0], ^{q[31], q[21], q[1], q[0]}};\nend\n\nendmodule", "result": "failed: 400356 out of 400411 samples.", "passed": false}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & b) | (~a & c & d);\n\nendmodule", "result": "failed: 55 out of 121 samples.", "passed": false}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "assign p1y = ~(p1a & p1b & p1c & p1d);\nassign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "reg [7:0] count;\ninteger i;\n\nalways @(*) begin\n    count = 0;\n    for (i = 0; i < 255; i = i + 1) begin\n        if (in[i]) count = count + 1;\n    end\n    out = count;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "assign out_both = {1'b0, in[3:1] & in[2:0]};\nassign out_any = {in[3] | in[2], in[2] | in[1], in[1] | in[0], in[0] | in[3]};\nassign out_different = {in[3] ^ in[0], in[0] ^ in[1], in[1] ^ in[2], in[2] ^ in[3]};\nendmodule", "result": "failed: 160 out of 213 samples.", "passed": false}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*) begin\n    case (a)\n        3'b000: q = 16'b1001000101100010; // 1232 in hex\n        3'b001: q = 16'b1010111011100000; // aee0 in hex\n        3'b010: q = 16'b0010011111010100; // 27d4 in hex\n        3'b011: q = 16'b0101101000001110; // 5a0e in hex\n        3'b100: q = 16'b0010000001100110; // 2066 in hex\n        3'b101: q = 16'b0110010011001110; // 64ce in hex\n        3'b110: q = 16'b1100010100100110; // c526 in hex\n        3'b111: q = 16'b0010111100011001; // 2f19 in hex\n    endcase\nend\n\nendmodule", "result": "failed: 10 out of 113 samples.", "passed": false}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tq <= 4'b0;\n\t\telse if (slowena)\n\t\t\tif (q == 4'b1001)\n\t\t\t\tq <= 4'b0;\n\t\t\telse\n\t\t\t\tq <= q + 1;\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n\tassign out = in1 & ~in2;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b1; // State B\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tout = 1'b1;\n\t\t\tnext_state = (in == 1'b0) ? 2'b01 : 2'b10; // B --0--> A, B --1--> B\n\t\tend\n\t\t2'b01: begin // State A\n\t\t\tout = 1'b0;\n\t\t\tnext_state = (in == 1'b0) ? 2'b10 : 2'b01; // A --0--> B, A --1--> A\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "\n\treg q_prev;\n\n\talways @(posedge clk or negedge clk) begin\n\t\tif (clk == 1'b1) begin\n\t\t\tq_prev <= q;\n\t\t\tq <= d;\n\t\tend else begin\n\t\t\tq <= q_prev;\n\t\tend\n\tend\n\nendmodule", "result": "failed: 111 out of 224 samples.", "passed": false}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a ^ b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "wire a_out1, b_out1, a_out2, b_out2, or_out, and_out;\n\nmodule A(input x, input y, output z);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule B(input x, input y, output z);\n    // Based on the provided truth table, this module simply outputs x ^ y\n    assign z = x ^ y;\nendmodule\n\nA a1(x, y, a_out1);\nB b1(x, y, b_out1);\nA a2(x, y, a_out2);\nB b2(x, y, b_out2);\n\nassign or_out = a_out1 | b_out1;\nassign and_out = a_out2 & b_out2;\n\nassign z = or_out ^ and_out;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else if (ena == 2'b01) // Rotate right by one bit\n        q <= {q[0], q[99:1]};\n    else if (ena == 2'b10) // Rotate left by one bit\n        q <= {q[98:0], q[99]};\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "\nalways @(posedge clk) begin\n\tif (reset)\n\t\tq <= 10'b0;\n\telse if (q == 10'd999)\n\t\tq <= 10'b0;\n\telse\n\t\tq <= q + 1;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "assign out = ~in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "assign next_state = (state == 10'b0000000001) ? (in ? 10'b0000000010 : 10'b0000000001) :\n                    (state == 10'b0000000010) ? (in ? 10'b0000000100 : 10'b0000000001) :\n                    (state == 10'b0000000100) ? (in ? 10'b0000001000 : 10'b0000000001) :\n                    (state == 10'b0000001000) ? (in ? 10'b0000010000 : 10'b0000000001) :\n                    (state == 10'b0000010000) ? (in ? 10'b0000100000 : 10'b0000000001) :\n                    (state == 10'b0000100000) ? (in ? 10'b0001000000 : 10'b0000000001) :\n                    (state == 10'b0001000000) ? (in ? 10'b0010000000 : 10'b0000000001) :\n                    (state == 10'b0010000000) ? (in ? 10'b0100000000 : 10'b0000000001) :\n                    (state == 10'b0100000000) ? (in ? 10'b1000000000 : 10'b0000000001) :\n                    (state == 10'b1000000000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                                               10'b0000000001;\n\nassign out1 = &state[9:8];\nassign out2 = (state == 10'b0000000111) | (state == 10'b0000001001);\n\nendmodule", "result": "failed: 1222 out of 1424 samples.", "passed": false}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tcase ({j,k})\n\t\t2'b00: Q <= Q; // No change\n\t\t2'b01: Q <= 0; // Reset\n\t\t2'b10: Q <= 1; // Set\n\t\t2'b11: Q <= ~Q; // Toggle\n\tendcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "\n\tassign out = in[0] + in[1] + in[2];\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "\n\tassign out[24] = ~(a ^ a);\n\tassign out[23] = ~(a ^ b);\n\tassign out[22] = ~(a ^ c);\n\tassign out[21] = ~(a ^ d);\n\tassign out[20] = ~(a ^ e);\n\tassign out[19] = ~(b ^ a);\n\tassign out[18] = ~(b ^ b);\n\tassign out[17] = ~(b ^ c);\n\tassign out[16] = ~(b ^ d);\n\tassign out[15] = ~(b ^ e);\n\tassign out[14] = ~(c ^ a);\n\tassign out[13] = ~(c ^ b);\n\tassign out[12] = ~(c ^ c);\n\tassign out[11] = ~(c ^ d);\n\tassign out[10] = ~(c ^ e);\n\tassign out[9] = ~(d ^ a);\n\tassign out[8] = ~(d ^ b);\n\tassign out[7] = ~(d ^ c);\n\tassign out[6] = ~(d ^ d);\n\tassign out[5] = ~(d ^ e);\n\tassign out[4] = ~(e ^ a);\n\tassign out[3] = ~(e ^ b);\n\tassign out[2] = ~(e ^ c);\n\tassign out[1] = ~(e ^ d);\n\tassign out[0] = ~(e ^ e);\nendmodule", "result": "passed", "passed": true}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "logic state;\n\nalways_ff @(posedge clk, posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= 1'b0; // walk_left\n\telse\n\tbegin\n\t\tcase ({bump_right, bump_left})\n\t\t\t2'b00: state <= state;\n\t\t\t2'b01: state <= ~state; // walk right if bumped left\n\t\t\t2'b10: state <= ~state; // walk left if bumped right\n\t\t\tdefault: state <= ~state; // walk opposite direction if bumped on both sides\n\t\tendcase\n\tend\nend\n\nassign walk_left = state;\nassign walk_right = ~state;\n\nendmodule", "result": "failed: 146 out of 229 samples.", "passed": false}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "assign q = a & b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "wire and1_out, and2_out, and3_out, and4_out;\n\nassign and1_out = p1a & p1b & p1c;\nassign and2_out = p1d & p1e & p1f;\nassign p1y = and1_out | and2_out;\n\nassign and3_out = p2a & p2b;\nassign and4_out = p2c & p2d;\nassign p2y = and3_out | and4_out;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "reg [2:0] next_state;\nalways @(posedge clk) begin\n    case (y)\n        3'b000: if(x == 1'b0) next_state <= 3'b000; else next_state <= 3'b001;\n        3'b001: if(x == 1'b0) next_state <= 3'b001; else next_state <= 3'b100;\n        3'b010: if(x == 1'b0) next_state <= 3'b010; else next_state <= 3'b001;\n        3'b011: if(x == 1'b0) next_state <= 3'b001; else next_state <= 3'b010;\n        3'b100: if(x == 1'b0) next_state <= 3'b011; else next_state <= 3'b100;\n    endcase\n    Y0 <= next_state[0];\n    z <= (y == 3'b011 || y == 3'b100);\nend\n\nendmodule", "result": "failed: 88 out of 200 samples.", "passed": false}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n\t\n\tassign out = ~(in1 | in2);\n\t\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or posedge ar) begin\n\tif (ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @(*) begin\n    case (sel)\n        3'b000: out <= data0;\n        3'b001: out <= data1;\n        3'b010: out <= data2;\n        3'b011: out <= data3;\n        3'b100: out <= data4;\n        3'b101: out <= data5;\n        default: out <= 4'b0;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\nreg tc_reg;\n\nalways @(posedge clk) begin\n    if (load)\n        counter <= data;\n    else if (counter > 0)\n        counter <= counter - 1;\n    \n    if (counter == 0)\n        tc_reg <= 1;\n    else\n        tc_reg <= 0;\nend\n\nassign tc = tc_reg;\n\nendmodule", "result": "failed: 248 out of 7127 samples.", "passed": false}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\n\t\n\ttypedef enum logic [1:0] {S0, S1, S2, S3} state_t;\n\tstate_t current_state, next_state;\n\n\talways_ff @(posedge clk, posedge reset) begin\n\t\tif (reset)\n\t\t\tcurrent_state <= S0;\n\t\telse\n\t\t\tcurrent_state <= next_state;\n\tend\n\n\talways_comb begin\n\t\tnext_state = current_state;\n\t\tstart_shifting = 0;\n\t\t\n\t\tcase(current_state)\n\t\t\tS0: if (data == 1) next_state = S1;\n\t\t\tS1: if (data == 1) next_state = S2;\n\t\t\t\telse           next_state = S0;\n\t\t\tS2: if (data == 0) next_state = S3;\n\t\t\t\telse           next_state = S0;\n\t\t\tS3: if (data == 1) begin next_state = S3; start_shifting = 1; end\n\t\t\t\telse           next_state = S0;\n\t\tendcase\n\tend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\t\tif (~in[i] && in[i+1]) // Detect rising edge\n\t\t\t\tanyedge[i] <= 1'b1;\n\t\t\telse\n\t\t\t\tanyedge[i] <= 1'b0;\n\t\tend\n\tend\nendmodule", "result": "failed: 207 out of 228 samples.", "passed": false}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'd1;\n\telse if (q == 4'd10)\n\t\tq <= 4'd1;\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1'b0) begin\n        if (q == 4'd6)\n            q <= 3'd0;\n        else\n            q <= q + 1;\n    end\n    else begin\n        q <= 4'd4;\n    end\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "always @(posedge clk) begin\n    if (reset)\n        q <= 5'b00001;\n    else\n        q <= {q[3], q[4] ^ q[2], q[0], q[1]};\nend\n\nendmodule", "result": "failed: 4276 out of 4443 samples.", "passed": false}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "always @(*) begin\n    case (do_sub)\n      0: out = a + b;\n      1: out = a - b;\n    endcase\n    \n    // Check if all bits of out are 0\n    result_is_zero = (out == 8'b0);\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "\n\t\n\tassign f = ~(x[4] ^ x[3] | x[3] & ~x[2]);\n\t\nendmodule", "result": "failed: 27 out of 100 samples.", "passed": false}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case(code)\n        8'h45: begin out = 4'b0000; valid = 1'b1; end\n        8'h16: begin out = 4'b0001; valid = 1'b1; end\n        8'h1e: begin out = 4'b0010; valid = 1'b1; end\n        8'h26: begin out = 4'b0011; valid = 1'b1; end\n        8'h25: begin out = 4'b0100; valid = 1'b1; end\n        8'h2e: begin out = 4'b0101; valid = 1'b1; end\n        8'h36: begin out = 4'b0110; valid = 1'b1; end\n        8'h3d: begin out = 4'b0111; valid = 1'b1; end\n        8'h3e: begin out = 4'b1000; valid = 1'b1; end\n        8'h46: begin out = 4'b1001; valid = 1'b1; end\n        default: begin out = 4'b0000; valid = 1'b0; end\n    endcase\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "\n\tassign out[0] = in[7];\n\tassign out[1] = in[6];\n\tassign out[2] = in[5];\n\tassign out[3] = in[4];\n\tassign out[4] = in[3];\n\tassign out[5] = in[2];\n\tassign out[6] = in[1];\n\tassign out[7] = in[0];\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @(*) begin\n    case ({c,b,a})\n        3'b000: out = 0;\n        3'b001: out = 0;\n        3'b010: out = 0;\n        3'b011: out = 0;\n        3'b100: out = 1;\n        3'b101: out = 1;\n        3'b110: out = 1;\n        3'b111: out = 1;\n    endcase\nend\n\nendmodule", "result": "failed: 58 out of 232 samples.", "passed": false}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "\nalways @(posedge clk) begin\n\tif (shift_ena)\n\t\tq <= {data, q[3:1]};\n\telse if (count_ena)\n\t\tq <= q - 1;\nend\nendmodule", "result": "failed: 1886 out of 2071 samples.", "passed": false}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "\n\tassign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "reg [1:0] state;\nreg [1:0] next_state;\nparameter S0=2'b00, S1=2'b01, S2=2'b10, S3=2'b11;\n\nalways @(posedge clk or posedge reset) begin\n\tif(reset)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase(state)\n\tS0: if(reset) next_state = S1; else next_state = S0;\n\tS1: next_state = S2;\n\tS2: next_state = S3;\n\tS3: next_state = S3;\n\tdefault: next_state = S0;\n\tendcase\nend\n\nassign shift_ena = (state == S1 || state == S2 || state == S3);\n\nendmodule", "result": "failed: 10 out of 200 samples.", "passed": false}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2)\n\t\tout_always = b;\n\telse\n\t\tout_always = a;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "\nassign out = b & (~c) | (b & c) | (~b & c);\nendmodule", "result": "failed: 26 out of 219 samples.", "passed": false}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "logic [1:0] state, next_state;\nlogic [3:1] g;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\n\nalways_ff @(posedge clk or negedge resetn)\n\tif (!resetn)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tA: begin\n\t\t\tif (r[1]) next_state = B;\n\t\t\telse if (r[2]) next_state = C;\n\t\t\telse if (r[3]) next_state = D;\n\t\t\telse next_state = A;\n\t\tend\n\t\tB: begin\n\t\t\tif (r[1]) next_state = B;\n\t\t\telse next_state = A;\n\t\tend\n\t\tC: begin\n\t\t\tif (r[2]) next_state = C;\n\t\t\telse next_state = A;\n\t\tend\n\t\tdefault: next_state = A;\n\tendcase\n\nalways_comb\n\tcase(state)\n\t\tA: g = 3'b000;\n\t\tB: g = 3'b100;\n\t\tC: g = 3'b010;\n\t\tD: g = 3'b001;\n\t\tdefault: g = 3'b000;\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\nalways @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0000;\n\telse if (q == 4'b1001)\n\t\tq <= 4'b0000;\n\telse\n\t\tq <= q + 1;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] byte_count;\nlogic [2:0] byte_received;\n\nalways_ff @(posedge clk, posedge reset) begin\n    if (reset)\n        state <= 3'b000;\n    else case (state)\n        3'b000: if (in[3]) state <= 3'b001; // Search for start of message\n        3'b001: if (byte_received == 3) state <= 3'b000; // End of message\n                else state <= 3'b010; // Start receiving bytes\n        3'b010: if (byte_received < 3) state <= 3'b011; // Receive next byte\n                else state <= 3'b000; // Finished message\n        3'b011: state <= 3'b010; // Move to next byte\n    endcase\nend\n\nalways_ff @(posedge clk) begin\n    if (reset)\n        byte_received <= 3'b000;\n    else case (state)\n        3'b000: byte_received <= 3'b000;\n        3'b001: byte_received <= 3'b001;\n        3'b010: byte_received <= byte_received + 1;\n        3'b011:;\n    endcase\nend\n\nassign done = (state == 3'b010 & byte_received == 3);\n\nendmodule", "result": "failed: 88 out of 400 samples.", "passed": false}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "assign out = (sel == 1'b0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset)\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b000: if(x) next_state = 3'b001; else next_state = 3'b000;\n\t\t3'b001: if(x) next_state = 3'b100; else next_state = 3'b001;\n\t\t3'b010: if(x) next_state = 3'b001; else next_state = 3'b010;\n\t\t3'b011: if(x) next_state = 3'b100; else next_state = 3'b010;\n\t\t3'b100: if(x) next_state = 3'b100; else next_state = 3'b011;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b000: z = 0;\n\t\t3'b001: z = 0;\n\t\t3'b010: z = 0;\n\t\t3'b011: z = 1;\n\t\t3'b100: z = 1;\n\t\tdefault: z = 0;\n\tendcase\nend\n\nendmodule", "result": "failed: 297 out of 1006 samples.", "passed": false}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "logic [1:0] count_x;\nlogic [1:0] count_y;\nlogic state_A, state_B, state_C, state_D, state_E;\n\nalways_ff @(posedge clk or negedge resetn) begin\n\tif (!resetn) begin\n\t\tstate_A <= 1'b1;\n\t\tstate_B <= 1'b0;\n\t\tstate_C <= 1'b0;\n\t\tstate_D <= 1'b0;\n\t\tstate_E <= 1'b0;\n\t\tcount_x <= 2'b00;\n\t\tcount_y <= 2'b00;\n\tend else begin\n\t\tcase ({state_A, state_B, state_C, state_D, state_E})\n\t\t\t5'b10000: begin // State A\n\t\t\t\tf <= 1'b0;\n\t\t\t\tg <= 1'b0;\n\t\t\t\tstate_A <= 1'b0;\n\t\t\t\tstate_B <= 1'b1;\n\t\t\t\tcount_x <= 2'b00;\n\t\t\t\tcount_y <= 2'b00;\n\t\t\tend\n\t\t\t5'b01000: begin // State B\n\t\t\t\tf <= 1'b1;\n\t\t\t\tg <= 1'b0;\n\t\t\t\tif (x == 1'b1) count_x <= count_x + 1;\n\t\t\t\telse count_x <= 2'b00;\n\t\t\t\tstate_B <= 1'b0;\n\t\t\t\tstate_C <= 1'b1;\n\t\t\tend\n\t\t\t5'b00100: begin // State C\n\t\t\t\tf <= 1'b0;\n\t\t\t\tif (count_x == 2'b10 && x == 1'b0) count_x <= count_x + 1;\n\t\t\t\telse count_x <= count_x;\n\t\t\t\tstate_C <= 1'b0;\n\t\t\t\tstate_D <= 1'b1;\n\t\t\tend\n\t\t\t5'b00010: begin // State D\n\t\t\t\tf <= 1'b0;\n\t\t\t\tif (count_x == 2'b11 && x == 1'b1) begin\n\t\t\t\t\tg <= 1'b1;\n\t\t\t\t\tstate_D <= 1'b0;\n\t\t\t\t\tstate_E <= 1'b1;\n\t\t\t\t\tcount_y <= 2'b00;\n\t\t\t\tend else begin\n\t\t\t\t\tstate_D <= 1'b1;\n\t\t\t\t\tcount_y <= 2'b00;\n\t\t\t\tend\n\t\t\tend\n\t\t\t5'b00001: begin // State E\n\t\t\t\tf <= 1'b0;\n\t\t\t\tif (y == 1'b1) begin\n\t\t\t\t\tg <= 1'b1;\n\t\t\t\t\tcount_y <= count_y + 1;\n\t\t\t\t\tif (count_y == 2'b10) state_E <= 1'b0; // Permanent g=1\n\t\t\t\tend else begin\n\t\t\t\t\tif (count_y == 2'b01) begin\n\t\t\t\t\t\tg <= 1'b0;\n\t\t\t\t\t\tstate_E <= 1'b0;\n\t\t\t\t\t\tstate_A <= 1'b1;\n\t\t\t\t\tend else count_y <= count_y + 1;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge ~clk) begin\n\tif (reset)\n\t\tq <= 8'b00110100; // Binary for 0x34\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "\n\tassign parity = ^in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        2'b00: // State A\n            if(in == 0) \n                next_state = 2'b00;\n            else \n                next_state = 2'b01;\n            out = 1'b0;\n        2'b01: // State B\n            if(in == 0) \n                next_state = 2'b10;\n            else \n                next_state = 2'b01;\n            out = 1'b0;\n        2'b10: // State C\n            if(in == 0) \n                next_state = 2'b00;\n            else \n                next_state = 2'b11;\n            out = 1'b0;\n        2'b11: // State D\n            if(in == 0) \n                next_state = 2'b10;\n            else \n                next_state = 2'b01;\n            out = 1'b1;\n        default:\n            next_state = 2'b00;\n            out = 1'b0;\n    endcase\nend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "reg z;\nalways @(x or y) begin\n\tif (x & ~y)\n\t\tz <= 0;\n\telse if (~x & y)\n\t\tz <= 0;\n\telse if (x & y)\n\t\tz <= 1;\n\telse\n\t\tz <= 1;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "logic [2:0] state, next_state;\n\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b011;\nparameter E = 3'b100;\nparameter F = 3'b101;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tA: if (w == 1'b1) next_state = B; else next_state = A;\n\t\tB: if (w == 1'b1) next_state = C; else next_state = D;\n\t\tC: if (w == 1'b1) next_state = E; else next_state = D;\n\t\tD: if (w == 1'b1) next_state = F; else next_state = A;\n\t\tE: if (w == 1'b1) next_state = E; else next_state = D;\n\t\tF: if (w == 1'b1) next_state = C; else next_state = D;\n\tendcase\n\nassign z = (state == E) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 45 out of 400 samples.", "passed": false}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or negedge resetn) begin\n\tif (!resetn) begin\n\t\tq <= 16'b0;\n\tend else begin\n\t\tif (byteena == 2'b11) begin\n\t\t\tq <= d;\n\t\tend else if (byteena == 2'b01) begin\n\t\t\tq[15:8] <= d[15:8];\n\t\tend else if (byteena == 2'b10) begin\n\t\t\tq[7:0] <= d[7:0];\n\t\tend\n\tend\nend\n\nendmodule", "result": "failed: 173 out of 443 samples.", "passed": false}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "\nalways @(posedge clk) begin\n\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\tif (~in[i] && in[i+8*i]) // Detecting the transition from 0 to 1\n\t\t\tpedge[i] <= 1'b1;\n\t\telse\n\t\t\tpedge[i] <= 1'b0;\n\tend\nend\nendmodule", "result": "failed: 182 out of 227 samples.", "passed": false}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "always @(posedge clock) begin\n\tif (a == 1'b1 && p == 1'b0) begin\n\t\tp <= 1'b1;\n\tend else if (a == 1'b0 && p == 1'b1) begin\n\t\tp <= 1'b0;\n\tend\n\t\n\tif (p == 1'b1 && q == 1'b0) begin\n\t\tq <= 1'b1;\n\tend else if (p == 1'b0 && q == 1'b1) begin\n\t\tq <= 1'b0;\n\tend\nend\n\nendmodule", "result": "failed: 235 out of 240 samples.", "passed": false}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        for (int i = 0; i < 512; i++) begin\n            q[i] <= (i == 0) ? data[1] ^ data[0] :\n                    (i == 511) ? data[510] ^ data[511] :\n                    data[i-1] ^ data[i+1];\n        end\nend\n\nendmodule", "result": "failed: 7054 out of 7121 samples.", "passed": false}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "\n\t\n\tassign z = (A == B) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "assign out_both = {99'b0, {98:0}{in[i] & in[i+1]}};\nassign out_any = {98:0}{in[i] | in[i+1]};\nassign out_different = {in[i] ^ in[(i+1)%100]};\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "\nalways @(posedge ena) begin\n\tif (ena)\n\t\tq <= d;\nend\nendmodule", "result": "failed: 40 out of 100 samples.", "passed": false}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "\n\tassign out = in[(sel*4+3):(sel*4)];\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "always_comb begin\n    case (sel)\n        4'b0000: out = a;\n        4'b0001: out = b;\n        4'b0010: out = c;\n        4'b0011: out = d;\n        4'b0100: out = e;\n        4'b0101: out = f;\n        4'b0110: out = g;\n        4'b0111: out = h;\n        4'b1000: out = i;\n        default: out = 16'b1;\n    endcase\nend\nendmodule", "result": "failed: 101 out of 220 samples.", "passed": false}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "assign out_or_bitwise = a | b;\nassign out_or_logical = a != 3'b0 || b != 3'b0;\nassign out_not[5:3] = ~b;\nassign out_not[2:0] = ~a;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "assign next_state = (state == 4'b0001) ? (in ? 4'b0010 : 4'b0001) :\n                    (state == 4'b0010) ? (in ? 4'b0010 : 4'b0100) :\n                    (state == 4'b0100) ? (in ? 4'b1000 : 4'b0001) :\n                                         (in ? 4'b0010 : 4'b0100);\n                    \nassign out = (state == 4'b1000) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 287 out of 600 samples.", "passed": false}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "\n\t\n\talways @(*) begin\n\t\tif(a <= b & a <= c & a <= d)\n\t\t\tmin = a;\n\t\telse if(b <= c & b <= d)\n\t\t\tmin = b;\n\t\telse if(c <= d)\n\t\t\tmin = c;\n\t\telse\n\t\t\tmin = d;\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "assign out_and = a & b;\nassign out_or = a | b;\nassign out_xor = a ^ b;\nassign out_nand = ~(a & b);\nassign out_nor = ~(a | b);\nassign out_xnor = ~(a ^ b);\nassign out_anotb = a & ~b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (a & ~b & ~c) | (~a & b & ~d) | (~a & ~b & c & d) | (a & b & ~c & ~d);\nendmodule", "result": "failed: 110 out of 232 samples.", "passed": false}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state;\nreg [3:0] count;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= A;\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\tA: if (s) state <= B;\n\t\t\tB: begin\n\t\t\t\t\tcount <= count + 1;\n\t\t\t\t\tif (count == 4) count <= 0;\n\t\t\t\tend\n\t\tendcase\n\tend\nend\n\nreg [1:0] match_count;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tmatch_count <= 0;\n\telse\n\tbegin\n\t\tcase({state, count})\n\t\t\t{B, 1}: if (w) match_count <= match_count + 1;\n\t\t\t{B, 2}: if (w) match_count <= match_count + 1;\n\t\t\t{B, 3}: if (w) match_count <= match_count + 1;\n\t\t\tdefault: match_count <= 0;\n\t\tendcase\n\tend\nend\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tz <= 0;\n\telse\n\tbegin\n\t\tif ({state, count} == {B, 4})\n\t\t\tz <= (match_count == 2);\n\t\telse\n\t\t\tz <= 0;\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n\tassign out = { {24{in[7]}}, in };\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "reg [3:0] shift_reg;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (!resetn)\n\t\tshift_reg <= 4'b0;\n\telse\n\t\tshift_reg <= {in, shift_reg[3:1]};\nend\n\nassign out = shift_reg[3];\n\nendmodule", "result": "failed: 131 out of 299 samples.", "passed": false}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @* begin\n    case (in)\n        4'b0001: pos = 2'd0;\n        4'b0010: pos = 2'd1;\n        4'b0100: pos = 2'd2;\n        4'b1000: pos = 2'd3;\n        default: pos = 2'd0; // If none of the inputs are high, output zero.\n    endcase\nend\n\nendmodule", "result": "failed: 20 out of 94 samples.", "passed": false}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk or posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00; // OFF state\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b00: begin // OFF\n\t\t\tout = 0;\n\t\t\tnext_state = (j) ? 2'b01 : 2'b00; // ON if j=1 else stay OFF\n\t\tend\n\t\t2'b01: begin // ON\n\t\t\tout = 1;\n\t\t\tnext_state = (k) ? 2'b00 : 2'b01; // OFF if k=1 else stay ON\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": "assign out = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "\n\tassign one = 1;\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "always @(*) begin\n    for (int i = 0; i < 100; i++) begin\n        out[i] = in[99-i];\n    end\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "logic d;\n\nalways_ff @(posedge clk) begin\n    out <= d;\nend\n\nassign d = ^{in, out};\n\nendmodule", "result": "failed: 1 out of 100 samples.", "passed": false}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tq <= 4'b0;\n\telse if (load)\n\t\tq <= data;\n\telse if (ena)\n\t\tq <= {1'b0, q[3:1]};\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = (x2 & ~x1) | (~x3 & x1) | (x3 & x2);\nendmodule", "result": "failed: 6 out of 58 samples.", "passed": false}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "assign sum = a ^ b;\nassign cout = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "always @(*) begin\n    if (cpu_overheated)\n        shut_off_combputer = 1;\n    else\n        shut_off_computer = 0;\nend\n\nalways @(*) begin\n    if (~arrived)\n        keep_driving = ~gas_tank_empty;\n    else\n        keep_driving = 0;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] current_state;\nlogic [1:0] next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways_ff @(posedge clk, posedge reset)\nbegin\n\tif(reset)\n\t\tcurrent_state <= OFF;\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways_comb\nbegin\n\tcase(current_state)\n\t\tOFF:\n\t\t\tif(j)\n\t\t\t\tnext_state = ON;\n\t\t\telse\n\t\t\t\tnext_state = OFF;\n\t\tON:\n\t\t\tif(k)\n\t\t\t\tnext_state = OFF;\n\t\t\telse\n\t\t\t\tnext_state = ON;\n\tendcase\nend\n\nassign out = (current_state == ON) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 21 out of 241 samples.", "passed": false}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "assign {w, x, y, z} = {a, b, c, d, e, f, 2'b11};\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & ~b & ~c & ~d) | (a & ~b & c & d) | (a & b & ~c & ~d) | (a & b & c & d);\n\nendmodule", "result": "failed: 62 out of 121 samples.", "passed": false}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge reset)\n\tif (reset)\n\t\tstate <= 2'b10; // Reset state B\n\telse\n\t\tstate <= next_state;\n\nalways @(*) begin\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tout = 1;\n\t\t\tif (in == 0)\n\t\t\t\tnext_state = 2'b01; // Transition to A\n\t\t\telse\n\t\t\t\tnext_state = 2'b10; // Stay in B\n\t\tend\n\t\t2'b01: begin // State A\n\t\t\tout = 0;\n\t\t\tif (in == 0)\n\t\t\t\tnext_state = 2'b10; // Transition to B\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // Stay in A\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "\n\twire int_carry;\n\n\tassign {cout, sum} = a ^ b ^ cin;\n\tassign int_carry = a & b;\n\tassign cout = int_carry | (cin & (a ^ b));\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\n\tlogic xnor_out;\n\n\tassign xnor_out = ~(in1 ^ in2); // XNOR operation\n\tassign out = xnor_out ^ in3; // XOR operation\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "assign mux_in[0] = 1'b1; // ab = 00\nassign mux_in[1] = 1'b0; // ab = 01\nassign mux_in[2] = d;   // ab = 11\nassign mux_in[3] = 1'b1; // ab = 10\n\nendmodule", "result": "failed: 60 out of 60 samples.", "passed": false}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\nlogic z_out;\n\nalways_ff @(posedge clk or posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00; // State A\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b00: // State A\n\t\t\tif (x == 1'b1)\n\t\t\t\tnext_state = 2'b01; // State B\n\t\t\telse\n\t\t\t\tnext_state = 2'b00; // State A\n\t\t\tz_out = x ? 1'b1 : 1'b0;\n\t\t2'b01: // State B\n\t\t\tnext_state = 2'b01; // State B\n\t\t\tz_out = x ? 1'b0 : 1'b1;\n\tendcase\n\nassign z = z_out;\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "logic next_state;\n\nalways @(posedge clk) begin\n    q <= next_state;\nend\n\nalways @(*) begin\n    case ({a, b})\n        2'b00: next_state = 0;\n        2'b01: next_state = q;\n        2'b10: next_state = q;\n        2'b11: next_state = ~q;\n    endcase\nend\n\nassign state = next_state;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "logic [3:0] y;\nassign y = x[4:1];\nalways_comb begin\n    case (y)\n        4'b0000, 4'b1000, 4'b1100, 4'b1110, 4'b0110, 4'b0010 : f = 1'b1;\n        default : f = 1'b0;\n    endcase\nend\nendmodule", "result": "failed: 36 out of 100 samples.", "passed": false}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "logic [5:0] shift_reg;\nlogic [4:0] count_ones;\nalways_ff @(posedge clk) begin\n    if (reset)\n        shift_reg <= 6'b0;\n    else\n        shift_reg <= {shift_reg[4:0], in};\nend\n\nalways_ff @(posedge clk) begin\n    if (reset)\n        count_ones <= 5'b0;\n    else if (in)\n        count_ones <= count_ones + 1;\n    else\n        count_ones <= 5'b0;\nend\n\nassign disc = (shift_reg == 6'b011111);\nassign flag = (shift_reg == 6'b111110);\nassign err = (count_ones >= 5'b11110);\n\nendmodule", "result": "failed: 288 out of 801 samples.", "passed": false}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "reg [3:0] delay;\nreg [3:0] counter;\nreg [3:0] state;\nreg [3:0] shift_reg;\n\nparameter SEARCH = 4'b0000;\nparameter READ_DELAY = 4'b0001;\nparameter COUNTING = 4'b0010;\nparameter WAIT_ACK = 4'b0011;\n\nalways @(posedge clk or posedge reset)\nbegin\n    if (reset)\n        state <= SEARCH;\n    else\n    case(state)\n        SEARCH: begin\n            shift_reg <= {shift_reg[2:0], data};\n            if (shift_reg == 4'b1101)\n                state <= READ_DELAY;\n        end\n        READ_DELAY: begin\n            delay <= {delay[2:0], data};\n            if (delay[3])\n                state <= COUNTING;\n        end\n        COUNTING: begin\n            if (counter < delay)\n                counter <= counter + 1;\n            else begin\n                counter <= 0;\n                count <= delay - 1;\n                if (delay == 0)\n                    state <= WAIT_ACK;\n                else\n                    delay <= delay - 1;\n            end\n            counting <= 1;\n        end\n        WAIT_ACK: begin\n            done <= 1;\n            if (ack)\n                state <= SEARCH;\n        end\n    endcase\nend\n\nassign count = (state == COUNTING) ? counter : 4'bxxxx;\nassign counting = (state == COUNTING);\nassign done = (state == WAIT_ACK);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "reg [2:0] current_state;\nreg [2:0] next_state;\n\nparameter LOW = 3'b000;\nparameter MIDDLE_LOW = 3'b001;\nparameter MIDDLE_HIGH = 3'b010;\nparameter HIGH = 3'b011;\nparameter VERY_HIGH = 3'b100;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif(reset)\n\t\tcurrent_state <= VERY_HIGH;\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways @(*)\nbegin\n\tcase(current_state)\n\tVERY_HIGH: begin\n\t\tif(s == 3'b111) next_state = VERY_HIGH;\n\t\telse if(s == 3'b110) next_state = HIGH;\n\t\telse if(s == 3'b100) next_state = MIDDLE_HIGH;\n\t\telse if(s == 3'b000) next_state = LOW;\n\tend\n\tHIGH: begin\n\t\tif(s == 3'b111) next_state = VERY_HIGH;\n\t\telse if(s == 3'b110) next_state = HIGH;\n\t\telse if(s == 3'b100) next_state = MIDDLE_HIGH;\n\t\telse if(s == 3'b000) next_state = LOW;\n\tend\n\tMIDDLE_HIGH: begin\n\t\tif(s == 3'b111) next_state = VERY_HIGH;\n\t\telse if(s == 3'b110) next_state = HIGH;\n\t\telse if(s == 3'b100) next_state = MIDDLE_HIGH;\n\t\telse if(s == 3'b000) next_state = LOW;\n\tend\n\tMIDDLE_LOW: begin\n\t\tif(s == 3'b111) next_state = VERY_HIGH;\n\t\telse if(s == 3'b110) next_state = HIGH;\n\t\telse if(s == 3'b100) next_state = MIDDLE_HIGH;\n\t\telse if(s == 3'b000) next_state = LOW;\n\tend\n\tLOW: begin\n\t\tif(s == 3'b111) next_state = VERY_HIGH;\n\t\telse if(s == 3'b110) next_state = HIGH;\n\t\telse if(s == 3'b100) next_state = MIDDLE_HIGH;\n\t\telse if(s == 3'b000) next_state = LOW;\n\tend\n\tdefault: next_state = VERY_HIGH;\n\tendcase\nend\n\nalways @(*)\nbegin\n\tcase(current_state)\n\tVERY_HIGH: begin\n\t\tfr3 = 0; fr2 = 0; fr1 = 0; dfr = 0;\n\tend\n\tHIGH: begin\n\t\tfr3 = 0; fr2 = 0; fr1 = 1; dfr = 0;\n\tend\n\tMIDDLE_HIGH: begin\n\t\tfr3 = 0; fr2 = 1; fr1 = 1; dfr = 0;\n\tend\n\tMIDDLE_LOW: begin\n\t\tfr3 = 0; fr2 = 1; fr1 = 1; dfr = 1;\n\tend\n\tLOW: begin\n\t\tfr3 = 1; fr2 = 1; fr1 = 1; dfr = 1;\n\tend\n\tdefault: begin\n\t\tfr3 = 1; fr2 = 1; fr1 = 1; dfr = 1;\n\tend\n\tendcase\nend\n\nendmodule", "result": "failed: 1179 out of 2040 samples.", "passed": false}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "\n\t\n\ttypedef enum reg [2:0] {IDLE, START_BIT, DATA_BITS, STOP_BIT} state_t;\n\tstate_t current_state, next_state;\n\treg [7:0] data_reg;\n\n\talways_ff @(posedge clk, posedge reset)\n\t\tif (reset)\n\t\t\tcurrent_state <= IDLE;\n\t\telse\n\t\t\tcurrent_state <= next_state;\n\n\talways_comb begin\n\t\tnext_state = current_state;\n\t\tdone = 1'b0;\n\n\t\tcase (current_state)\n\t\t\tIDLE: begin\n\t\t\t\tif (~in)\n\t\t\t\t\tnext_state = START_BIT;\n\t\t\tend\n\n\t\t\tSTART_BIT: begin\n\t\t\t\tnext_state = DATA_BITS;\n\t\t\tend\n\n\t\t\tDATA_BITS: begin\n\t\t\t\tdata_reg = {data_reg[6:0], in};\n\t\t\t\tif (&data_reg)\n\t\t\t\t\tnext_state = STOP_BIT;\n\t\t\tend\n\n\t\t\tSTOP_BIT: begin\n\t\t\t\tif (in)\n\t\t\t\t\tnext_state = IDLE;\n\t\t\t\telse\n\t\t\t\t\tnext_state = STOP_BIT; // Wait for the correct stop bit\n\t\t\t\tdone = 1'b1;\n\t\t\tend\n\t\tendcase\n\tend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [6:0] bit_count;\nlogic [7:0] byte;\n\nalways_ff @(posedge clk, posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\t\tstate <= 3'b000;\n\t\tbit_count <= 7'b0000000;\n\t\tbyte <= 8'b00000000;\n\t\tout_byte <= 8'b00000000;\n\t\tdone <= 1'b0;\n\tend\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\t3'b000: // Idle\n\t\t\t\tif (~in)\n\t\t\t\t\tstate <= 3'b001; // Start bit detected, move to receiving state\n\t\t\t\telse\n\t\t\t\t\tstate <= 3'b000; // Stay in idle if no start bit\n\n\t\t\t3'b001: // Receiving\n\t\t\t\tif (bit_count == 7'b1111111)\n\t\t\t\t\tstate <= 3'b010; // All 8 bits received, check stop bit\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tbit_count <= bit_count + 1;\n\t\t\t\t\tbyte[bit_count] <= in;\n\t\t\t\t\tstate <= 3'b001;\n\t\t\t\tend\n\n\t\t\t3'b010: // Checking stop bit\n\t\t\t\tif (in)\n\t\t\t\tbegin\n\t\t\t\t\tstate <= 3'b000; // Stop bit detected, return to idle\n\t\t\t\t\tdone <= 1'b1;\n\t\t\t\t\tout_byte <= byte;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tstate <= 3'b010; // Wait for correct stop bit\n\n\t\t\tdefault: state <= 3'b000;\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "logic [6:0] global_history;\nlogic [6:0] pht_index;\nlogic [6:0] next_global_history;\nlogic [6:0] temp_history;\n\nlogic [6:0] train_index;\nlogic [1:0] pht_entries [0:127];\n\nalways_ff @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tglobal_history <= 7'b0;\n\telse\n\tbegin\n\t\tif (train_valid && !train_mispredicted)\n\t\t\tglobal_history <= temp_history;\n\t\telse if (predict_valid)\n\t\t\tglobal_history <= next_global_history;\n\tend\nend\n\nassign pht_index = {global_history, predict_pc}[6:0];\nassign train_index = {train_history, train_pc}[6:0];\n\nalways_comb\nbegin\n\tcase(pht_entries[pht_index])\n\t\t2'b00: predict_taken = 0;\n\t\t2'b01: predict_taken = (pht_entries[pht_index][1] == 1) ? 1 : 0;\n\t\t2'b10: predict_taken = (pht_entries[pht_index][1] == 1) ? 1 : 0;\n\t\t2'b11: predict_taken = 1;\n\tendcase\nend\n\nalways_comb\nbegin\n\tcase(pht_entries[pht_index])\n\t\t2'b00: next_global_history = {global_history[5:0], predict_taken};\n\t\t2'b01: next_global_history = {global_history[5:0], predict_taken};\n\t\t2'b10: next_global_history = {global_history[5:0], predict_taken};\n\t\t2'b11: next_global_history = {global_history[5:0], predict_taken};\n\tendcase\nend\n\nalways_ff @(posedge clk)\nbegin\n\tif(train_valid)\n\t\tpht_entries[train_index] <= train_taken ? 2'b11 : 2'b00;\nend\n\nassign predict_history = global_history;\n\nalways_comb\nbegin\n\tif (train_valid && train_mispredicted)\n\t\ttemp_history = train_history;\n\telse if (predict_valid)\n\t\ttemp_history = next_global_history;\n\telse\n\t\ttemp_history = global_history;\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "typedef enum logic [3:0] {WALK_LEFT, WALK_RIGHT, FALL, DIG, SPLATTER} state_t;\nstate_t current_state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tcurrent_state <= WALK_LEFT;\n\telse\n\t\tcurrent_state <= next_state;\n\nalways_comb begin\n\twalk_left = 1'b0;\n\twalk_right = 1'b0;\n\taaah = 1'b0;\n\tdigging = 1'b0;\n\tcase(current_state)\n\t\tWALK_LEFT: begin\n\t\t\tif(bump_left)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if(bump_right)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if(!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if(dig && ground)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\twalk_left = 1'b1;\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\tif(bump_right)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if(bump_left)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if(!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if(dig && ground)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\twalk_right = 1'b1;\n\t\tend\n\t\tFALL: begin\n\t\t\tif(ground) begin\n\t\t\t\tif(next_state == DIG || next_state == FALL)\n\t\t\t\t\tnext_state = FALL;\n\t\t\t\telse if(walk_left)\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\telse if(walk_right)\n\t\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\t\telse\n\t\t\t\t\tnext_state = FALL;\n\t\t\t\taaah = 1'b1;\n\t\t\tend else\n\t\t\t\tnext_state = FALL;\n\t\tend\n\t\tDIG: begin\n\t\t\tif(!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if(dig && ground)\n\t\t\t\tnext_state = DIG;\n\t\t\telse begin\n\t\t\t\tif(walk_left)\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\telse if(walk_right)\n\t\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\t\telse\n\t\t\t\t\tnext_state = FALL;\n\t\t\tend\n\t\t\tdigging = 1'b1;\n\t\tend\n\t\tSPLATTER: begin\n\t\t\twalk_left = 1'b0;\n\t\t\twalk_right = 1'b0;\n\t\t\taaah = 1'b0;\n\t\t\tdigging = 1'b0;\n\t\t\tnext_state = SPLATTER;\n\t\tend\n\tendcase\nend\n\nlogic [4:0] fall_counter;\nalways_ff @(posedge clk)\n\tif (current_state == FALL && !ground)\n\t\tfall_counter <= fall_counter + 1;\n\telse if (current_state != FALL)\n\t\tfall_counter <= 5'b0;\n\nalways_comb\n\tif (fall_counter >= 5'd20 && ground)\n\t\tnext_state = SPLATTER;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [3:0] state;\nreg [3:0] pattern_reg;\n\nparameter IDLE = 4'b0000;\nparameter DETECTING = 4'b0001;\nparameter SHIFTING = 4'b0010;\nparameter COUNTING = 4'b0011;\nparameter NOTIFIED = 4'b0100;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif(reset)\n\t\tstate <= IDLE;\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\tIDLE: begin\n\t\t\t\tpattern_reg <= 4'b0000;\n\t\t\t\tif(data == 1)\n\t\t\t\t\tstate <= DETECTING;\n\t\t\t\telse\n\t\t\t\t\tstate <= IDLE;\n\t\t\tend\n\t\t\tDETECTING: begin\n\t\t\t\tpattern_reg[2:0] <= pattern_reg[3:1];\n\t\t\t\tpattern_reg[3] <= data;\n\t\t\t\tif(pattern_reg == 4'b1101)\n\t\t\t\t\tstate <= SHIFTING;\n\t\t\t\telse\n\t\t\t\t\tstate <= IDLE;\n\t\t\tend\n\t\t\tSHIFTING: begin\n\t\t\t\tshift_ena <= 1;\n\t\t\t\tif(pattern_reg == 4'b1101 && $countones(pattern_reg) == 4)\n\t\t\t\t\tstate <= COUNTING;\n\t\t\t\telse\n\t\t\t\t\tstate <= SHIFTING;\n\t\t\tend\n\t\t\tCOUNTING: begin\n\t\t\t\tcounting <= 1;\n\t\t\t\tif(done_counting)\n\t\t\t\t\tstate <= NOTIFIED;\n\t\t\t\telse\n\t\t\t\t\tstate <= COUNTING;\n\t\t\tend\n\t\t\tNOTIFIED: begin\n\t\t\t\tdone <= 1;\n\t\t\t\tif(ack)\n\t\t\t\t\tstate <= IDLE;\n\t\t\t\telse\n\t\t\t\t\tstate <= NOTIFIED;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign shift_ena = (state == SHIFTING);\nassign counting = (state == COUNTING);\nassign done = (state == NOTIFIED);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "reg [255:0] next_state;\nalways @(posedge clk) begin\n\tif(load)\n\t\tq <= data;\n\telse\n\t\tq <= next_state;\nend\n\nalways @* begin\n\tfor (int i = 0; i < 256; i++) begin\n\t\tint count = 0;\n\t\tint x = i % 16;\n\t\tint y = i / 16;\n\n\t\tcount += q[((x - 1 + 16) % 16) + ((y - 1 + 16) % 16) * 16];\n\t\tcount += q[(x + ((y - 1 + 16) % 16) * 16)];\n\t\tcount += q[((x + 1 + 16) % 16) + ((y - 1 + 16) % 16) * 16];\n\t\tcount += q[((x - 1 + 16) % 16) + (y * 16)];\n\t\tcount += q[((x + 1 + 16) % 16) + (y * 16)];\n\t\tcount += q[((x - 1 + 16) % 16) + ((y + 1 + 16) % 16) * 16];\n\t\tcount += q[(x + ((y + 1 + 16) % 16) * 16)];\n\t\tcount += q[((x + 1 + 16) % 16) + ((y + 1 + 16) % 16) * 16];\n\n\t\tcase(count)\n\t\t\t2: next_state[i] = q[i];\n\t\t\t3: next_state[i] = 1;\n\t\t\tdefault: next_state[i] = 0;\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "logic [2:0] current_state, next_state;\nlogic falling;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tcurrent_state <= 3'b001; // Walk Left\n\telse\n\t\tcurrent_state <= next_state;\n\nalways_comb begin\n\tcase (current_state)\n\t\t3'b001: begin // Walk Left\n\t\t\tif (bump_left) next_state = 3'b010; // Walk Right\n\t\t\telse if (bump_right) next_state = 3'b010; // Walk Right\n\t\t\telse if (~ground && !falling) next_state = 3'b000; // Fall\n\t\t\telse if (dig && ground) next_state = 3'b100; // Dig\n\t\t\telse next_state = 3'b001; // Stay Walk Left\n\t\tend\n\t\t3'b010: begin // Walk Right\n\t\t\tif (bump_right) next_state = 3'b001; // Walk Left\n\t\t\telse if (bump_left) next_state = 3'b001; // Walk Left\n\t\t\telse if (~ground && !falling) next_state = 3'b000; // Fall\n\t\t\telse if (dig && ground) next_state = 3'b100; // Dig\n\t\t\telse next_state = 3'b010; // Stay Walk Right\n\t\tend\n\t\t3'b000: begin // Fall\n\t\t\tif (ground && falling) next_state = 3'b001; // Walk Left after fall\n\t\t\telse if (ground && !falling) next_state = 3'b010; // Walk Right after fall\n\t\t\telse next_state = 3'b000; // Stay Fall\n\t\tend\n\t\t3'b100: begin // Dig\n\t\t\tif (!ground) next_state = 3'b000; // Fall\n\t\t\telse if (ground) next_state = 3'b100; // Continue Dig\n\t\tend\n\tendcase\nend\n\nassign walk_left = (current_state == 3'b001);\nassign walk_right = (current_state == 3'b010);\nassign aaah = (current_state == 3'b000);\nassign digging = (current_state == 3'b100);\n\nalways_ff @(posedge clk)\n\tif (!ground && !falling)\n\t\tfalling <= 1'b1;\n\telse if (ground && falling)\n\t\tfalling <= 1'b0;\n\nendmodule", "result": "failed: 237 out of 443 samples.", "passed": false}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tbegin\n\t\thh <= 8'b0001_0010; // 12 in BCD\n\t\tmm <= 8'b0000_0000; // 00 in BCD\n\t\tss <= 8'b0000_0000; // 00 in BCD\n\t\tpm <= 1'b0;\n\t\tend\n\telse if (ena) begin\n\t\tss <= ss + 1;\n\t\tif (ss == 8'b0011_1001) begin // 59 in BCD\n\t\t\tss <= 8'b0000_0000; // reset seconds\n\t\t\tmm <= mm + 1;\n\t\t\tif (mm == 8'b0011_1001) begin // 59 in BCD\n\t\t\t\tmm <= 8'b0000_0000; // reset minutes\n\t\t\t\thh <= hh + 1;\n\t\t\t\tif (hh == 8'b0001_0100) begin // 14 in BCD, which is 2 in 12-hour format\n\t\t\t\t\thh <= 8'b0000_0010; // reset hours to 02\n\t\t\t\t\tpm <= ~pm; // toggle AM/PM\n\t\t\t\tend\n\t\t\t\telse if (hh == 8'b0001_0010 && pm == 1'b1) begin // 12 PM, transition to 1 AM\n\t\t\t\t\thh <= 8'b0000_0001; // reset hours to 01\n\t\t\t\t\tpm <= 1'b0; // switch to AM\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\nendmodule", "result": "failed: 351966 out of 352413 samples.", "passed": false}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "logic [1:0] state, next_state;\nlogic falling;\n\nalways_ff @(posedge clk or posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00; // Initial state: walk_left = 1\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: begin // Walk Left\n\t\t\twalk_left = 1;\n\t\t\twalk_right = 0;\n\t\t\taaah = ground ? 0 : 1;\n\t\t\tfalling = ~ground;\n\t\t\tif (bump_left & !falling)\n\t\t\t\tnext_state = 2'b00; // Stay in walk_left\n\t\t\telse if (bump_right & !falling)\n\t\t\t\tnext_state = 2'b01; // Switch to walk_right\n\t\t\telse if (falling)\n\t\t\t\tnext_state = 2'b00; // Stay in walk_left during fall\n\t\t\telse\n\t\t\t\tnext_state = 2'b00; // Stay in walk_left\n\t\tend\n\t\t2'b01: begin // Walk Right\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 1;\n\t\t\taaah = ground ? 0 : 1;\n\t\t\tfalling = ~ground;\n\t\t\tif (bump_right & !falling)\n\t\t\t\tnext_state = 2'b01; // Stay in walk_right\n\t\t\telse if (bump_left & !falling)\n\t\t\t\tnext_state = 2'b00; // Switch to walk_left\n\t\t\telse if (falling)\n\t\t\t\tnext_state = 2'b01; // Stay in walk_right during fall\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // Stay in walk_right\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tq <= 16'b0;\n\telse begin\n\t\tcase ({q[3:0]})\n\t\t\t4'd9: begin\n\t\t\t\tq[3:0] <= 4'b0;\n\t\t\t\tena[1] <= 1;\n\t\t\tend\n\t\t\tdefault: q[3:0] <= q[3:0] + 1;\n\t\tendcase\n\t\t\n\t\tif (ena[1]) begin\n\t\t\tena[1] <= 0;\n\t\t\tcase ({q[7:4]})\n\t\t\t\t4'd9: begin\n\t\t\t\t\tq[7:4] <= 4'b0;\n\t\t\t\t\tena[2] <= 1;\n\t\t\t\tend\n\t\t\t\tdefault: q[7:4] <= q[7:4] + 1;\n\t\t\tendcase\n\t\t\t\n\t\t\tif (ena[2]) begin\n\t\t\t\tena[2] <= 0;\n\t\t\t\tcase ({q[11:8]})\n\t\t\t\t\t4'd9: begin\n\t\t\t\t\t\tq[11:8] <= 4'b0;\n\t\t\t\t\t\tena[3] <= 1;\n\t\t\t\t\tend\n\t\t\t\t\tdefault: q[11:8] <= q[11:8] + 1;\n\t\t\t\tendcase\n\t\t\t\t\n\t\t\t\tif (ena[3]) begin\n\t\t\t\t\tena[3] <= 0;\n\t\t\t\t\tcase ({q[15:12]})\n\t\t\t\t\t\t4'd9: q[15:12] <= 4'b0;\n\t\t\t\t\t\tdefault: q[15:12] <= q[15:12] + 1;\n\t\t\t\t\tendcase\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "\n\tassign out = (sel == 1'b0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(*) begin\n    case(y)\n        3'b000: Y2 = 0; // State A\n        3'b001: Y2 = w ? 1 : 0; // State B\n        3'b010: Y2 = 1; // State C\n        3'b011: Y2 = w ? 1 : 0; // State D\n        3'b100: Y2 = 1; // State E\n        3'b101: Y2 = 0; // State F\n    endcase\nend\nendmodule", "result": "failed: 31 out of 100 samples.", "passed": false}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "assign ringer = ~vibrate_mode & ring;\nassign motor = vibrate_mode & ring;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*) begin\n    if(a & b)\n        out_alwaysblock = 1;\n    else\n        out_alwaysblock = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": "\n\tassign zero = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n    if (a)\n        q <= ~q;\n    else\n        q <= 1'b1;\nend\n\nendmodule", "result": "failed: 26 out of 123 samples.", "passed": false}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\nlogic carry;\n\nenum logic [1:0] {IDLE, COMPLEMENT, ADD_ONE} states;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= IDLE;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\nbegin\n\tcase(state)\n\tIDLE:\n\t\tif (!areset)\n\t\t\tnext_state = COMPLEMENT;\n\t\telse\n\t\t\tnext_state = IDLE;\n\tCOMPLEMENT:\n\t\tif (x)\n\t\t\tnext_state = ADD_ONE;\n\t\telse\n\t\t\tnext_state = COMPLEMENT;\n\tADD_ONE:\n\t\tnext_state = COMPLEMENT;\n\tendcase\nend\n\nalways_ff @(posedge clk)\n\tif (areset)\n\t\tcarry <= 1'b0;\n\telse if (state == ADD_ONE)\n\t\tcarry <= ~carry;\n\nalways_comb\n\tcase(state)\n\tIDLE: \n\t\tz = 1'b0;\n\tCOMPLEMENT:\n\t\tz = ~x;\n\tADD_ONE:\n\t\tz = x ^ carry;\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] current_state, next_state;\n\nalways_ff @(posedge clk, posedge areset) begin\n\tif (areset)\n\t\tcurrent_state <= 2'b00;\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways_comb begin\n\tcase (current_state)\n\t\t2'b00: if (in == 1'b0) next_state = 2'b00; else next_state = 2'b01;\n\t\t2'b01: if (in == 1'b0) next_state = 2'b11; else next_state = 2'b01;\n\t\t2'b11: if (in == 1'b0) next_state = 2'b00; else next_state = 2'b10;\n\t\t2'b10: if (in == 1'b0) next_state = 2'b11; else next_state = 2'b01;\n\tendcase\nend\n\nalways_comb begin\n\tcase (current_state)\n\t\t2'b00: out = 1'b0;\n\t\t2'b01: out = 1'b0;\n\t\t2'b11: out = 1'b0;\n\t\t2'b10: out = 1'b1;\n\t\tdefault: out = 1'b0;\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "assign out[7:0] = in[24:16];\nassign out[15:8] = in[8:0];\nassign out[23:16] = in[31:23];\nassign out[31:24] = in[15:7]; \n\nendmodule", "result": "failed: 109 out of 110 samples.", "passed": false}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "\nalways_ff @(posedge clk) begin\n\tif (r)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\n\t\n\tassign z = (x ^ y) & x;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse if (ena) begin\n\t\tcase (amount)\n\t\t\t2'b00: q <= {q[62:0], q[63]};\n\t\t\t2'b01: q <= {q[55:0], 8'b0};\n\t\t\t2'b10: q <= {(q[63] ? 8'hFF : 8'h0), q[63:8]};\n\t\t\t2'b11: q <= {(q[63] ? 8'hFF : 8'h0), q[55:8]};\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: 3280 out of 4041 samples.", "passed": false}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn)\n\tif (!aresetn)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\n\nalways @(*) begin\n\tcase(state)\n\t\tS0: if (x) next_state = S1; else next_state = S0;\n\t\tS1: if (x) next_state = S0; else next_state = S2;\n\t\tS2: if (x) next_state = S1; else next_state = S0;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(state)\n\t\tS0: z = 0;\n\t\tS1: z = 0;\n\t\tS2: z = 1;\n\tdefault: z = 0;\n\tendcase\nend\n\nendmodule", "result": "failed: 40 out of 440 samples.", "passed": false}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b011;\nparameter E = 3'b100;\nparameter F = 3'b101;\n\nalways @(posedge clk or posedge reset)\n\tif (reset)\n\t\tstate <= A;\n\telse \n\t\tstate <= next_state;\n\nalways @* begin\n\tcase(state)\n\t\tA: if(w == 0) next_state = B; else next_state = A;\n\t\tB: if(w == 0) next_state = C; else next_state = D;\n\t\tC: if(w == 0) next_state = E; else next_state = D;\n\t\tD: if(w == 0) next_state = F; else next_state = A;\n\t\tE: if(w == 1) next_state = E; else next_state = D;\n\t\tF: if(w == 1) next_state = C; else next_state = D;\n\tendcase\nend\n\nassign z = (state == E || state == F);\n\nendmodule", "result": "failed: 10 out of 200 samples.", "passed": false}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] byte1, byte2, byte3;\n\nalways_ff @(posedge clk or posedge reset)\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse case(state)\n\t\t3'b000: if (in[3]) state <= 3'b001; else state <= 3'b000;\n\t\t3'b001: begin byte1 <= in; state <= 3'b010; end\n\t\t3'b010: begin byte2 <= in; state <= 3'b011; end\n\t\t3'b011: begin byte3 <= in; state <= 3'b100; done <= 1'b1; end\n\t\t3'b100: begin done <= 1'b0; state <= 3'b000; end\n\tendcase\n\nassign out_bytes = {byte3, byte2, byte1};\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = (y == 6'b000001) ? w : // State A to B\n            (y == 6'b000100) ? w : // State C to D\n            (y == 6'b010000) ? 1'b1 : // State E to E\n            (y == 6'b100000) ? 1'b0 : // State F to D\n            1'b0; // Default to 0 for other states\n\nassign Y3 = (y == 6'b000001) ? 1'b0 : // State A to A\n            (y == 6'b000010) ? w : // State B to D or C\n            (y == 6'b001000) ? 1'b1 : // State D to A\n            (y == 6'b010000) ? 1'b1 : // State E to D\n            (y == 6'b100000) ? 1'b0 : // State F to C\n            1'b0; // Default to 0 for other states\n\nendmodule", "result": "failed: 389 out of 600 samples.", "passed": false}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "assign outv = vec;\nassign o2 = vec[2];\nassign o1 = vec[1];\nassign o0 = vec[0];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case ({c,d,a,b})\n        4'b0000: out <= 1'b0;\n        4'b0001: out <= 1'b1;\n        4'b0011: out <= 1'b0;\n        4'b0010: out <= 1'b1;\n        4'b0100: out <= 1'b1;\n        4'b0101: out <= 1'b0;\n        4'b0111: out <= 1'b1;\n        4'b0110: out <= 1'b0;\n        4'b1100: out <= 1'b0;\n        4'b1101: out <= 1'b1;\n        4'b1111: out <= 1'b0;\n        4'b1110: out <= 1'b1;\n        4'b1000: out <= 1'b1;\n        4'b1001: out <= 1'b0;\n        4'b1011: out <= 1'b1;\n        4'b1010: out <= 1'b0;\n    endcase\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "assign out_hi = in[15:8];\nassign out_lo = in[7:0];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a | b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @(*) begin\n\tout_always_comb = a ^ b;\nend\n\nalways @(posedge clk) begin\n\tout_always_ff <= a ^ b;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "assign Y2 = ~y[1] & ~y[6] & w | y[1] & ~y[6] & ~w | y[5] & ~w;\nassign Y4 = ~y[1] & ~y[5] & w | y[3] & ~w | y[5] & w;\n\nendmodule", "result": "failed: 308 out of 600 samples.", "passed": false}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "\n\t\n\talways @(*) begin\n\t\tcase (sel)\n\t\t\t8'b00000000: out <= in[0];\n\t\t\t8'b00000001: out <= in[1];\n\t\t\t8'b00000010: out <= in[2];\n\t\t\t8'b00000011: out <= in[3];\n\t\t\t8'b00000100: out <= in[4];\n\t\t\t8'b00000101: out <= in[5];\n\t\t\t8'b00000110: out <= in[6];\n\t\t\t8'b00000111: out <= in[7];\n\t\t\t8'b00001000: out <= in[8];\n\t\t\t8'b00001001: out <= in[9];\n\t\t\t8'b00001010: out <= in[10];\n\t\t\t8'b00001011: out <= in[11];\n\t\t\t8'b00001100: out <= in[12];\n\t\t\t8'b00001101: out <= in[13];\n\t\t\t8'b00001110: out <= in[14];\n\t\t\t8'b00001111: out <= in[15];\n\t\t\t// Continue this pattern up to 8'b11111111 for in[255]\n\t\t\tdefault: out <= 1'b0; // Default case, not strictly necessary but good practice\n\t\tendcase\n\tend\n\t\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tif (L)\n\t\tQ <= R;\n\telse if (E)\n\t\tQ <= {w, Q[Q'$left-1:0]};\n\telse\n\t\tQ <= Q;\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "logic q1, q2, q3, q1_n, q2_n, q3_n;\n\nassign q1_n = ~q1;\nassign q2_n = ~q2;\nassign q3_n = ~q3;\n\nalways @(posedge clk) begin\n\tq1 <= x ^ q1;\n\tq2 <= x & q2_n;\n\tq3 <= x | q2_n;\nend\n\nassign z = ~(q1 ^ q2 ^ q3);\n\nendmodule", "result": "failed: 118 out of 118 samples.", "passed": false}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & (b | c | d)) | (~a & d);\nendmodule", "result": "failed: 35 out of 121 samples.", "passed": false}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        for (int i = 0; i < 512; i++) begin\n            case ({data[i-1], data[i], data[(i+1)%512]})\n                3'b111: q[i] <= 1'b0;\n                3'b110: q[i] <= 1'b1;\n                3'b101: q[i] <= 1'b1;\n                3'b100: q[i] <= 1'b0;\n                3'b011: q[i] <= 1'b1;\n                3'b010: q[i] <= 1'b1;\n                3'b001: q[i] <= 1'b1;\n                3'b000: q[i] <= 1'b0;\n            endcase\n        end\nend\n\nendmodule", "result": "failed: 6220 out of 6283 samples.", "passed": false}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @ (posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (!in) next_state = 2'b00; else next_state = 2'b01;\n\t\t2'b01: if (!in) next_state = 2'b10; else next_state = 2'b01;\n\t\t2'b10: if (!in) next_state = 2'b00; else next_state = 2'b11;\n\t\t2'b11: if (!in) next_state = 2'b10; else next_state = 2'b01;\n\tendcase\nend\n\nassign out = (state == 2'b11) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 3 out of 230 samples.", "passed": false}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @(*) begin\n    case (c)\n        0: q = b;\n        1: q = e;\n        2: q = a;\n        3: q = d;\n        default: q = 4'b1111; // Assuming invalid inputs result in an error state\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "always @(sel or a or b)\nbegin\n    if (!sel)\n        out <= a;\n    else\n        out <= b;\nend\n\nendmodule", "result": "failed: 111 out of 114 samples.", "passed": false}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "always @(posedge clk) begin\n    if (L) begin\n        Q <= r_in;\n    end else begin\n        Q <= q_in[1] ^ q_in[2];\n    end\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "\nalways @(posedge clk) begin\n\tif (reset)\n\t\tout <= 32'b0;\n\telse\n\t\tfor (int i = 0; i < 32; i = i + 1) begin\n\t\t\tif (in[i] == 1'b0 && in[i] != out[i])\n\t\t\t\tout[i] <= 1'b1;\n\t\t\telse if (in[i] == 1'b1)\n\t\t\t\tout[i] <= 1'b0;\n\t\tend\nend\nendmodule", "result": "failed: 227 out of 266 samples.", "passed": false}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n    q[0] <= d[0];\n    q[1] <= d[1];\n    q[2] <= d[2];\n    q[3] <= d[3];\n    q[4] <= d[4];\n    q[5] <= d[5];\n    q[6] <= d[6];\n    q[7] <= d[7];\nend\n\nendmodule", "result": "failed: 1 out of 41 samples.", "passed": false}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "\n\twire [8:0] sum;\n\tassign {overflow, s} = a + b;\nendmodule", "result": "failed: 55 out of 116 samples.", "passed": false}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = &state; // Always false as B3_next is specific to B3 state transition\nassign S_next = ~|state & (state[9] | state[8] | state[7] | state[6] | state[5] | state[4] | state[3] | state[2] | state[1]) & ~d;\nassign S1_next = state[9] & d;\nassign Count_next = state[1] & state[0];\nassign Wait_next = state[0] & done_counting;\nassign done = state[0] & done_counting & ack;\nassign counting = state[0] & ~done_counting;\nassign shift_ena = |{state[8], state[7], state[6], state[5]};\n\nendmodule", "result": "failed: 3165 out of 3303 samples.", "passed": false}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "\n    always_ff @(posedge clk or posedge areset)\n    begin\n        if (areset)\n            state <= 2'b01;\n        else if (train_valid)\n        begin\n            if (train_taken)\n                state <= (state == 2'b11) ? 2'b11 : state + 1;\n            else\n                state <= (state == 2'b00) ? 2'b00 : state - 1;\n        end\n    end\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "\nalways @* begin\n    case (in)\n        8'b00000001: pos = 3'd0;\n        8'b00000010: pos = 3'd1;\n        8'b00000100: pos = 3'd2;\n        8'b00001000: pos = 3'd3;\n        8'b00010000: pos = 3'd4;\n        8'b00100000: pos = 3'd5;\n        8'b01000000: pos = 3'd6;\n        8'b10000000: pos = 3'd7;\n        default: pos = 3'd0; // If all bits are 0, return 0\n    endcase\nend\nendmodule", "result": "failed: 147 out of 346 samples.", "passed": false}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    unique case (scancode)\n        16'hE06B: {left, down, right, up} = 4'b0001; // left arrow\n        16'hE072: {left, down, right, up} = 4'b0010; // down arrow\n        16'hE074: {left, down, right, up} = 4'b0100; // right arrow\n        16'hE075: {left, down, right, up} = 4'b1000; // up arrow\n        default: {left, down, right, up} = 4'b0000; // none\n    endcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "\nwire c_out;\n\nassign sum[4] = x[3]&y[3] | (x[3]^y[3])&c_out[2];\nfull_adder fa0 (.a(x[0]), .b(y[0]), .cin(1'b0), .sum(sum[0]), .cout(c_out[0]));\nfull_adder fa1 (.a(x[1]), .b(y[1]), .cin(c_out[0]), .sum(sum[1]), .cout(c_out[1]));\nfull_adder fa2 (.a(x[2]), .b(y[2]), .cin(c_out[1]), .sum(sum[2]), .cout(c_out[2]));\nfull_adder fa3 (.a(x[3]), .b(y[3]), .cin(c_out[2]), .sum(sum[3]), .cout(c_out[3]));\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "\n    logic [31:0] next_predict_history;\n\n    always_ff @(posedge clk, posedge areset)\n        if (areset)\n            predict_history <= 32'b0;\n        else begin\n            if (train_mispredicted)\n                predict_history <= {train_history, train_taken};\n            else if (predict_valid)\n                predict_history <= {predict_history[30:0], predict_taken};\n        end\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "\n\twire and1_out;\n\twire and2_out;\n\n\tand #1 and_gate1 (.A(a), .B(b), .Y(and1_out));\n\tand #1 and_gate2 (.A(c), .B(d), .Y(and2_out));\n\n\tor #1 or_gate1 (.A(and1_out), .B(and2_out), .Y(out));\n\n\tnot #1 not_gate1 (.A(out), .Y(out_n));\n\t\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk) begin\n    q <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] Q;\nalways @(posedge clk) begin\n\tif(enable)\n\t\tQ <= {S,Q[7:1]};\nend\n\nwire [2:0] addr = {A,B,C};\ngenvar i;\ngenerate\n\tfor(i=0; i<8; i=i+1) begin : genmux\n\t\twire sel = (addr == i);\n\t\tassign Z = (sel)? Q[i] : 1'bz;\n\tend\nendgenerate\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "assign heater = mode & too_cold;\nassign aircon = ~mode & too_hot;\nassign fan = mode & too_cold | ~mode & too_hot | fan_on;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "assign out_sop = (a & ~b & ~c & ~d) | (~a & b & ~c & d) | (~a & ~b & ~c & ~d);\nassign out_pos = ~(a | b | ~c | d) & ~(a | ~b | c | ~d) & ~(~a | b | c | ~d);\n\nendmodule", "result": "failed: 49 out of 107 samples.", "passed": false}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 32'h1;\n\telse\n\t\tq <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]};\nend\n\nendmodule", "result": "failed: 400356 out of 400411 samples.", "passed": false}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & b) | (~a & c & d);\n\nendmodule", "result": "failed: 55 out of 121 samples.", "passed": false}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "assign p1y = ~(p1a & p1b & p1c & p1d);\nassign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "reg [7:0] count;\nalways @(*) begin\n\tcount = 0;\n\tfor (int i = 0; i < 255; i = i + 1) begin\n\t\tif (in[i]) count = count + 1;\n\tend\n\tout = count;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "assign out_both = {1'b0, in[3:1] & in[2:0]};\nassign out_any = {in[3] | in[2], in[2] | in[1], in[1] | in[0], in[0]};\nassign out_different = {in[3] ^ in[0], in[0] ^ in[1], in[1] ^ in[2], in[2] ^ in[3]};\nendmodule", "result": "failed: 181 out of 213 samples.", "passed": false}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*) begin\n    case (a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tq <= 4'b0;\n\t\telse if (slowena)\n\t\t\tq <= q + 1;\n\t\telse if (q == 4'b1001) // When q reaches 9 (binary 1001), reset to 0\n\t\t\tq <= 4'b0;\n\tend\nendmodule", "result": "failed: 162 out of 499 samples.", "passed": false}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n\t\n\tassign out = in1 & ~in2;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b1; // State B\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tnext_state = (in == 1'b0) ? 2'b01 : 2'b10;\n\t\t\tout = 1'b1;\n\t\tend\n\t\t2'b01: begin // State A\n\t\t\tnext_state = (in == 1'b0) ? 2'b10 : 2'b01;\n\t\t\tout = 1'b0;\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "\n\treg q_temp;\n\n\talways @(posedge clk)\n\tbegin\n\t\tq_temp <= d;\n\tend\n\n\talways @(negedge clk)\n\tbegin\n\t\tq <= q_temp;\n\tend\nendmodule", "result": "failed: 113 out of 224 samples.", "passed": false}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a ^ b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "wire outA1, outB1, outA2, outB2, orOut, andOut;\n\nmodule A(input x, input y, output z);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule B(input x, input y, output z);\n    assign z = 1'b1; // Based on the provided waveform, z is always 1 for these inputs\nendmodule\n\nA a1(x, y, outA1);\nB b1(x, y, outB1);\nA a2(x, y, outA2);\nB b2(x, y, outB2);\n\nassign orOut = outA1 | outB1;\nassign andOut = outA2 & outB2;\nassign z = orOut ^ andOut;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else if (ena == 2'b01) // Rotate right\n        q <= {q[0], q[99:1]};\n    else if (ena == 2'b10) // Rotate left\n        q <= {q[98:0], q[99]};\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tq <= 10'b0;\n\t\telse if (q == 10'd999)\n\t\t\tq <= 10'b0;\n\t\telse\n\t\t\tq <= q + 1;\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "assign out = ~in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "assign next_state = (state == 10'b0000000001) ? (in ? 10'b0000000010 : 10'b0000000001) :\n                    (state == 10'b0000000010) ? (in ? 10'b0000000011 : 10'b0000000001) :\n                    (state == 10'b0000000100) ? (in ? 10'b0000000101 : 10'b0000000001) :\n                    (state == 10'b0000001000) ? (in ? 10'b0000010000 : 10'b0000000001) :\n                    (state == 10'b0001000000) ? (in ? 10'b0010000000 : 10'b0000000001) :\n                    (state == 10'b0100000000) ? (in ? 10'b1000000000 : 10'b0000000001) :\n                    (state == 10'b1000000000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                    (state == 10'b00000000100) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                    (state == 10'b00000001000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                    (state == 10'b00000100000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                    (state == 10'b00100000000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                    (state == 10'b10000000000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                    10'b0000000001;\n\nassign out1 = (state == 10'b1000000000) | (state == 10'b10000000000);\nassign out2 = (state == 10'b00000000001000);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tcase ({j,k})\n\t\t2'b00: Q <= Q; // No change\n\t\t2'b01: Q <= 0;\n\t\t2'b10: Q <= 1;\n\t\t2'b11: Q <= ~Q; // Toggle\n\tendcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "\n\t\n\tassign out = {in[2]&in[1]|in[2]&in[0]|in[1]&in[0], in[2]^in[1]^in[0]};\n\t\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "\n\tassign out[24] = ~a ^ a;\n\tassign out[23] = ~a ^ b;\n\tassign out[22] = ~a ^ c;\n\tassign out[21] = ~a ^ d;\n\tassign out[20] = ~a ^ e;\n\tassign out[19] = ~b ^ a;\n\tassign out[18] = ~b ^ b;\n\tassign out[17] = ~b ^ c;\n\tassign out[16] = ~b ^ d;\n\tassign out[15] = ~b ^ e;\n\tassign out[14] = ~c ^ a;\n\tassign out[13] = ~c ^ b;\n\tassign out[12] = ~c ^ c;\n\tassign out[11] = ~c ^ d;\n\tassign out[10] = ~c ^ e;\n\tassign out[9] = ~d ^ a;\n\tassign out[8] = ~d ^ b;\n\tassign out[7] = ~d ^ c;\n\tassign out[6] = ~d ^ d;\n\tassign out[5] = ~d ^ e;\n\tassign out[4] = ~e ^ a;\n\tassign out[3] = ~e ^ b;\n\tassign out[2] = ~e ^ c;\n\tassign out[1] = ~e ^ d;\n\tassign out[0] = ~e ^ e;\nendmodule", "result": "passed", "passed": true}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "logic walk_left_reg, walk_right_reg;\n\nalways_ff @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\twalk_left_reg <= 1'b1;\n\telse if (bump_left & ~bump_right)\n\t\twalk_left_reg <= 1'b0;\n\telse if (~bump_left & bump_right)\n\t\twalk_left_reg <= 1'b1;\n\telse if (bump_left & bump_right)\n\t\twalk_left_reg <= 1'b1;\nend\n\nassign walk_right = ~walk_left_reg;\nassign walk_left = walk_left_reg;\n\nendmodule", "result": "failed: 17 out of 229 samples.", "passed": false}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "assign q = a & b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "\n    wire and1_out, and2_out, and3_out, and4_out;\n    \n    assign and1_out = p1a & p1b & p1c;\n    assign and2_out = p1d & p1e & p1f;\n    assign and3_out = p2a & p2b;\n    assign and4_out = p2c & p2d;\n    \n    assign p1y = and1_out | and2_out;\n    assign p2y = and3_out | and4_out;\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "reg [2:0] next_state;\nalways @(posedge clk) begin\n    case (y)\n        3'b000: if(x == 0) next_state <= 3'b000; else next_state <= 3'b001;\n        3'b001: if(x == 0) next_state <= 3'b001; else next_state <= 3'b100;\n        3'b010: if(x == 0) next_state <= 3'b010; else next_state <= 3'b001;\n        3'b011: if(x == 0) next_state <= 3'b001; else next_state <= 3'b010;\n        3'b100: if(x == 0) next_state <= 3'b011; else next_state <= 3'b100;\n    endcase\n    Y0 <= next_state[0];\n    case (next_state)\n        3'b001, 3'b100: z <= 1;\n        default: z <= 0;\n    endcase\nend\nendmodule", "result": "failed: 87 out of 200 samples.", "passed": false}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n\t\n\tassign out = ~(in1 | in2);\n\t\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or posedge ar) begin\n\tif (ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @(*) begin\n    case (sel)\n        3'b000: out <= data0;\n        3'b001: out <= data1;\n        3'b010: out <= data2;\n        3'b011: out <= data3;\n        3'b100: out <= data4;\n        3'b101: out <= data5;\n        default: out <= 4'b0;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\nreg tc_reg;\n\nalways @(posedge clk) begin\n    if (load)\n        counter <= data;\n    else if (counter > 0)\n        counter <= counter - 1;\n    \n    if (counter == 0)\n        tc_reg <= 1;\n    else\n        tc_reg <= 0;\nend\n\nassign tc = tc_reg;\n\nendmodule", "result": "failed: 248 out of 7127 samples.", "passed": false}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\n\t\n\ttypedef enum logic [1:0] {S0,S1,S2,S3} state_type;\n\tstate_type current_state, next_state;\n\t\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tcurrent_state <= S0;\n\t\telse \n\t\t\tcurrent_state <= next_state;\n\tend\n\t\n\talways @(*) begin\n\t\tcase(current_state)\n\t\t\tS0: if(data == 1) next_state = S1; else next_state = S0;\n\t\t\tS1: if(data == 1) next_state = S2; else next_state = S0;\n\t\t\tS2: if(data == 0) next_state = S3; else next_state = S0;\n\t\t\tS3: if(data == 1) next_state = S3; else next_state = S0;\n\t\t\tdefault: next_state = S0;\n\t\tendcase\n\tend\n\t\n\talways @(*) begin\n\t\tcase(current_state)\n\t\t\tS3: start_shifting = 1;\n\t\t\tdefault: start_shifting = 0;\n\t\tendcase\n\tend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "\n\treg [7:0] in_delayed;\n\n\talways @(posedge clk) begin\n\t\tin_delayed <= in;\n\tend\n\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\t\tif (~in_delayed[i] & in[i])\n\t\t\t\tanyedge[i] <= 1'b1;\n\t\t\telse\n\t\t\t\tanyedge[i] <= 1'b0;\n\t\tend\n\tend\nendmodule", "result": "failed: 187 out of 228 samples.", "passed": false}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0001;\n\telse if (q == 4'b1010) // 10 in binary\n\t\tq <= 4'b0001; // reset to 1\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n\tif (a == 1'b0) begin\n\t\tcase (q)\n\t\t\t4'd4: q <= 4'd5;\n\t\t\t4'd5: q <= 4'd6;\n\t\t\t4'd6: q <= 4'd0;\n\t\t\tdefault: q <= 4'd1;\n\t\tendcase\n\tend else begin\n\t\tq <= 4'd4;\n\tend\nend\n\nendmodule", "result": "failed: 150 out of 245 samples.", "passed": false}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "always @(posedge clk) begin\n    if (reset)\n        q <= 5'b00001;\n    else\n        q[4:1] <= q[3:0];\n    q[0] <= q[4] ^ q[2];\nend\n\nendmodule", "result": "failed: 4442 out of 4443 samples.", "passed": false}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "always @(*) begin\n    case (do_sub)\n      0: out = a + b;\n      1: out = a - b;\n    endcase\n\n    result_is_zero = (out == 8'b0);\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "\n\tassign f = ~(x[4]^x[3]) & (x[4]|x[2]);\nendmodule", "result": "failed: 20 out of 100 samples.", "passed": false}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case(code)\n        8'h45: begin out = 4'b0000; valid = 1; end\n        8'h16: begin out = 4'b0001; valid = 1; end\n        8'h1e: begin out = 4'b0010; valid = 1; end\n        8'h26: begin out = 4'b0011; valid = 1; end\n        8'h25: begin out = 4'b0100; valid = 1; end\n        8'h2e: begin out = 4'b0101; valid = 1; end\n        8'h36: begin out = 4'b0110; valid = 1; end\n        8'h3d: begin out = 4'b0111; valid = 1; end\n        8'h3e: begin out = 4'b1000; valid = 1; end\n        8'h46: begin out = 4'b1001; valid = 1; end\n        default: begin out = 4'b0000; valid = 0; end\n    endcase\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "\n\tassign out[0] = in[7];\n\tassign out[1] = in[6];\n\tassign out[2] = in[5];\n\tassign out[3] = in[4];\n\tassign out[4] = in[3];\n\tassign out[5] = in[2];\n\tassign out[6] = in[1];\n\tassign out[7] = in[0];\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @(*) begin\n    case ({c,b,a})\n        3'b000: out = 0;\n        3'b001: out = 0;\n        3'b010: out = 0;\n        3'b011: out = 0;\n        3'b100: out = 1;\n        3'b101: out = 1;\n        3'b110: out = 1;\n        3'b111: out = 1;\n    endcase\nend\nendmodule", "result": "failed: 58 out of 232 samples.", "passed": false}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (shift_ena)\n\t\tq <= {data, q[3:1]};\n\telse if (count_ena)\n\t\tq <= q - 1;\nend\n\nendmodule", "result": "failed: 1886 out of 2071 samples.", "passed": false}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "reg [1:0] state;\nreg [1:0] next_state;\n\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n\tif(reset)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase(state)\n\t\tS0: if(reset) next_state = S1; else next_state = S0;\n\t\tS1: next_state = S2;\n\t\tS2: next_state = S3;\n\t\tS3: next_state = S0;\n\tendcase\nend\n\nassign shift_ena = (state == S1 || state == S2 || state == S3);\n\nendmodule", "result": "failed: 10 out of 200 samples.", "passed": false}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2)\n\t\tout_always = b;\n\telse\n\t\tout_always = a;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "\nassign out = b | (c & ~a);\nendmodule", "result": "failed: 61 out of 219 samples.", "passed": false}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "logic [2:0] state, next_state;\n\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b100;\n\nalways_ff @(posedge clk or negedge resetn)\n\tif (!resetn)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\tA: if (&~r) next_state = A; \n\t\t   else if (r[1]) next_state = B;\n\t\t   else if (r[2]) next_state = C;\n\t\t   else if (r[3]) next_state = D;\n\t\t   else next_state = A;\n\t\tB: if (r[1]) next_state = B;\n\t\t   else next_state = A;\n\t\tC: if (r[2]) next_state = C;\n\t\t   else next_state = A;\n\t\tD: next_state = A;\n\tendcase\nend\n\nassign g = {r[1]?1'b1:1'b0, r[2]?1'b1:1'b0, r[3]?1'b0:1'b0};\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse if (q == 4'b1001) // 9 in binary\n\t\tq <= 4'b0; // Reset to 0\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] byte_count;\n\nenum logic [2:0] {\n    SEARCH_BYTE,\n    BYTE_1,\n    BYTE_2,\n    BYTE_3\n} current_state, next_state;\n\nalways_ff @(posedge clk) begin\n    if (reset)\n        current_state <= SEARCH_BYTE;\n    else\n        current_state <= next_state;\nend\n\nalways_comb begin\n    case (current_state)\n        SEARCH_BYTE: begin\n            if (in[3])\n                next_state = BYTE_1;\n            else\n                next_state = SEARCH_BYTE;\n        end\n        BYTE_1: begin\n            next_state = BYTE_2;\n        end\n        BYTE_2: begin\n            next_state = BYTE_3;\n        end\n        BYTE_3: begin\n            next_state = SEARCH_BYTE;\n        end\n    endcase\nend\n\nalways_ff @(posedge clk) begin\n    if (reset)\n        byte_count <= 0;\n    else\n        case (current_state)\n            BYTE_3: byte_count <= byte_count + 1;\n            default: byte_count <= 0;\n        endcase\nend\n\nassign done = (byte_count == 1);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "assign out = (sel == 1'b0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b000: if(x == 1'b0) next_state = 3'b000; else next_state = 3'b001;\n\t\t3'b001: if(x == 1'b0) next_state = 3'b001; else next_state = 3'b100;\n\t\t3'b010: if(x == 1'b0) next_state = 3'b010; else next_state = 3'b001;\n\t\t3'b011: if(x == 1'b0) next_state = 3'b001; else next_state = 3'b010;\n\t\t3'b100: if(x == 1'b0) next_state = 3'b011; else next_state = 3'b100;\n\t\tdefault: next_state = 3'b000;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b001, 3'b100: z = 1'b1;\n\t\tdefault: z = 1'b0;\n\tendcase\nend\n\nendmodule", "result": "failed: 493 out of 1006 samples.", "passed": false}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "logic [1:0] state;\nlogic [2:0] x_pattern;\n\nalways_ff @(posedge clk or negedge resetn) begin\n\tif (!resetn) begin\n\t\tstate <= 2'b00;\n\t\tx_pattern <= 3'b000;\n\t\tf <= 0;\n\t\tg <= 0;\n\tend else begin\n\t\tcase(state)\n\t\t\t2'b00: begin // State A\n\t\t\t\tf <= 0;\n\t\t\t\tg <= 0;\n\t\t\t\tif (!resetn) begin\n\t\t\t\t\tstate <= 2'b00;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= 2'b01; // Move to State B\n\t\t\t\t\tf <= 1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b01: begin // State B\n\t\t\t\tf <= 0;\n\t\t\t\tif (x_pattern == 3'b101) begin\n\t\t\t\t\tstate <= 2'b10; // Move to State C\n\t\t\t\t\tg <= 1;\n\t\t\t\tend else begin\n\t\t\t\t\tx_pattern <= {x_pattern[1:0], x};\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b10: begin // State C\n\t\t\t\tif (y) begin\n\t\t\t\t\tstate <= 2'b11; // Move to State D\n\t\t\t\t\tg <= 1;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= 2'b10;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b11: begin // State D\n\t\t\t\tg <= 1;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge ~clk) begin\n\tif (reset)\n\t\tq <= 8'b00110100; // Binary representation of 0x34\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "assign parity = ^in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        2'b00: begin // State A\n            if (in == 1'b0) \n                next_state = 2'b00; // A\n            else \n                next_state = 2'b01; // B\n            out = 1'b0;\n        end\n        2'b01: begin // State B\n            if (in == 1'b0) \n                next_state = 2'b10; // C\n            else \n                next_state = 2'b01; // B\n            out = 1'b0;\n        end\n        2'b10: begin // State C\n            if (in == 1'b0) \n                next_state = 2'b00; // A\n            else \n                next_state = 2'b11; // D\n            out = 1'b0;\n        end\n        2'b11: begin // State D\n            if (in == 1'b0) \n                next_state = 2'b10; // C\n            else \n                next_state = 2'b01; // B\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00;\n            out = 1'b0;\n        end\n    endcase\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "reg z;\nalways @(x or y) begin\n    if (x & y)\n        z <= 1'b1;\n    else if (x)\n        z <= 1'b0;\n    else if (y)\n        z <= 1'b0;\n    else\n        z <= 1'b1;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "logic [2:0] state, next_state;\n\n// State encoding: A=000, B=001, C=010, D=011, E=100, F=101\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= 3'b000; // State A\n\telse\n\t\tstate <= next_state;\n\n// Next state logic\nalways_comb begin\n\tcase(state)\n\t\t3'b000: if (w) next_state = 3'b001; // A -> B\n\t\t         else next_state = 3'b000; // A -> A\n\t\t3'b001: if (w) next_state = 3'b010; // B -> C\n\t\t         else next_state = 3'b011; // B -> D\n\t\t3'b010: if (w) next_state = 3'b100; // C -> E\n\t\t         else next_state = 3'b011; // C -> D\n\t\t3'b011: if (w) next_state = 3'b101; // D -> F\n\t\t         else next_state = 3'b000; // D -> A\n\t\t3'b100: if (w) next_state = 3'b100; // E -> E\n\t\t         else next_state = 3'b011; // E -> D\n\t\t3'b101: if (w) next_state = 3'b010; // F -> C\n\t\t         else next_state = 3'b011; // F -> D\n\tendcase\nend\n\n// Output logic\nassign z = (state == 3'b100) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 45 out of 400 samples.", "passed": false}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or negedge resetn) begin\n\tif (!resetn)\n\t\tq <= 16'b0;\n\telse begin\n\t\tif (byteena == 2'b11) begin\n\t\t\tq <= d;\n\t\tend else if (byteena[1]) begin\n\t\t\tq[15:8] <= d[15:8];\n\t\tend else if (byteena[0]) begin\n\t\t\tq[7:0] <= d[7:0];\n\t\tend\n\tend\nend\n\nendmodule", "result": "failed: 1 out of 443 samples.", "passed": false}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\t\tif (~in[i] & in[i+8]) // Detecting rising edge\n\t\t\t\tpedge[i] <= 1'b1;\n\t\t\telse\n\t\t\t\tpedge[i] <= 1'b0;\n\t\tend\n\tend\n\t\nendmodule", "result": "failed: 182 out of 227 samples.", "passed": false}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "always @(posedge clock) begin\n\tif (a == 1'b1)\n\t\tp <= ~p;\n\tq <= p;\nend\n\nendmodule", "result": "failed: 235 out of 240 samples.", "passed": false}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        for (int i = 1; i < 511; i = i + 1) begin\n            q[i] <= q[i-1] ^ q[i+1];\n        end\n    q[0] <= q[1];\n    q[511] <= q[510];\nend\n\nendmodule", "result": "failed: 3070 out of 7121 samples.", "passed": false}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "\n\t\n\tassign z = (A == B) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "assign out_both = in[99:1] & in[98:0];\nassign out_any = {in[99], in[99:1]} | {in[0], in[98:0]};\nassign out_different = in[99:0] ^ {in[0], in[98:0]};\nendmodule", "result": "failed: 201 out of 201 samples.", "passed": false}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "\nalways @(d or ena) begin\n\tif (ena)\n\t\tq <= d;\n\telse\n\t\tq <= q;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "\n\t\n\tassign out = in[(sel<<3)+3:(sel<<3)];\n\t\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "always_comb begin\n    case (sel)\n        4'b0000: out = a;\n        4'b0001: out = b;\n        4'b0010: out = c;\n        4'b0011: out = d;\n        4'b0100: out = e;\n        4'b0101: out = f;\n        4'b0110: out = g;\n        4'b0111: out = h;\n        4'b1000: out = i;\n        default: out = 16'b1;\n    endcase\nend\nendmodule", "result": "failed: 101 out of 220 samples.", "passed": false}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "assign out_or_bitwise = a | b;\nassign out_or_logical = a != 3'b0 || b != 3'b0;\nassign out_not[5:3] = ~b;\nassign out_not[2:0] = ~a;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "assign out = (state == 4'b1000) ? 1 : 0;\nalways @(*) begin\n    case(state)\n        4'b0001: next_state = (in == 1'b0) ? 4'b0001 : 4'b0010; // State A\n        4'b0010: next_state = (in == 1'b0) ? 4'b0100 : 4'b0010; // State B\n        4'b0100: next_state = (in == 1'b0) ? 4'b0001 : 4'b1000; // State C\n        4'b1000: next_state = (in == 1'b0) ? 4'b0100 : 4'b0010; // State D\n        default: next_state = 4'b0001; // Default state A\n    endcase\nend\nendmodule", "result": "failed: 284 out of 600 samples.", "passed": false}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "\n\t\n\talways @(*) begin\n\t\tif(a <= b && a <= c && a <= d)\n\t\t\tmin = a;\n\t\telse if(b <= a && b <= c && b <= d)\n\t\t\tmin = b;\n\t\telse if(c <= a && c <= b && c <= d)\n\t\t\tmin = c;\n\t\telse\n\t\t\tmin = d;\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "assign out_and = a & b;\nassign out_or = a | b;\nassign out_xor = a ^ b;\nassign out_nand = ~(a & b);\nassign out_nor = ~(a | b);\nassign out_xnor = ~(a ^ b);\nassign out_anotb = a & ~b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (a & ~b & ~c & d) | (~a & b & ~c & d) | (~a & ~b & c & ~d) | (a & b & ~c & ~d) | (~a & b & c & ~d) | (a & ~b & c & d) | (a & b & c & d);\nendmodule", "result": "failed: 93 out of 232 samples.", "passed": false}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state;\nlocalparam A = 2'b00, B = 2'b01, C = 2'b10;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= A;\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\tA: if (s) state <= B; else state <= A;\n\t\t\tB: state <= C;\n\t\t\tC: state <= B;\n\t\t\tdefault: state <= A;\n\t\tendcase\n\tend\nend\n\nreg [2:0] count;\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tcount <= 3'b000;\n\telse\n\t\tif (state == B)\n\t\t\tcount <= {count[1:0], w};\nend\n\nassign z = (count == 3'b101 || count == 3'b011);\n\nendmodule", "result": "failed: 382 out of 1414 samples.", "passed": false}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n\tassign out = { {24{in[7]}}, in };\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "reg [3:0] shift_reg;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (!resetn) begin\n\t\tshift_reg <= 4'b0;\n\tend else begin\n\t\tshift_reg <= {in, shift_reg[3:1]};\n\tend\nend\n\nassign out = shift_reg[3];\n\nendmodule", "result": "failed: 131 out of 299 samples.", "passed": false}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @(*) begin\n    case (in)\n        4'b0001: pos = 2'd0;\n        4'b0010: pos = 2'd1;\n        4'b0100: pos = 2'd2;\n        4'b1000: pos = 2'd3;\n        default: pos = 2'd0; // Ensures output is 0 if all inputs are 0\n    endcase\nend\nendmodule", "result": "failed: 20 out of 94 samples.", "passed": false}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk or posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00; // OFF\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b00: if (j) next_state = 2'b01; // ON else next_state = 2'b00; // OFF\n\t\t2'b01: if (k) next_state = 2'b00; // OFF else next_state = 2'b01; // ON\n\tendcase\n\nassign out = (state == 2'b01); // ON\n\nendmodule", "result": "failed: 44 out of 241 samples.", "passed": false}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": "assign out = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "\n\tassign one = 1;\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "always @(*) begin\n    for (int i = 0; i < 100; i++) begin\n        out[i] = in[99-i];\n    end\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "logic q;\n\nalways_ff @(posedge clk) begin\n\tq <= in ^ out;\n\tout <= q;\nend\n\nendmodule", "result": "failed: 1 out of 100 samples.", "passed": false}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tq <= 4'b0;\n\telse if (load)\n\t\tq <= data;\n\telse if (ena)\n\t\tq <= {q[2:0], 1'b0};\nend\n\nendmodule", "result": "failed: 61 out of 427 samples.", "passed": false}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = (x2 & ~x1) | (~x3 & x1) | (x3 & x2);\n\nendmodule", "result": "failed: 6 out of 58 samples.", "passed": false}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "\n\talways @(posedge clk or posedge areset)\n\tbegin\n\t\tif (areset)\n\t\t\tq <= 8'b0;\n\t\telse\n\t\t\tq <= d;\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "assign sum = a ^ b;\nassign cout = a & b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "always @(*) begin\n    if (cpu_overheated)\n        shut_off_computer = 1;\n    else\n        shut_off_computer = 0;\nend\n\nalways @(*) begin\n    if (~arrived)\n        keep_driving = ~gas_tank_empty;\n    else\n        keep_driving = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state;\nreg [1:0] next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= OFF;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*)\nbegin\n\tcase(state)\n\t\tOFF:\n\t\t\tif (j) next_state = ON;\n\t\t\telse next_state = OFF;\n\t\tON:\n\t\t\tif (k) next_state = OFF;\n\t\t\telse next_state = ON;\n\tendcase\nend\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 21 out of 241 samples.", "passed": false}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "assign {w, x, y, z} = {a, b, c, d, e, f, 2'b11};\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & ~b & ~c & ~d) | (a & ~b & c & d) | (a & b & ~c & ~d) | (a & b & c & d);\n\nendmodule", "result": "failed: 62 out of 121 samples.", "passed": false}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= 2'b10; // Reset state B\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tnext_state = (in == 1'b0) ? 2'b01 : 2'b10;\n\t\t\tout = 1'b1;\n\t\tend\n\t\t2'b01: begin // State A\n\t\t\tnext_state = (in == 1'b0) ? 2'b10 : 2'b01;\n\t\t\tout = 1'b0;\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "\nwire p, g;\n\nassign p = a ^ b; // generate propagate signal\nassign g = a & b; // generate generate signal\n\nassign sum = p ^ cin; // calculate sum bit\nassign cout = g | (p & cin); // calculate carry out\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\n\tlogic xnor_out;\n\t\n\t// XNOR gate implementation\n\tassign xnor_out = ~(in1 ^ in2);\n\t\n\t// XOR gate implementation using xnor_out and in3\n\tassign out = xnor_out ^ in3;\n\t\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "assign mux_in[0] = 1'b1;\nassign mux_in[1] = 1'b0;\nassign mux_in[2] = (c & ~d) | (~c & d);\nassign mux_in[3] = 1'b1;\n\nendmodule", "result": "failed: 49 out of 60 samples.", "passed": false}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b00: begin\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state = 2'b00;\n\t\t\telse\n\t\t\t\tnext_state = 2'b01;\n\t\t\tz = 1'b0;\n\t\tend\n\t\t2'b01: begin\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state = 2'b01;\n\t\t\telse\n\t\t\t\tnext_state = 2'b01;\n\t\t\tz = 1'b1;\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "reg q_reg;\nwire next_state;\n\nassign state = q_reg;\n\nalways @(posedge clk) begin\n\tq_reg <= next_state;\nend\n\nassign next_state = ~(a & b) | (q_reg & ~b);\n\nendmodule", "result": "failed: 229 out of 232 samples.", "passed": false}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "\n\t\n\tassign f = (x[4]&x[3]) | (~x[4]&~x[3]&x[2]) | (x[4]&~x[3]&x[1]) | (~x[4]&x[3]&~x[1]);\n\t\nendmodule", "result": "failed: 56 out of 100 samples.", "passed": false}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "logic [4:0] count_ones;\nlogic [3:0] state;\nlogic next_state_valid;\n\nparameter S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010, S3 = 4'b0011, S4 = 4'b0100, S5 = 4'b0101, S6 = 4'b0110, S7 = 4'b0111, S8 = 4'b1000, S9 = 4'b1001, S10 = 4'b1010, S11 = 4'b1011, S12 = 4'b1100, S13 = 4'b1101, S14 = 4'b1110, S15 = 4'b1111;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state_valid ? next_state : state;\n\nalways_comb begin\n\tcase(state)\n\t\tS0: next_state_valid = 1;\n\t\t\tif (in == 1'b1)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tS1: next_state_valid = 1;\n\t\t\tif (in == 1'b1)\n\t\t\t\tnext_state = S2;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tS2: next_state_valid = 1;\n\t\t\tif (in == 1'b1)\n\t\t\t\tnext_state = S3;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tS3: next_state_valid = 1;\n\t\t\tif (in == 1'b1)\n\t\t\t\tnext_state = S4;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tS4: next_state_valid = 1;\n\t\t\tif (in == 1'b1)\n\t\t\t\tnext_state = S5;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tS5: next_state_valid = 1;\n\t\t\tif (in == 1'b1)\n\t\t\t\tnext_state = S6;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tS6: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S7;\n\t\tS7: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S8;\n\t\tS8: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S9;\n\t\tS9: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S10;\n\t\tS10: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S11;\n\t\tS11: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S12;\n\t\tS12: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S13;\n\t\tS13: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S14;\n\t\tS14: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S15;\n\t\tS15: next_state_valid = 1;\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (in == 1'b1)\n\t\t\t\tnext_state = S15;\n\tendcase\nend\n\nassign disc = (state == S6);\nassign flag = (state == S7);\nassign err = (state == S15);\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "reg [7:0] state_reg, state_next;\nreg [3:0] delay_reg, delay_next;\nreg [11:0] counter_reg, counter_next;\n\nparameter IDLE = 8'b0000_0001;\nparameter SEARCHING = 8'b0000_0010;\nparameter CAPTURE_DELAY = 8'b0000_0011;\nparameter COUNTING = 8'b0000_0100;\nparameter DONE_WAIT_ACK = 8'b0000_1000;\n\nalways @(posedge clk or posedge reset)\nbegin\n    if(reset)\n        state_reg <= IDLE;\n    else\n        state_reg <= state_next;\nend\n\nalways @(*)\nbegin\n    state_next = state_reg;\n    case(state_reg)\n        IDLE:\n            if(data == 1)\n                state_next = SEARCHING;\n        SEARCHING:\n            if({data, state_reg[7:1]} == 8'b1101)\n                state_next = CAPTURE_DELAY;\n        CAPTURE_DELAY:\n            if(state_reg[7:4] == 4'b1111)\n                state_next = COUNTING;\n            else\n                state_next = SEARCHING;\n        COUNTING:\n            if(counter_reg == 0)\n                state_next = DONE_WAIT_ACK;\n        DONE_WAIT_ACK:\n            if(ack == 1)\n                state_next = IDLE;\n    endcase\nend\n\nalways @(posedge clk or posedge reset)\nbegin\n    if(reset)\n        delay_reg <= 4'b0000;\n    else if(state_reg == CAPTURE_DELAY)\n        delay_reg <= {delay_reg[2:0], data};\nend\n\nalways @(posedge clk or posedge reset)\nbegin\n    if(reset)\n        counter_reg <= 12'b0;\n    else if(state_reg == COUNTING && counter_reg == 0)\n        counter_reg <= {delay_reg, 2'b00} + 12'b0001_0000_0000; // (delay + 1) * 1000\n    else if(state_reg == COUNTING)\n        counter_reg <= counter_reg - 12'b0000_0001_0000;\nend\n\nassign count = counter_reg[11:8];\nassign counting = (state_reg == COUNTING);\nassign done = (state_reg == DONE_WAIT_ACK);\n\nendmodule", "result": "failed: 234318 out of 235447 samples.", "passed": false}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\t{fr3, fr2, fr1, dfr} <= 4'b1111;\n\telse begin\n\t\tcase ({s[3], s[2], s[1]})\n\t\t\t3'b111: begin // Above s[3]\n\t\t\t\tfr3 <= 0; fr2 <= 0; fr1 <= 0; dfr <= 0;\n\t\t\tend\n\t\t\t3'b011: begin // Between s[3] and s[2]\n\t\t\t\tfr3 <= 0; fr2 <= 0; fr1 <= 1; dfr <= 0;\n\t\t\tend\n\t\t\t3'b001: begin // Between s[2] and s[1]\n\t\t\t\tfr3 <= 0; fr2 <= 1; fr1 <= 1; dfr <= 0;\n\t\t\tend\n\t\t\tdefault: begin // Below s[1]\n\t\t\t\tfr3 <= 1; fr2 <= 1; fr1 <= 1; dfr <= 0;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: 1233 out of 2040 samples.", "passed": false}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] data_bits;\nlogic next_state_valid;\n\nalways_ff @(posedge clk, posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb\nbegin\n\tcase(state)\n\t\t3'b000: // Idle\n\t\t\tif (!in)\n\t\t\t\tnext_state = 3'b001; // Start bit detected\n\t\t\telse\n\t\t\t\tnext_state = 3'b000;\n\t\t3'b001: // Start bit detected\n\t\t\tif (in)\n\t\t\t\tnext_state = 3'b010; // First data bit\n\t\t\telse\n\t\t\t\tnext_state = 3'b001;\n\t\t3'b010: // Data bits\n\t\t\tif (data_bits == 7)\n\t\t\t\tnext_state = 3'b011; // Last data bit\n\t\t\telse\n\t\t\t\tnext_state = 3'b100; // Next data bit\n\t\t3'b011: // Stop bit\n\t\t\tif (in)\n\t\t\t\tnext_state = 3'b000; // Idle\n\t\t\telse\n\t\t\t\tnext_state = 3'b011;\n\t\t3'b100: // Data bits\n\t\t\tif (data_bits == 7)\n\t\t\t\tnext_state = 3'b011; // Last data bit\n\t\t\telse\n\t\t\t\tnext_state = 3'b100;\n\tdefault:\n\t\t\tnext_state = 3'b000;\n\tendcase\nend\n\nalways_comb\nbegin\n\tcase(state)\n\t\t3'b000: begin\n\t\t\tdone = 1'b0;\n\t\t\tdata_bits = 8'd0;\n\t\tend\n\t\t3'b001: begin\n\t\t\tdone = 1'b0;\n\t\t\tdata_bits = 8'd0;\n\t\tend\n\t\t3'b010: begin\n\t\t\tdone = 1'b0;\n\t\t\tdata_bits = {in, data_bits[7:1]};\n\t\tend\n\t\t3'b011: begin\n\t\t\tdone = ~in; // Stop bit should be 1\n\t\t\tdata_bits = 8'd0;\n\t\tend\n\t\t3'b100: begin\n\t\t\tdone = 1'b0;\n\t\t\tdata_bits = {in, data_bits[7:1]};\n\t\tend\n\t\tdefault: begin\n\t\t\tdone = 1'b0;\n\t\t\tdata_bits = 8'd0;\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] data_reg;\n\n// State definitions\nlocalparam IDLE = 3'b000;\nlocalparam START_BIT = 3'b001;\nlocalparam DATA_BITS = 3'b010;\nlocalparam STOP_BIT = 3'b011;\n\nalways_ff @(posedge clk, posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\t\tstate <= IDLE;\n\t\tdata_reg <= 8'b0;\n\t\tout_byte <= 8'b0;\n\t\tdone <= 1'b0;\n\tend\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\tIDLE:\n\t\t\tbegin\n\t\t\t\tif (!in)\n\t\t\t\t\tstate <= START_BIT;\n\t\t\tend\n\t\t\t\n\t\t\tSTART_BIT:\n\t\t\tbegin\n\t\t\t\tstate <= DATA_BITS;\n\t\t\t\tdata_reg[0] <= in;\n\t\t\tend\n\t\t\t\n\t\t\tDATA_BITS:\n\t\t\tbegin\n\t\t\t\tif (data_reg[7])\n\t\t\t\t\tstate <= STOP_BIT;\n\t\t\t\telse\n\t\t\t\tbegin\n\t\t\t\t\tdata_reg[7:1] <= data_reg[6:0];\n\t\t\t\t\tdata_reg[0] <= in;\n\t\t\t\t\tif (data_reg == 8'b0)\n\t\t\t\t\t\tstate <= IDLE;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tSTOP_BIT:\n\t\t\tbegin\n\t\t\t\tif (in)\n\t\t\t\tbegin\n\t\t\t\t\tout_byte <= data_reg;\n\t\t\t\t\tdone <= 1'b1;\n\t\t\t\t\tstate <= IDLE;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tstate <= STOP_BIT; // Wait for stop bit\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "logic [6:0] global_history;\nlogic [6:0] pht_index;\nlogic [6:0] next_global_history;\nlogic [6:0] temp_history;\n\nlogic [6:0] train_pht_index;\nlogic [6:0] train_next_global_history;\n\nlogic [6:7][1:0] pht_entries[0:127];\nlogic [6:7][1:0] next_pht_entries[0:127];\n\nalways_ff @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tglobal_history <= 7'b0;\n\telse\n\t\tglobal_history <= next_global_history;\nend\n\nassign pht_index = {global_history, predict_pc}[6:0];\nassign train_pht_index = {train_history, train_pc}[6:0];\n\nalways_comb\nbegin\n\tcase(pht_entries[pht_index][0])\n\t\t2'b00: predict_taken = 0;\n\t\t2'b01: predict_taken = 0;\n\t\t2'b10: predict_taken = 1;\n\t\t2'b11: predict_taken = 1;\n\tendcase\n\tpredict_history = global_history;\nend\n\nalways_ff @(posedge clk)\nbegin\n\tif (predict_valid && !train_valid)\n\t\tnext_global_history = {global_history[5:0], predict_taken};\n\telse if (train_valid)\n\t\tnext_global_history = train_next_global_history;\n\telse\n\t\tnext_global_history = global_history;\nend\n\nalways_ff @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tpht_entries[pht_index] <= 2'b00;\n\telse if (train_valid)\n\t\tpht_entries[train_pht_index] <= next_pht_entries[train_pht_index];\nend\n\nalways_comb\nbegin\n\tif (train_taken == 1'b1 && train_mispredicted == 1'b0)\n\t\tnext_pht_entries[train_pht_index] = pht_entries[train_pht_index] + 2'd1;\n\telse if (train_taken == 1'b0 && train_mispredicted == 1'b0)\n\t\tnext_pht_entries[train_pht_index] = pht_entries[train_pht_index] - 2'd1;\n\telse if (train_mispredicted == 1'b1)\n\t\tnext_pht_entries[train_pht_index] = 2'b00;\n\telse\n\t\tnext_pht_entries[train_pht_index] = pht_entries[train_pht_index];\nend\n\nalways_comb\nbegin\n\tif (train_mispredicted == 1'b1)\n\t\ttrain_next_global_history = temp_history;\n\telse\n\t\ttrain_next_global_history = {train_history[5:0], train_taken};\nend\n\nalways_ff @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\ttemp_history <= 7'b0;\n\telse if (predict_valid && train_valid && train_pht_index == pht_index)\n\t\ttemp_history <= {global_history[5:0], train_taken};\n\telse\n\t\ttemp_history <= global_history;\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "typedef enum logic [3:0] {WALK_LEFT, WALK_RIGHT, FALLING, DIGGING, SPLATTERED} state_t;\nstate_t current_state, next_state;\n\nalways_ff @(posedge clk or posedge areset)\n\tif (areset)\n\t\tcurrent_state <= WALK_LEFT;\n\telse\n\t\tcurrent_state <= next_state;\n\nalways_comb begin\n\twalk_left = 1'b0;\n\twalk_right = 1'b0;\n\taaah = 1'b0;\n\tdigging = 1'b0;\n\t\n\tcase(current_state)\n\tWALK_LEFT: begin\n\t\tif (bump_left) next_state = WALK_RIGHT;\n\t\telse if (bump_right) next_state = WALK_RIGHT;\n\t\telse if (~ground) next_state = FALLING;\n\t\telse if (dig) next_state = DIGGING;\n\t\telse next_state = WALK_LEFT;\n\tend\n\tWALK_RIGHT: begin\n\t\tif (bump_left) next_state = WALK_RIGHT;\n\t\telse if (bump_right) next_state = WALK_LEFT;\n\t\telse if (~ground) next_state = FALLING;\n\t\telse if (dig) next_state = DIGGING;\n\t\telse next_state = WALK_RIGHT;\n\tend\n\tFALLING: begin\n\t\tif (ground) next_state = WALK_LEFT;\n\t\telse if (dig) next_state = DIGGING;\n\t\telse next_state = FALLING;\n\tend\n\tDIGGING: begin\n\t\tif (~ground) next_state = FALLING;\n\t\telse if (ground && !dig) next_state = WALK_LEFT;\n\t\telse next_state = DIGGING;\n\tend\n\tSPLATTERED: next_state = SPLATTERED;\n\tendcase\n\t\n\tcase(current_state)\n\tWALK_LEFT: walk_left = 1'b1;\n\tWALK_RIGHT: walk_right = 1'b1;\n\tFALLING: aaah = 1'b1;\n\tDIGGING: digging = 1'b1;\n\tendcase\nend\n\ninteger counter;\nalways_ff @(posedge clk or posedge areset)\n\tif (areset)\n\t\tcounter <= 0;\n\telse if (current_state == FALLING && !ground)\n\t\tcounter <= counter + 1;\n\telse if (current_state != FALLING || ground)\n\t\tcounter <= 0;\n\nalways_comb begin\n\tif (counter > 20 && ground)\n\t\tnext_state = SPLATTERED;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [3:0] state;\nreg [3:0] pattern_reg;\n\nparameter START = 4'b0000;\nparameter SHIFTING = 4'b0001;\nparameter COUNTING = 4'b0010;\nparameter NOTIFIED = 4'b0011;\nparameter ACKNOWLEDGED = 4'b0100;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif(reset)\n\t\tstate <= START;\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\tSTART:\n\t\t\tbegin\n\t\t\t\tpattern_reg <= {pattern_reg[2:0], data};\n\t\t\t\tif(pattern_reg == 4'b1101)\n\t\t\t\t\tstate <= SHIFTING;\n\t\t\t\telse\n\t\t\t\t\tstate <= START;\n\t\t\tend\n\n\t\t\tSHIFTING:\n\t\t\tbegin\n\t\t\t\tpattern_reg <= {pattern_reg[2:0], data};\n\t\t\t\tif(pattern_reg == 4'b1101)\n\t\t\t\t\tstate <= COUNTING;\n\t\t\t\telse if(pattern_reg != 4'b1101 && pattern_reg[3])\n\t\t\t\t\tstate <= START;\n\t\t\t\telse\n\t\t\t\t\tstate <= SHIFTING;\n\t\t\tend\n\n\t\t\tCOUNTING:\n\t\t\tbegin\n\t\t\t\tif(done_counting)\n\t\t\t\t\tstate <= NOTIFIED;\n\t\t\t\telse\n\t\t\t\t\tstate <= COUNTING;\n\t\t\tend\n\n\t\t\tNOTIFIED:\n\t\t\tbegin\n\t\t\t\tdone <= 1;\n\t\t\t\tif(ack)\n\t\t\t\t\tstate <= ACKNOWLEDGED;\n\t\t\t\telse\n\t\t\t\t\tstate <= NOTIFIED;\n\t\t\tend\n\n\t\t\tACKNOWLEDGED:\n\t\t\tbegin\n\t\t\t\tdone <= 0;\n\t\t\t\tstate <= START;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nalways @(state)\nbegin\n\tcase(state)\n\t\tSHIFTING: shift_ena = 1;\n\t\tdefault: shift_ena = 0;\n\tendcase\n\tcounting = (state == COUNTING);\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "reg [255:0] next_state;\nwire [255:0] neighbours_sum;\n\ngenvar i, j;\ngenerate\n\tfor (i = 0; i < 16; i = i + 1) begin : row_gen\n\t\tfor (j = 0; j < 16; j = j + 1) begin : col_gen\n\t\t\tassign neighbours_sum[(i*16)+j] = \n\t\t\t\tq[((i-1)%16)*16 + ((j-1)%16)] +\n\t\t\t\tq[((i-1)%16)*16 + j] +\n\t\t\t\tq[((i-1)%16)*16 + ((j+1)%16)] +\n\t\t\t\tq[i*16 + ((j-1)%16)] +\n\t\t\t\tq[i*16 + ((j+1)%16)] +\n\t\t\t\tq[((i+1)%16)*16 + ((j-1)%16)] +\n\t\t\t\tq[((i+1)%16)*16 + j] +\n\t\t\t\tq[((i+1)%16)*16 + ((j+1)%16)];\n\t\tend\n\tend\nendgenerate\n\nalways @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse\n\t\tq <= next_state;\nend\n\nalways @(*) begin\n\tfor (int i = 0; i < 256; i = i + 1) begin\n\t\tcase (neighbours_sum[i])\n\t\t\t0, 1: next_state[i] = 0;\n\t\t\t2: next_state[i] = q[i];\n\t\t\t3: next_state[i] = 1;\n\t\t\tdefault: next_state[i] = 0;\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "logic [2:0] state, next_state;\nlogic falling;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 3'b001; // Walk Left\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t3'b001: next_state = (bump_right) ? 3'b010 : 3'b001; // Walk Left -> Walk Right if bumped_right\n\t\t3'b010: next_state = (bump_left) ? 3'b001 : 3'b010; // Walk Right -> Walk Left if bumped_left\n\t\t3'b100: next_state = (ground & ~dig) ? 3'b001 : 3'b100; // Falling -> Walk Left if back on ground\n\t\t3'b101: next_state = (ground & ~dig) ? 3'b010 : 3'b101; // Falling -> Walk Right if back on ground\n\t\tdefault: next_state = 3'b001; // Default to Walk Left\n\tendcase\nend\n\nalways_comb begin\n\twalk_left = (state == 3'b001);\n\twalk_right = (state == 3'b010);\n\taaah = (state == 3'b100 || state == 3'b101);\n\tdigging = (state == 3'b001 && ground && dig) || (state == 3'b010 && ground && dig);\n\tfalling = (state == 3'b100 || state == 3'b101);\nend\n\nalways_comb begin\n\tcase({falling, dig, bump_left, bump_right})\n\t\t4'b0000: next_state = state; // No action\n\t\t4'b0001: next_state = 3'b010; // Bumped Right -> Walk Right\n\t\t4'b0010: next_state = 3'b001; // Bumped Left -> Walk Left\n\t\t4'b0011: next_state = 3'b010; // Bumped Both Sides -> Walk Right\n\t\t4'b0100: next_state = 3'b100; // Digging Left -> Falling Left\n\t\t4'b0101: next_state = 3'b101; // Digging Right -> Falling Right\n\t\t4'b1000: next_state = 3'b100; // Falling Left\n\t\t4'b1001: next_state = 3'b101; // Falling Right\n\t\t4'b1010: next_state = 3'b100; // Falling Left\n\t\t4'b1011: next_state = 3'b101; // Falling Right\n\t\tdefault: next_state = 3'b001; // Default to Walk Left\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk) begin\n    if (reset)\n        {hh, mm, ss, pm} <= 8'b1100_0000; // 12:00 AM\n    else if (ena) begin\n        ss <= ss + 1;\n        if (ss == 8'd59) begin\n            ss <= 0;\n            mm <= mm + 1;\n            if (mm == 8'd59) begin\n                mm <= 0;\n                hh <= hh + 1;\n                if (hh == 8'd12) begin\n                    hh <= 0;\n                    pm <= ~pm;\n                end\n                else if (hh == 8'd11 && pm) begin\n                    hh <= 0;\n                    pm <= ~pm;\n                end\n                else if (hh == 8'd11 && !pm) begin\n                    hh <= 8'd12;\n                end\n                else\n                    hh <= hh + 1;\n            end\n            else\n                mm <= mm + 1;\n        end\n        else\n            ss <= ss + 1;\n    end\nend\n\nendmodule", "result": "failed: 352412 out of 352413 samples.", "passed": false}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "logic [1:0] current_state, next_state;\nparameter IDLE = 2'b00, WALK_LEFT = 2'b01, WALK_RIGHT = 2'b10, FALLING = 2'b11;\n\nalways_ff @(posedge clk, posedge areset)\nbegin\n\tif (areset)\n\t\tcurrent_state <= WALK_LEFT;\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways_comb\nbegin\n\tcase(current_state)\n\t\tWALK_LEFT: begin\n\t\t\tif (bump_left)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse\n\t\t\t\tnext_state = WALK_LEFT;\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\tif (bump_right)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\tend\n\t\tFALLING: begin\n\t\t\tif (ground)\n\t\t\t\tnext_state = current_state;\n\t\t\telse\n\t\t\t\tnext_state = FALLING;\n\t\tend\n\tendcase\nend\n\nassign walk_left = (current_state == WALK_LEFT);\nassign walk_right = (current_state == WALK_RIGHT);\nassign aaah = (!ground && current_state != FALLING);\n\nendmodule", "result": "failed: 218 out of 441 samples.", "passed": false}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tq <= 16'b0;\n\telse begin\n\t\tcase ({q[3:0]})\n\t\t\t4'd9: begin\n\t\t\t\tq[3:0] <= 4'b0;\n\t\t\t\tq[7:4] <= q[7:4] + 1;\n\t\t\t\tena[1] <= 1;\n\t\t\tend\n\t\t\tdefault: q[3:0] <= q[3:0] + 1;\n\t\tendcase\n\t\t\n\t\tcase ({q[7:4]})\n\t\t\t4'd9: begin\n\t\t\t\tq[7:4] <= 4'b0;\n\t\t\t\tq[11:8] <= q[11:8] + 1;\n\t\t\t\tena[2] <= 1;\n\t\t\tend\n\t\t\tdefault: \n\t\t\t\tif (ena[1])\n\t\t\t\t\tena[1] <= 0;\n\t\tendcase\n\t\t\n\t\tcase ({q[11:8]})\n\t\t\t4'd9: begin\n\t\t\t\tq[11:8] <= 4'b0;\n\t\t\t\tq[15:12] <= q[15:12] + 1;\n\t\t\t\tena[3] <= 1;\n\t\t\tend\n\t\t\tdefault: \n\t\t\t\tif (ena[2])\n\t\t\t\t\tena[2] <= 0;\n\t\tendcase\n\t\t\n\t\tcase ({q[15:12]})\n\t\t\t4'd9: begin\n\t\t\t\tq[15:12] <= 4'b0;\n\t\t\t\tena[3] <= 0;\n\t\t\tend\n\t\t\tdefault: \n\t\t\t\tif (ena[3])\n\t\t\t\t\tena[3] <= 0;\n\t\tendcase\n\tend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "\n\tassign out = (sel == 1'b0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(y or w) begin\n    case ({y[3:1], w})\n        4'b0000: Y2 = 0; // State A\n        4'b0001: Y2 = 0; // State A\n        4'b0010: Y2 = 1; // State B\n        4'b0011: Y2 = 0; // State B\n        4'b0100: Y2 = 1; // State C\n        4'b0101: Y2 = 0; // State C\n        4'b0110: Y2 = 1; // State D\n        4'b0111: Y2 = 0; // State D\n        4'b1000: Y2 = 1; // State E\n        4'b1001: Y2 = 1; // State E\n        4'b1010: Y2 = 0; // State F\n        4'b1011: Y2 = 1; // State F\n    endcase\nend\nendmodule", "result": "failed: 35 out of 100 samples.", "passed": false}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "assign ringer = ~vibrate_mode & ring;\nassign motor = vibrate_mode & ring;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*) begin\n    if (a & b)\n        out_alwaysblock = 1;\n    else \n        out_alwaysblock = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": "\n\tassign zero = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n\tif (a)\n\t\tq <= ~q;\n\telse\n\t\tq <= 1'b1;\nend\n\nendmodule", "result": "failed: 26 out of 123 samples.", "passed": false}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\nlogic carry_out;\n\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\tS0: if (!areset) next_state = S1; else next_state = S0;\n\t\tS1: next_state = S2;\n\t\tS2: next_state = S2;\n\tendcase\nend\n\nalways_comb begin\n\tcase(state)\n\t\tS0: {z, carry_out} = {1'b0, 1'b0};\n\t\tS1: {z, carry_out} = {~x, 1'b0};\n\t\tS2: {z, carry_out} = {~x, carry_out};\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (in == 1'b0) next_state = 2'b00; else next_state = 2'b01;\n\t\t2'b01: if (in == 1'b0) next_state = 2'b10; else next_state = 2'b01;\n\t\t2'b10: if (in == 1'b0) next_state = 2'b00; else next_state = 2'b11;\n\t\t2'b11: if (in == 1'b0) next_state = 2'b10; else next_state = 2'b01;\n\t\tdefault: next_state = 2'b00;\n\tendcase\nend\n\nassign out = (state == 2'b11) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n\tassign out[7:0] = in[24:16];\n\tassign out[15:8] = in[8:0];\n\tassign out[23:16] = in[31:23];\n\tassign out[31:24] = in[15:7];\nendmodule", "result": "failed: 109 out of 110 samples.", "passed": false}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk) begin\n    if (r)\n        q <= 1'b0;\n    else\n        q <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "assign z = (^{x, y}) & x;\nendmodule", "result": "passed", "passed": true}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse if (ena) begin\n\t\tcase (amount)\n\t\t\t2'b00: q <= {q[62:0], q[63]};\n\t\t\t2'b01: q <= {q[55:0], 8'b0};\n\t\t\t2'b10: q <= {{q[63]}, q[62:0][62:1]};\n\t\t\t2'b11: q <= {{7{q[63]}}, q[55:0]};\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\nlocalparam S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn)\n\tif (!aresetn)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\n\nalways @(*) begin\n\tcase(state)\n\t\tS0: if (x) next_state = S1; else next_state = S0;\n\t\tS1: if (x) next_state = S0; else next_state = S2;\n\t\tS2: if (x) next_state = S1; else next_state = S0;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(state)\n\t\tS0: z = 0;\n\t\tS1: z = 0;\n\t\tS2: z = 1;\n\t\tdefault: z = 0;\n\tendcase\nend\n\nendmodule", "result": "failed: 40 out of 440 samples.", "passed": false}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\nwire x;\n\nassign x = w ? 1'b1 : 1'b0;\n\nalways @(posedge clk or posedge reset)\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\n\nalways @* begin\n\tcase (state)\n\t\t3'b000: if (x == 1'b0) next_state = 3'b001; else next_state = 3'b000;\n\t\t3'b001: if (x == 1'b0) next_state = 3'b010; else next_state = 3'b011;\n\t\t3'b010: if (x == 1'b0) next_state = 3'b011; else next_state = 3'b011;\n\t\t3'b011: if (x == 1'b0) next_state = 3'b100; else next_state = 3'b000;\n\t\t3'b011: if (x == 1'b1) next_state = 3'b101; else next_state = 3'b011;\n\t\t3'b100: if (x == 1'b0) next_state = 3'b101; else next_state = 3'b101;\n\t\t3'b101: if (x == 1'b0) next_state = 3'b010; else next_state = 3'b101;\n\tendcase\nend\n\nassign z = (state == 3'b011) || (state == 3'b100);\n\nendmodule", "result": "failed: 37 out of 200 samples.", "passed": false}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "logic [7:0] byte1, byte2, byte3;\nlogic [2:0] state;\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse if (state == 3'b000 && in[3])\n\t\tstate <= 3'b001;\n\telse if (state == 3'b001)\n\t\tstate <= 3'b010;\n\telse if (state == 3'b010)\n\t\tstate <= 3'b011;\n\telse if (state == 3'b011)\n\t\tstate <= 3'b000;\nend\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tbyte1 <= 8'h00;\n\t\tbyte2 <= 8'h00;\n\t\tbyte3 <= 8'h00;\n\tend else if (state == 3'b000 && in[3]) begin\n\t\tbyte1 <= in;\n\t\tstate <= 3'b001;\n\tend else if (state == 3'b001) begin\n\t\tbyte2 <= in;\n\t\tstate <= 3'b010;\n\tend else if (state == 3'b010) begin\n\t\tbyte3 <= in;\n\t\tstate <= 3'b011;\n\tend else if (state == 3'b011) begin\n\t\tbyte1 <= in;\n\t\tstate <= 3'b000;\n\tend\nend\n\nassign done = (state == 3'b011);\nassign out_bytes = {byte3, byte2, byte1};\n\nendmodule", "result": "failed: 660 out of 1619 samples.", "passed": false}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = y[0] & ~w | y[1] & w | y[4] & ~w;\nassign Y3 = y[1] & ~w | y[3] & w;\n\nendmodule", "result": "failed: 390 out of 600 samples.", "passed": false}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "\n\tassign outv = vec;\n\tassign o2 = vec[2];\n\tassign o1 = vec[1];\n\tassign o0 = vec[0];\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case ({c,d,a,b})\n        4'b0000: out = 0;\n        4'b0001: out = 1;\n        4'b0011: out = 0;\n        4'b0010: out = 1;\n        4'b0100: out = 1;\n        4'b0101: out = 0;\n        4'b0111: out = 1;\n        4'b0110: out = 0;\n        4'b1100: out = 0;\n        4'b1101: out = 1;\n        4'b1111: out = 0;\n        4'b1110: out = 1;\n        4'b1000: out = 1;\n        4'b1001: out = 0;\n        4'b1011: out = 1;\n        4'b1010: out = 0:\n    endcase\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "assign out_hi = in[15:8];\nassign out_lo = in[7:0];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a | b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @(*) begin\n\tout_always_comb = a ^ b;\nend\n\nreg [1:0] state;\nalways @(posedge clk) begin\n\tstate <= {state[0], a ^ b};\n\tout_always_ff <= state[1];\nend\n\nendmodule", "result": "failed: 118 out of 219 samples.", "passed": false}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "assign Y2 = ~(y[6]&w) & (~y[5]|~y[4]|~y[3]|~y[1]);\nassign Y4 = ~(y[6]&w) & (~y[5]|~y[3]|~y[2]|~y[1]);\n\nendmodule", "result": "failed: 599 out of 600 samples.", "passed": false}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "\n\tassign out = in[sel];\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n    if (L)\n        Q <= R;\n    else if (E)\n        Q <= Q; // No change in shift mode\n    else\n        Q <= w;\nend\n\nendmodule", "result": "failed: 56 out of 200 samples.", "passed": false}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "logic q1, q2, q3;\n\nalways_ff @(posedge clk) begin\n\tq1 <= x ^ q1;\n\tq2 <= x & (~q2);\n\tq3 <= x | (~q3);\nend\n\nassign z = ~(q1 ^ q2 ^ q3);\n\nendmodule", "result": "failed: 118 out of 118 samples.", "passed": false}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & b) | (c & d);\n\nendmodule", "result": "failed: 38 out of 121 samples.", "passed": false}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        for (int i = 0; i < 512; i++) begin\n            case ({data[i-1], data[i], data[(i+1)%512]})\n                3'b111: q[i] <= 1'b0;\n                3'b110: q[i] <= 1'b1;\n                3'b101: q[i] <= 1'b1;\n                3'b100: q[i] <= 1'b0;\n                3'b011: q[i] <= 1'b1;\n                3'b010: q[i] <= 1'b1;\n                3'b001: q[i] <= 1'b1;\n                3'b000: q[i] <= 1'b0;\n            endcase\n        end\nend\n\nendmodule", "result": "failed: 6220 out of 6283 samples.", "passed": false}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] current_state;\nlogic [1:0] next_state;\n\nalways_ff @(posedge clk, posedge reset) begin\n\tif (reset)\n\t\tcurrent_state <= 2'b00; // State A\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways_comb begin\n\tcase (current_state)\n\t\t2'b00: begin // State A\n\t\t\tif (!in)\n\t\t\t\tnext_state = 2'b00; // A\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // B\n\t\t\tout = 1'b0;\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tif (!in)\n\t\t\t\tnext_state = 2'b10; // C\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // B\n\t\t\tout = 1'b0;\n\t\tend\n\t\t2'b10: begin // State C\n\t\t\tif (!in)\n\t\t\t\tnext_state = 2'b00; // A\n\t\t\telse\n\t\t\t\tnext_state = 2'b11; // D\n\t\t\tout = 1'b0;\n\t\tend\n\t\t2'b11: begin // State D\n\t\t\tif (!in)\n\t\t\t\tnext_state = 2'b10; // C\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // B\n\t\t\tout = 1'b1;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = 2'b00; // Reset to A\n\t\t\tout = 1'b0;\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @(*) begin\n    case (c)\n        0: q = b;\n        1: q = e;\n        2: q = a;\n        3: q = d;\n        default: q = 4'b1111; // f in binary is 1111 for 4-bit representation\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "always @(sel or a or b)\nbegin\n    if (!sel)\n        out <= a;\n    else\n        out <= b;\nend\n\nendmodule", "result": "failed: 111 out of 114 samples.", "passed": false}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "always @(posedge clk) begin\n    if (L) begin\n        Q <= r_in;\n    end else begin\n        Q <= q_in ^ Q;\n    end\nend\n\nendmodule", "result": "failed: 49 out of 199 samples.", "passed": false}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "\nalways @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tout <= 32'b0;\n\telse begin\n\t\tfor (int i = 0; i < 32; i = i + 1) begin\n\t\t\tif ((in[i] == 1'b1) && (in[i+1] == 1'b0))\n\t\t\t\tout[i] <= 1'b1;\n\t\tend\n\tend\nend\nendmodule", "result": "failed: 239 out of 266 samples.", "passed": false}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n    q[0] <= d[0];\n    q[1] <= d[1];\n    q[2] <= d[2];\n    q[3] <= d[3];\n    q[4] <= d[4];\n    q[5] <= d[5];\n    q[6] <= d[6];\n    q[7] <= d[7];\nend\n\nendmodule", "result": "failed: 1 out of 41 samples.", "passed": false}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "\n\twire [8:0] sum;\n\tassign {overflow, s} = a + b;\nendmodule", "result": "failed: 55 out of 116 samples.", "passed": false}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = &state; // Always false as B3_next is not part of the next state logic directly.\nassign S_next = (state == 10'b1000000000) ? 1'b1 : ((state == 10'b0000000001) && (!d)) ? 1'b1 : 1'b0;\nassign S1_next = (state == 10'b1000000000) ? 1'b0 : ((state == 10'b0000000001) && (d)) ? 1'b1 : 1'b0;\nassign Count_next = (state == 10'b1000000010) ? 1'b0 : ((state == 10'b1000000100) && (d)) ? 1'b0 : ((state == 10'b1000001000) && (d)) ? 1'b0 : ((state == 10'b1000010000) && (d)) ? 1'b0 : ((state == 10'b1000100000) && (d)) ? 1'b0 : ((state == 10'b1001000000) && (!done_counting)) ? 1'b0 : 1'b0;\nassign Wait_next = (state == 10'b1001000000) && (done_counting) ? 1'b1 : 1'b0;\nassign done = (state == 10'b1001000000) && (done_counting) ? 1'b1 : 1'b0;\nassign counting = (state == 10'b1001000000) && (!done_counting) ? 1'b1 : 1'b0;\nassign shift_ena = (state == 10'b0000000010) || (state == 10'b0000000100) || (state == 10'b0000001000) || (state == 10'b0000010000) || (state == 10'b0000100000) || (state == 10'b0001000000) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 3208 out of 3303 samples.", "passed": false}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "always_ff @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= 2'b01;\n    else if (train_valid && train_taken && state < 2'b11)\n        state <= state + 1;\n    else if (train_valid && !train_taken && state > 2'b00)\n        state <= state - 1;\n    else\n        state <= state;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "\nalways @(*) begin\n    case (in)\n        8'b00000001: pos = 3'd0;\n        8'b00000010: pos = 3'd1;\n        8'b00000100: pos = 3'd2;\n        8'b00001000: pos = 3'd3;\n        8'b00010000: pos = 3'd4;\n        8'b00100000: pos = 3'd5;\n        8'b01000000: pos = 3'd6;\n        8'b10000000: pos = 3'd7;\n        default: pos = 3'd0; // This is for the case where all bits are 0\n    endcase\nend\nendmodule", "result": "failed: 147 out of 346 samples.", "passed": false}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    unique case (scancode)\n        16'hE06B: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'hE072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'hE074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'hE075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "wire c_out;\n\nfull_adder fa0 (.a(x[0]), .b(y[0]), .cin(1'b0), .sum(sum[0]), .cout(c_out));\nfull_adder fa1 (.a(x[1]), .b(y[1]), .cin(c_out), .sum(sum[1]), .cout(c_out));\nfull_adder fa2 (.a(x[2]), .b(y[2]), .cin(c_out), .sum(sum[2]), .cout(c_out));\nfull_adder fa3 (.a(x[3]), .b(y[3]), .cin(c_out), .sum(sum[3]), .cout(sum[4]));\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "always_ff @(posedge clk or posedge areset)\nbegin\n    if (areset)\n        predict_history <= 32'b0;\n    else if (train_mispredicted)\n        predict_history <= {train_history[30:0], train_taken};\n    else if (predict_valid)\n        predict_history <= {predict_history[30:0], predict_taken};\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "\n\twire and1_out;\n\twire and2_out;\n\n\tand #1 and_gate1 (.a(a), .b(b), .out(and1_out));\n\tand #1 and_gate2 (.a(c), .b(d), .out(and2_out));\n\tor #1 or_gate (.a(and1_out), .b(and2_out), .out(out));\n\tnot #1 not_gate (.a(out), .y(out_n));\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk) begin\n    q <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] shift_reg;\nalways @(posedge clk) begin\n\tif (enable)\n\t\tshift_reg <= {S, shift_reg[7:1]};\nend\n\nwire [2:0] addr = {A, B, C};\ngenvar i;\ngenerate\n\tfor (i = 0; i < 8; i = i + 1) begin : select_mux\n\t\twire sel = (addr == i);\n\t\tif (i == 0) begin\n\t\t\tassign Z = sel ? shift_reg[i] : 1'bZ;\n\t\tend else begin\n\t\t\tassign Z = sel ? shift_reg[i] : Z;\n\t\tend\n\tend\nendgenerate\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "assign heater = mode & too_cold;\nassign aircon = ~mode & too_hot;\nassign fan = mode & too_cold | ~mode & too_hot | fan_on;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "assign out_sop = (a & ~b & ~c & ~d) | (~a & b & ~c & ~d) | (~a & ~b & c & ~d) | (~a & ~b & ~c & d) | (~a & b & c & d);\nassign out_pos = ~(a | b | ~c | d) & ~(~a | ~b | c | d) & ~(~a | b | ~c | ~d) & ~(~a | b | c | ~d);\n\nendmodule", "result": "failed: 44 out of 107 samples.", "passed": false}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 32'h1;\n\telse\n\t\tq <= {q[30:0], ^{q[31], q[21], q[1], q[0]}};\nend\n\nendmodule", "result": "failed: 400356 out of 400411 samples.", "passed": false}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & d) | ((~a & b) & d) | ((~a & ~b & c) & d) | (~a & ~b & ~c);\nendmodule", "result": "failed: 45 out of 121 samples.", "passed": false}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "assign p1y = ~(p1a & p1b & p1c & p1d);\nassign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "\n\tassign out = in[254] + in[253] + in[252] + in[251] + in[250] + in[249] + in[248] + in[247] + \n\t             in[246] + in[245] + in[244] + in[243] + in[242] + in[241] + in[240] + in[239] + \n\t             in[238] + in[237] + in[236] + in[235] + in[234] + in[233] + in[232] + in[231] + \n\t             in[230] + in[229] + in[228] + in[227] + in[226] + in[225] + in[224] + in[223] + \n\t             in[222] + in[221] + in[220] + in[219] + in[218] + in[217] + in[216] + in[215] + \n\t             in[214] + in[213] + in[212] + in[211] + in[210] + in[209] + in[208] + in[207] + \n\t             in[206] + in[205] + in[204] + in[203] + in[202] + in[201] + in[200] + in[199] + \n\t             in[198] + in[197] + in[196] + in[195] + in[194] + in[193] + in[192] + in[191] + \n\t             in[190] + in[189] + in[188] + in[187] + in[186] + in[185] + in[184] + in[183] + \n\t             in[182] + in[181] + in[180] + in[179] + in[178] + in[177] + in[176] + in[175] + \n\t             in[174] + in[173] + in[172] + in[171] + in[170] + in[169] + in[168] + in[167] + \n\t             in[166] + in[165] + in[164] + in[163] + in[162] + in[161] + in[160] + in[159] + \n\t             in[158] + in[157] + in[156] + in[155] + in[154] + in[153] + in[152] + in[151] + \n\t             in[150] + in[149] + in[148] + in[147] + in[146] + in[145] + in[144] + in[143] + \n\t             in[142] + in[141] + in[140] + in[139] + in[138] + in[137] + in[136] + in[135] + \n\t             in[134] + in[133] + in[132] + in[131] + in[130] + in[129] + in[128] + in[127] + \n\t             in[126] + in[125] + in[124] + in[123] + in[122] + in[121] + in[120] + in[119] + \n\t             in[118] + in[117] + in[116] + in[115] + in[114] + in[113] + in[112] + in[111] + \n\t             in[110] + in[109] + in[108] + in[107] + in[106] + in[105] + in[104] + in[103] + \n\t             in[102] + in[101] + in[100] + in[99] + in[98] + in[97] + in[96] + in[95] + in[94] + \n\t             in[93] + in[92] + in[91] + in[90] + in[89] + in[88] + in[87] + in[86] + in[85] + \n\t             in[84] + in[83] + in[82] + in[81] + in[80] + in[79] + in[78] + in[77] + in[76] + \n\t             in[75] + in[74] + in[73] + in[72] + in[71] + in[70] + in[69] + in[68] + in[67] + \n\t             in[66] + in[65] + in[64] + in[63] + in[62] + in[61] + in[60] + in[59] + in[58] + \n\t             in[57] + in[56] + in[55] + in[54] + in[53] + in[52] + in[51] + in[50] + in[49] + \n\t             in[48] + in[47] + in[46] + in[45] + in[44] + in[43] + in[42] + in[41] + in[40] + \n\t             in[39] + in[38] + in[37] + in[36] + in[35] + in[34] + in[33] + in[32] + in[31] + \n\t             in[30] + in[29] + in[28] + in[27] + in[26] + in[25] + in[24] + in[23] + in[22] + \n\t             in[21] + in[20] + in[19] + in[18] + in[17] + in[16] + in[15] + in[14] + in[13] + \n\t             in[12] + in[11] + in[10] + in[9] + in[8] + in[7] + in[6] + in[5] + in[4] + in[3] + \n\t             in[2] + in[1] + in[0];\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "assign out_both = {1'b0, in[3:1] & in[2:0]};\nassign out_any = {in[3] | in[2], in[2] | in[1], in[1] | in[0], in[0]};\nassign out_different = {in[3] ^ in[0], in[0] ^ in[1], in[1] ^ in[2], in[2] ^ in[3]};\nendmodule", "result": "failed: 181 out of 213 samples.", "passed": false}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*) begin\n    case (a)\n        3'b000: q = 16'b1001000101100010; // 1232\n        3'b001: q = 16'b1010111011100000; // aee0\n        3'b010: q = 16'b0010011111010100; // 27d4\n        3'b011: q = 16'b0101101000001110; // 5a0e\n        3'b100: q = 16'b0010000001100110; // 2066\n        3'b101: q = 16'b0110010011001110; // 64ce\n        3'b110: q = 16'b1100010100100110; // c526\n        3'b111: q = 16'b0010111100011001; // 2f19\n    endcase\nend\n\nendmodule", "result": "failed: 10 out of 113 samples.", "passed": false}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\n\treg [3:0] count;\n\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tcount <= 4'b0;\n\t\telse if (slowena)\n\t\t\tcount <= count + 1;\n\tend\n\n\tassign q = count < 10 ? count : 4'b0;\nendmodule", "result": "failed: 134 out of 499 samples.", "passed": false}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n\t\n\tassign out = in1 & ~in2;\n\t\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b1; // State B\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tout = 1'b1;\n\t\t\tnext_state = (in == 1'b0) ? 2'b01 : 2'b10; // B --0--> A, B --1--> B\n\t\tend\n\t\t2'b01: begin // State A\n\t\t\tout = 1'b0;\n\t\t\tnext_state = (in == 1'b0) ? 2'b10 : 2'b01; // A --0--> B, A --1--> A\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "\n\treg temp_q;\n\t\n\talways @(posedge clk)\n\t\ttemp_q <= d;\n\n\talways @(negedge clk)\n\t\tq <= temp_q;\n\nendmodule", "result": "failed: 113 out of 224 samples.", "passed": false}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a ^ b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "wire a_out1, b_out1, a_out2, b_out2, or_out, and_out;\n\nmodule A (\n\tinput x,\n\tinput y,\n\toutput wire z\n);\nassign z = ((x ^ y) & x);\nendmodule\n\nmodule B (\n\tinput x,\n\tinput y,\n\toutput wire z\n);\nassign z = (x == 0 && y == 0) ? 1 : 0;\nendmodule\n\nA a1 (.x(x), .y(y), .z(a_out1));\nB b1 (.x(x), .y(y), .z(b_out1));\nA a2 (.x(x), .y(y), .z(a_out2));\nB b2 (.x(x), .y(y), .z(b_out2));\n\nassign or_out = a_out1 | b_out1;\nassign and_out = a_out2 & b_out2;\nassign z = or_out ^ and_out;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse if (ena == 2'b01) // Rotate Right\n\t\tq <= {q[0], q[99:1]};\n\telse if (ena == 2'b10) // Rotate Left\n\t\tq <= {q[98:0], q[99]};\n\tendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 10'b0;\n\telse if (q == 10'd999)\n\t\tq <= 10'b0;\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "assign out = ~in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "assign next_state = (state == 10'b0000000001) ? (in ? 10'b0000000010 : 10'b0000000001) :\n                    (state == 10'b0000000010) ? (in ? 10'b0000000100 : 10'b0000000001) :\n                    (state == 10'b0000000100) ? (in ? 10'b0000001000 : 10'b0000000001) :\n                    (state == 10'b0000001000) ? (in ? 10'b0000010000 : 10'b0000000001) :\n                    (state == 10'b0000010000) ? (in ? 10'b0000100000 : 10'b0000000001) :\n                    (state == 10'b0000100000) ? (in ? 10'b0001000000 : 10'b0000000001) :\n                    (state == 10'b0001000000) ? (in ? 10'b0010000000 : 10'b0000000001) :\n                    (state == 10'b0010000000) ? (in ? 10'b0100000000 : 10'b0000000001) :\n                    (state == 10'b0100000000) ? (in ? 10'b1000000000 : 10'b0000000001) :\n                    (state == 10'b1000000000) ? (in ? 10'b0000000001 : 10'b0000000001) : \n                                               10'b0000000001;\n\nassign out1 = &state[7:6]; // Only state S7 has non-zero value for out1\nassign out2 = state[7]; // Only state S7 sets out2 to 1\n\nendmodule", "result": "failed: 1162 out of 1424 samples.", "passed": false}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n    case ({j,k})\n        2'b00: Q <= Q;\n        2'b01: Q <= 0;\n        2'b10: Q <= 1;\n        2'b11: Q <= ~Q;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "\n\tassign out = in[0] + in[1] + in[2];\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "\n\tassign out[24] = ~a ^ a;\n\tassign out[23] = ~a ^ b;\n\tassign out[22] = ~a ^ c;\n\tassign out[21] = ~a ^ d;\n\tassign out[20] = ~a ^ e;\n\tassign out[19] = ~b ^ a;\n\tassign out[18] = ~b ^ b;\n\tassign out[17] = ~b ^ c;\n\tassign out[16] = ~b ^ d;\n\tassign out[15] = ~b ^ e;\n\tassign out[14] = ~c ^ a;\n\tassign out[13] = ~c ^ b;\n\tassign out[12] = ~c ^ c;\n\tassign out[11] = ~c ^ d;\n\tassign out[10] = ~c ^ e;\n\tassign out[9] = ~d ^ a;\n\tassign out[8] = ~d ^ b;\n\tassign out[7] = ~d ^ c;\n\tassign out[6] = ~d ^ d;\n\tassign out[5] = ~d ^ e;\n\tassign out[4] = ~e ^ a;\n\tassign out[3] = ~e ^ b;\n\tassign out[2] = ~e ^ c;\n\tassign out[1] = ~e ^ d;\n\tassign out[0] = ~e ^ e;\nendmodule", "result": "passed", "passed": true}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "logic state;\n\nalways_ff @(posedge clk, posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= 0;\n\telse\n\tbegin\n\t\tcase ({bump_right, bump_left})\n\t\t\t2'b00: state <= state; // No bump, stay in current state\n\t\t\t2'b01: state <= ~state; // Bumped on the left, change direction\n\t\t\t2'b10: state <= ~state; // Bumped on the right, change direction\n\t\t\tdefault: state <= ~state; // Bumped on both sides, change direction\n\t\tendcase\n\tend\nend\n\nassign walk_left = state;\nassign walk_right = ~state;\n\nendmodule", "result": "failed: 146 out of 229 samples.", "passed": false}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "assign q = a & b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "wire and1_out, and2_out, and3_out, and4_out;\n\nassign and1_out = p1a & p1b & p1c;\nassign and2_out = p1d & p1e & p1f;\nassign p1y = and1_out | and2_out;\n\nassign and3_out = p2a & p2b;\nassign and4_out = p2c & p2d;\nassign p2y = and3_out | and4_out;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "reg [2:0] next_state;\nalways @(posedge clk) begin\n\tcase (y)\n\t\t3'b000: if(x == 1'b0) next_state <= 3'b000; else next_state <= 3'b001;\n\t\t3'b001: if(x == 1'b0) next_state <= 3'b001; else next_state <= 3'b100;\n\t\t3'b010: if(x == 1'b0) next_state <= 3'b010; else next_state <= 3'b001;\n\t\t3'b011: if(x == 1'b0) next_state <= 3'b001; else next_state <= 3'b010;\n\t\t3'b100: if(x == 1'b0) next_state <= 3'b011; else next_state <= 3'b100;\n\tendcase\n\ty <= next_state;\n\tY0 <= next_state[0];\n\tz <= (y == 3'b011 || y == 3'b100);\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "assign out = ~(in1 | in2);\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or posedge ar) begin\n\tif (ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @(*) begin\n    case (sel)\n        3'b000: out = data0;\n        3'b001: out = data1;\n        3'b010: out = data2;\n        3'b011: out = data3;\n        3'b100: out = data4;\n        3'b101: out = data5;\n        default: out = 4'b0;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\nreg tc_reg;\n\nalways @(posedge clk) begin\n    if (load)\n        counter <= data;\n    else if (counter != 0)\n        counter <= counter - 1;\n    \n    if (counter == 0)\n        tc_reg <= 1;\n    else\n        tc_reg <= 0;\nend\n\nassign tc = tc_reg;\n\nendmodule", "result": "failed: 248 out of 7127 samples.", "passed": false}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\n\t\n\ttypedef enum logic [2:0] {S0,S1,S2,S3} state_t;\n\tstate_t current_state, next_state;\n\t\n\talways_ff @(posedge clk, posedge reset)\n\tbegin\n\t\tif(reset)\n\t\t\tcurrent_state <= S0;\n\t\telse\n\t\t\tcurrent_state <= next_state;\n\tend\n\t\n\talways_comb\n\tbegin\n\t\tcase(current_state)\n\t\t\tS0: if(data == 1) next_state = S1; else next_state = S0;\n\t\t\tS1: if(data == 1) next_state = S2; else next_state = S0;\n\t\t\tS2: if(data == 0) next_state = S3; else next_state = S0;\n\t\t\tS3: if(data == 1) next_state = S3; else next_state = S0;\n\t\t\tdefault: next_state = S0;\n\t\tendcase\n\tend\n\t\n\tassign start_shifting = (current_state == S3);\n\t\nendmodule", "result": "failed: 263 out of 643 samples.", "passed": false}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "\n\treg [7:0] in_prev;\n\n\talways @(posedge clk) begin\n\t\tin_prev <= in;\n\tend\n\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\t\tif (~in_prev[i] & in[i])\n\t\t\t\tanyedge[i] <= 1'b1;\n\t\t\telse\n\t\t\t\tanyedge[i] <= 1'b0;\n\t\tend\n\tend\nendmodule", "result": "failed: 187 out of 228 samples.", "passed": false}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'd1;\n\telse if (q == 4'd10)\n\t\tq <= 4'd1;\n\telse\n\t\tq <= q + 1'd1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1)\n        q <= 4;\n    else if (q == 6)\n        q <= 0;\n    else\n        q <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 5'b00001;\n\telse\n\t\tq <= {q[3], q[4] ^ q[2], q[0], q[1], q[4]};\nend\n\nendmodule", "result": "failed: 4280 out of 4443 samples.", "passed": false}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "always @(*) begin\n    case (do_sub)\n      0: out = a + b;\n      1: out = a - b;\n    endcase\n    \n    result_is_zero = (out == 8'b0);\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "\nassign f = ~(x[4]^x[3]&x[1]) | (x[4]&x[3]^x[2]);\nendmodule", "result": "failed: 17 out of 100 samples.", "passed": false}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case(code)\n        8'h45: begin out = 4'b0000; valid = 1'b1; end\n        8'h16: begin out = 4'b0001; valid = 1'b1; end\n        8'h1e: begin out = 4'b0010; valid = 1'b1; end\n        8'h26: begin out = 4'b0011; valid = 1'b1; end\n        8'h25: begin out = 4'b0100; valid = 1'b1; end\n        8'h2e: begin out = 4'b0101; valid = 1'b1; end\n        8'h36: begin out = 4'b0110; valid = 1'b1; end\n        8'h3d: begin out = 4'b0111; valid = 1'b1; end\n        8'h3e: begin out = 4'b1000; valid = 1'b1; end\n        8'h46: begin out = 4'b1001; valid = 1'b1; end\n        default: begin out = 4'b0000; valid = 1'b0; end\n    endcase\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "\n\tassign out[0] = in[7];\n\tassign out[1] = in[6];\n\tassign out[2] = in[5];\n\tassign out[3] = in[4];\n\tassign out[4] = in[3];\n\tassign out[5] = in[2];\n\tassign out[6] = in[1];\n\tassign out[7] = in[0];\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case ({c,b,a})\n        3'b000: out = 0;\n        3'b001: out = 0;\n        3'b010: out = 0;\n        3'b011: out = 0;\n        3'b100: out = 1;\n        3'b101: out = 1;\n        3'b110: out = 1;\n        3'b111: out = 1;\n    endcase\nend\nendmodule", "result": "failed: 58 out of 232 samples.", "passed": false}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n    if (shift_ena)\n        q <= {data, q[3:1]};\n    else if (count_ena)\n        q <= q - 1;\nend\n\nendmodule", "result": "failed: 1886 out of 2071 samples.", "passed": false}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "\n\tassign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "\n\treg [1:0] state;\n\treg [1:0] next_state;\n\t\n\tparameter IDLE = 2'b00, SHIFT_1 = 2'b01, SHIFT_2 = 2'b10, SHIFT_3 = 2'b11;\n\t\n\talways @(posedge clk) begin\n\t\tif(reset)\n\t\t\tstate <= IDLE;\n\t\telse\n\t\t\tstate <= next_state;\n\tend\n\t\n\talways @(*) begin\n\t\tcase(state)\n\t\t\tIDLE: if(reset) next_state = SHIFT_1; else next_state = IDLE;\n\t\t\tSHIFT_1: next_state = SHIFT_2;\n\t\t\tSHIFT_2: next_state = SHIFT_3;\n\t\t\tSHIFT_3: next_state = IDLE;\n\t\tendcase\n\tend\n\t\n\tassign shift_ena = (state == SHIFT_1 || state == SHIFT_2 || state == SHIFT_3);\nendmodule", "result": "failed: 10 out of 200 samples.", "passed": false}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\nalways @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse\n\t\tq <= q + 1;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2)\n\t\tout_always = b;\n\telse\n\t\tout_always = a;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "assign out = b | (c & ~a);\n\nendmodule", "result": "failed: 61 out of 219 samples.", "passed": false}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "logic [1:0] state, next_state;\nlogic [3:1] g;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\n\nalways_ff @(posedge clk, negedge resetn)\n\tif (!resetn)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\tA: begin\n\t\t\tif (r[1])\n\t\t\t\tnext_state = B;\n\t\t\telse if (r[2])\n\t\t\t\tnext_state = C;\n\t\t\telse if (r[3])\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tB: begin\n\t\t\tif (r[1])\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tC: begin\n\t\t\tif (r[2])\n\t\t\t\tnext_state = C;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tD: begin\n\t\t\tif (r[3])\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\tendcase\nend\n\nalways_comb begin\n\tcase(state)\n\t\tA: begin\n\t\t\tg[1] = r[1];\n\t\t\tg[2] = r[2];\n\t\t\tg[3] = r[3];\n\t\tend\n\t\tB: begin\n\t\t\tg[1] = r[1];\n\t\t\tg[2] = 0;\n\t\t\tg[3] = 0;\n\t\tend\n\t\tC: begin\n\t\t\tg[1] = 0;\n\t\t\tg[2] = r[2];\n\t\t\tg[3] = 0;\n\t\tend\n\t\tD: begin\n\t\t\tg[1] = 0;\n\t\t\tg[2] = 0;\n\t\t\tg[3] = r[3];\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\nalways @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse if (q == 4'b1001) // 9 in binary\n\t\tq <= 4'b0; // Reset to 0\n\telse\n\t\tq <= q + 1;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] buffer;\nlogic [1:0] count;\n\nalways_ff @(posedge clk) begin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse if (state == 3'b000 && in[3])\n\t\tstate <= 3'b001;\n\telse if (state == 3'b001)\n\t\tstate <= 3'b010;\n\telse if (state == 3'b010)\n\t\tstate <= 3'b000;\nend\n\nalways_ff @(posedge clk) begin\n\tif (reset)\n\t\tbuffer <= 8'b0;\n\telse if (state == 3'b001)\n\t\tbuffer <= in;\nend\n\nalways_ff @(posedge clk) begin\n\tif (reset)\n\t\tcount <= 2'b00;\n\telse if (state == 3'b000)\n\t\tcount <= 2'b00;\n\telse if (state == 3'b001)\n\t\tcount <= 2'b01;\n\telse if (state == 3'b010)\n\t\tcount <= 2'b10;\nend\n\nassign done = (count == 2'b10);\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "\n\tassign out = (sel) ? b : a;\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b000: if (x == 1) next_state = 3'b001; else next_state = 3'b000;\n\t\t3'b001: if (x == 1) next_state = 3'b100; else next_state = 3'b001;\n\t\t3'b010: if (x == 1) next_state = 3'b001; else next_state = 3'b010;\n\t\t3'b011: if (x == 1) next_state = 3'b100; else next_state = 3'b010;\n\t\t3'b100: if (x == 1) next_state = 3'b100; else next_state = 3'b001;\n\t\tdefault: next_state = 3'b000;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b001, 3'b100: z = 1;\n\t\tdefault: z = 0;\n\tendcase\nend\n\nendmodule", "result": "failed: 482 out of 1006 samples.", "passed": false}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "logic [1:0] state, next_state;\nlogic [2:0] x_pattern;\n\nalways_ff @(posedge clk or negedge resetn) begin\n\tif (!resetn) begin\n\t\tstate <= 2'b00; // State A\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: begin // State A\n\t\t\tif (!resetn) begin\n\t\t\t\tnext_state = 2'b00;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b01; // Move to state B\n\t\t\tend\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tnext_state = 2'b10; // Move to state C\n\t\tend\n\t\t2'b10: begin // State C\n\t\t\tif (x_pattern == 3'b101) begin\n\t\t\t\tnext_state = 2'b11; // Move to state D\n\t\t\tend else begin\n\t\t\t\tx_pattern = {x_pattern[1:0], x}; // Shift x_pattern left and add current x\n\t\t\t\tnext_state = 2'b10;\n\t\t\tend\n\t\tend\n\t\t2'b11: begin // State D\n\t\t\tif (y) begin\n\t\t\t\tnext_state = 2'b11; // Stay in state D\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b00; // Move back to state A\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = 2'b00;\n\tendcase\nend\n\nassign f = (state == 2'b01) ? 1'b1 : 1'b0;\nassign g = (state == 2'b11) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge ~clk) begin\n\tif (reset)\n\t\tq <= 8'b00110100; // Binary representation of 0x34\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "assign parity = ^in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        2'b00: begin // State A\n            if(in == 1'b0) \n                next_state = 2'b00;\n            else \n                next_state = 2'b01;\n            out = 1'b0;\n        end\n        2'b01: begin // State B\n            if(in == 1'b0) \n                next_state = 2'b10;\n            else \n                next_state = 2'b01;\n            out = 1'b0;\n        end\n        2'b10: begin // State C\n            if(in == 1'b0) \n                next_state = 2'b00;\n            else \n                next_state = 2'b11;\n            out = 1'b0;\n        end\n        2'b11: begin // State D\n            if(in == 1'b0) \n                next_state = 2'b10;\n            else \n                next_state = 2'b01;\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00; // Default to state A\n            out = 1'b0;\n        end\n    endcase\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "reg z;\nalways @(x or y) begin\n    if (x & ~y)\n        z <= 0;\n    else if (~x & y)\n        z <= 0;\n    else if (x & y)\n        z <= 1;\n    else\n        z <= 1;\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "logic [2:0] state, next_state;\n\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b011;\nparameter E = 3'b100;\nparameter F = 3'b101;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tA: begin\n\t\t\tnext_state = w ? B : A;\n\t\t\tz = 0;\n\t\tend\n\t\tB: begin\n\t\t\tnext_state = w ? C : D;\n\t\t\tz = 0;\n\t\tend\n\t\tC: begin\n\t\t\tnext_state = w ? E : D;\n\t\t\tz = 0;\n\t\tend\n\t\tD: begin\n\t\t\tnext_state = w ? F : A;\n\t\t\tz = 0;\n\t\tend\n\t\tE: begin\n\t\t\tnext_state = w ? E : D;\n\t\t\tz = 1;\n\t\tend\n\t\tF: begin\n\t\t\tnext_state = w ? C : D;\n\t\t\tz = 1;\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or negedge resetn) begin\n\tif (!resetn)\n\t\tq <= 16'b0;\n\telse begin\n\t\tif (byteena == 2'b11 || byteena == 2'b10)\n\t\t\tq[15:8] <= d[15:8];\n\t\tif (byteena == 2'b11 || byteena == 2'b01)\n\t\t\tq[7:0] <= d[7:0];\n\tend\nend\n\nendmodule", "result": "failed: 1 out of 443 samples.", "passed": false}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\t\tif (~in[i] & in[i+8]) // Check if current bit was 0 and is now 1\n\t\t\t\tpedge[i] <= 1'b1;\n\t\t\telse \n\t\t\t\tpedge[i] <= 1'b0;\n\t\tend\n\tend\n\t\nendmodule", "result": "failed: 182 out of 227 samples.", "passed": false}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "always @(posedge clock) begin\n    if (a)\n        p <= ~p;\n    else\n        q <= p;\nend\n\nendmodule", "result": "failed: 235 out of 240 samples.", "passed": false}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        for (int i = 0; i < 512; i++) begin\n            q[i] <= data[i-1] ^ data[i+1];\n        end\nend\n\nendmodule", "result": "failed: 7058 out of 7121 samples.", "passed": false}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "\n\t\n\tassign z = (A == B) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "assign out_both = {99'b0, {98:0}{in[i] & in[i+1]}};\nassign out_any = {99:{i+1<99?in[i]|in[i+1]:1'b1}}[99:1];\nassign out_different = {in[99]^in[0], {98{i}^i+1}};\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "\nalways @(posedge ena) begin\n\tif (ena)\n\t\tq <= d;\n\telse\n\t\tq <= q;\nend\nendmodule", "result": "failed: 40 out of 100 samples.", "passed": false}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "\n\t\n\tassign out = in[(sel*4+3):(sel*4)];\n\t\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "always_comb begin\n    case (sel)\n        4'b0000: out = a;\n        4'b0001: out = b;\n        4'b0010: out = c;\n        4'b0011: out = d;\n        4'b0100: out = e;\n        4'b0101: out = f;\n        4'b0110: out = g;\n        4'b0111: out = h;\n        4'b1000: out = i;\n        default: out = 16'b1;\n    endcase\nend\nendmodule", "result": "failed: 101 out of 220 samples.", "passed": false}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "assign out_or_bitwise = a | b;\nassign out_or_logical = a != 3'b0 || b != 3'b0;\nassign out_not[5:3] = ~b;\nassign out_not[2:0] = ~a;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "assign next_state = (state == 4'b0001) ? (in ? 4'b0010 : 4'b0001) :\n                    (state == 4'b0010) ? (in ? 4'b0010 : 4'b0100) :\n                    (state == 4'b0100) ? (in ? 4'b1000 : 4'b0001) :\n                    (state == 4'b1000) ? (in ? 4'b0100 : 4'b0010) : 4'b0000;\n\nassign out = (state == 4'b1000) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 349 out of 600 samples.", "passed": false}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "\n\t\n\talways @(*) begin\n\t\tif(a < b) begin\n\t\t\tmin = a;\n\t\tend else begin\n\t\t\tmin = b;\n\t\tend\n\t\t\n\t\tif(c < min) begin\n\t\t\tmin = c;\n\t\tend\n\t\t\n\t\tif(d < min) begin\n\t\t\tmin = d;\n\t\tend\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "assign out_and = a & b;\nassign out_or = a | b;\nassign out_xor = a ^ b;\nassign out_nand = ~(a & b);\nassign out_nor = ~(a | b);\nassign out_xnor = ~(a ^ b);\nassign out_anotb = a & ~b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (a & ~b & ~c & d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & b & ~c & ~d) | (a & b & c & d);\n\nendmodule", "result": "failed: 124 out of 232 samples.", "passed": false}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state;\nreg [3:0] count;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @(posedge clk) begin\n\tif (reset)\n\t\tstate <= A;\n\telse if (state == A && s)\n\t\tstate <= B;\n\telse if (state == B)\n\t\tcount <= {count[2:0], w};\n\tif (state == B && count == 4'b1010)\n\t\tz <= 1;\n\telse\n\t\tz <= 0;\nend\n\nendmodule", "result": "failed: 238 out of 1414 samples.", "passed": false}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n\tassign out = { {24{in[7]}}, in };\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "\n\t\n\treg [3:0] shift_reg;\n\n\talways @(posedge clk or negedge resetn) begin\n\t\tif (!resetn)\n\t\t\tshift_reg <= 4'b0;\n\t\telse\n\t\t\tshift_reg <= {shift_reg[2:0], in};\n\tend\n\t\n\tassign out = shift_reg[3];\n\t\nendmodule", "result": "failed: 14 out of 299 samples.", "passed": false}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @(*) begin\n    case (in)\n        4'b0001: pos <= 2'd0;\n        4'b0010: pos <= 2'd1;\n        4'b0100: pos <= 2'd2;\n        4'b1000: pos <= 2'd3;\n        default: pos <= 2'd0; // If all inputs are zero, output zero\n    endcase\nend\n\nendmodule", "result": "failed: 20 out of 94 samples.", "passed": false}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= OFF;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tOFF:\n\t\t\tif(j)\n\t\t\t\tnext_state = ON;\n\t\t\telse\n\t\t\t\tnext_state = OFF;\n\t\tON:\n\t\t\tif(k)\n\t\t\t\tnext_state = OFF;\n\t\t\telse\n\t\t\t\tnext_state = ON;\n\tendcase\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": "assign out = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "\n\tassign one = 1'b1;\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "\n\talways @(*) begin\n\t\tfor (int i = 0; i < 100; i++) begin\n\t\t\tout[i] = in[99-i];\n\t\tend\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "\n\tlogic q;\n\n\talways_ff @(posedge clk) begin\n\t\tq <= in ^ out;\n\tend\n\n\tassign out = q;\nendmodule", "result": "failed: 1 out of 100 samples.", "passed": false}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tq <= 4'b0;\n\telse if (load)\n\t\tq <= data;\n\telse if (ena)\n\t\tq <= {q[2:0], 1'b0};\nend\n\nendmodule", "result": "failed: 61 out of 427 samples.", "passed": false}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = (x2 & x1) | (~x3 & x2) | (x3 & ~x1);\nendmodule", "result": "failed: 6 out of 58 samples.", "passed": false}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "assign sum = a ^ b;\nassign cout = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "always @(*) begin\n    if (cpu_overheated)\n       shut_off_computer = 1;\n    else\n       shut_off_computer = 0;\nend\n\nalways @(*) begin\n    if (~arrived)\n       keep_driving = ~gas_tank_empty;\n    else\n       keep_driving = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\n// State transition logic\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= 2'b00; // OFF\n\telse\n\t\tstate <= next_state;\n\n// Next state logic\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (j) next_state = 2'b01; // ON else next_state = 2'b00; // OFF\n\t\t2'b01: if (k) next_state = 2'b00; // OFF else next_state = 2'b01; // ON\n\tendcase\nend\n\n// Output logic\nassign out = (state == 2'b01) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 65 out of 241 samples.", "passed": false}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "assign {w, x, y, z} = {a, b, c, d, e, f, 2'b11};\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & ~b & ~c & ~d) | (a & ~b & c & d) | (a & b & ~c & ~d) | (a & b & c & d);\nendmodule", "result": "failed: 62 out of 121 samples.", "passed": false}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] current_state, next_state;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tcurrent_state <= 2'b10; // State B\n\telse\n\t\tcurrent_state <= next_state;\n\nalways_comb\n\tcase(current_state)\n\t\t2'b10: begin // State B\n\t\t\tout = 1;\n\t\t\tnext_state = (in == 1'b0) ? 2'b01 : 2'b10; // B --in=0--> A, B --in=1--> B\n\t\tend\n\t\t2'b01: begin // State A\n\t\t\tout = 0;\n\t\t\tnext_state = (in == 1'b0) ? 2'b10 : 2'b01; // A --in=0--> B, A --in=1--> A\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "\nwire p, g1, g2;\n\nassign p = a ^ b;\nassign g1 = a & b;\nassign g2 = p & cin;\nassign cout = g1 | g2;\nassign sum = p ^ cin;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\n\tlogic xnor_out;\n\n\t// XNOR gate implementation\n\tassign xnor_out = ~(in1 ^ in2);\n\n\t// XOR gate implementation\n\tassign out = xnor_out ^ in3;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "\n    assign mux_in[0] = 1'b1; // ab=00\n    assign mux_in[1] = 1'b0; // ab=01\n    assign mux_in[2] = (c & ~d) | (~c & d); // ab=11\n    assign mux_in[3] = 1'b1; // ab=10\nendmodule", "result": "failed: 49 out of 60 samples.", "passed": false}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\nlogic z_reg;\n\nalways_ff @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= 2'b00; // State A\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb\nbegin\n\tcase(state)\n\t\t2'b00: // State A\n\t\t\tif (x == 1)\n\t\t\t\tnext_state = 2'b01; // State B\n\t\t\telse\n\t\t\t\tnext_state = 2'b00; // State A\n\t\t2'b01: // State B\n\t\t\tnext_state = 2'b01; // State B\n\tendcase\nend\n\nalways_comb\nbegin\n\tcase(state)\n\t\t2'b00: z = x; // State A\n\t\t2'b01: z = ~x; // State B\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "logic next_state;\n\nalways @(posedge clk) begin\n    q <= next_state;\nend\n\nalways @(*) begin\n    case ({a, b})\n        2'b00: next_state = 0;\n        2'b01: next_state = 1;\n        2'b10: next_state = ~q;\n        2'b11: next_state = q;\n    endcase\nend\n\nassign state = next_state;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "logic [3:0] temp;\nassign temp = {x[4], x[3], x[2], x[1]};\nalways_comb begin\n\tcase (temp)\n\t\t4'b0000, 4'b0010, 4'b0111, 4'b1000, 4'b1010, 4'b1100, 4'b1111: f = 1'b1;\n\t\tdefault: f = 1'b0;\n\tendcase\nend\nendmodule", "result": "failed: 52 out of 100 samples.", "passed": false}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "logic [4:0] count;\nlogic [2:0] state, next_state;\n\nparameter S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100, S5 = 3'b101, S6 = 3'b110, S7 = 3'b111;\n\nalways_ff @(posedge clk, posedge reset)\n\tif(reset)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\tS0: if(in == 1'b1) next_state = S1; else next_state = S0;\n\t\tS1: if(in == 1'b1) next_state = S2; else next_state = S0;\n\t\tS2: if(in == 1'b1) next_state = S3; else next_state = S0;\n\t\tS3: if(in == 1'b1) next_state = S4; else next_state = S0;\n\t\tS4: if(in == 1'b1) next_state = S5; else next_state = S0;\n\t\tS5: if(in == 1'b1) next_state = S6; else next_state = S0;\n\t\tS6: if(in == 1'b1) next_state = S7; else next_state = S1;\n\t\tS7: if(in == 1'b1) next_state = S7; else next_state = S1;\n\t\tdefault: next_state = S0;\n\tendcase\nend\n\nalways_ff @(posedge clk) begin\n\tcase(next_state)\n\t\tS1: count <= 5'd0;\n\t\tS2: count <= 5'd1;\n\t\tS3: count <= 5'd2;\n\t\tS4: count <= 5'd3;\n\t\tS5: count <= 5'd4;\n\t\tS6: count <= 5'd5;\n\t\tS7: count <= 5'd6;\n\t\tdefault: count <= count;\n\tendcase\nend\n\nassign disc = (next_state == S6);\nassign flag = (next_state == S7);\nassign err = (count == 5'd6 && in == 1'b1);\n\nendmodule", "result": "failed: 316 out of 801 samples.", "passed": false}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "reg [3:0] state;\nreg [3:0] delay;\nreg [3:0] counter;\n\nparameter SEARCH = 4'b0000;\nparameter READ_DELAY = 4'b0001;\nparameter COUNTING = 4'b0010;\nparameter WAIT_ACK = 4'b0011;\n\nalways @(posedge clk or posedge reset)\nbegin\n    if(reset)\n        state <= SEARCH;\n    else\n    begin\n        case(state)\n            SEARCH:\n                if(data == 1 && state == 4'b1100)\n                    state <= READ_DELAY;\n                else if(data == 1)\n                    state <= 4'b1100;\n                else\n                    state <= SEARCH;\n            READ_DELAY:\n                if(counter == 4'b1111)\n                    state <= COUNTING;\n                else\n                begin\n                    counter <= counter + 1;\n                    if(counter == 4'b1101)\n                        delay[counter] <= data;\n                    else\n                        delay[counter + 1] <= data;\n                end\n            COUNTING:\n                if(counter == delay + 1)\n                begin\n                    counter <= 4'b1111;\n                    state <= WAIT_ACK;\n                end\n                else\n                begin\n                    counter <= counter - 1;\n                    count <= counter;\n                end\n            WAIT_ACK:\n                if(ack == 1)\n                    state <= SEARCH;\n        endcase\n    end\nend\n\nassign counting = (state == COUNTING);\nassign done = (state == WAIT_ACK);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "reg [2:0] current_state;\nreg [2:0] next_state;\n\nparameter LOW = 3'b000, FR1 = 3'b001, FR1FR2 = 3'b010, MAX_FLOW = 3'b011;\n\nalways @(posedge clk or posedge reset)\n\tif (reset)\n\t\tcurrent_state <= LOW;\n\telse\n\t\tcurrent_state <= next_state;\n\nalways @(*) begin\n\tcase(current_state)\n\t\tLOW: begin\n\t\t\tif (&s) next_state = MAX_FLOW;\n\t\t\telse if (s == 3'b011) next_state = FR1;\n\t\t\telse if (s == 3'b001) next_state = FR1FR2;\n\t\t\telse next_state = LOW;\n\t\tend\n\t\tFR1: begin\n\t\t\tif (s == 3'b000) next_state = MAX_FLOW;\n\t\t\telse if (s == 3'b011) next_state = FR1;\n\t\t\telse if (s == 3'b001) next_state = FR1FR2;\n\t\t\telse next_state = LOW;\n\t\tend\n\t\tFR1FR2: begin\n\t\t\tif (s == 3'b000) next_state = MAX_FLOW;\n\t\t\telse if (s == 3'b011) next_state = FR1;\n\t\t\telse if (s == 3'b001) next_state = FR1FR2;\n\t\t\telse next_state = LOW;\n\t\tend\n\t\tMAX_FLOW: begin\n\t\t\tif (|s) next_state = FR1;\n\t\t\telse next_state = MAX_FLOW;\n\t\tend\n\tendcase\nend\n\nalways @(*) begin\n\tcase(current_state)\n\t\tLOW: begin\n\t\t\tfr3 = 1; fr2 = 1; fr1 = 1; dfr = 0;\n\t\tend\n\t\tFR1: begin\n\t\t\tfr3 = 0; fr2 = 0; fr1 = 1; dfr = 0;\n\t\tend\n\t\tFR1FR2: begin\n\t\t\tfr3 = 0; fr2 = 1; fr1 = 1; dfr = 1;\n\t\tend\n\t\tMAX_FLOW: begin\n\t\t\tfr3 = 0; fr2 = 0; fr1 = 0; dfr = 1;\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: 1438 out of 2040 samples.", "passed": false}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] data_reg;\nlogic [2:0] next_state;\n\nparameter START = 3'd0, DATA = 3'd1, STOP = 3'd2, IDLE = 3'd3;\n\nalways_ff @(posedge clk, posedge reset)\n\tif(reset)\n\t\tstate <= IDLE;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\tIDLE: begin\n\t\t\tnext_state = (in == 0) ? START : IDLE;\n\t\t\tdata_reg = 8'b0;\n\t\t\tdone = 0;\n\t\tend\n\t\tSTART: next_state = DATA;\n\t\tDATA: begin\n\t\t\tdata_reg = {data_reg[6:0], in};\n\t\t\tnext_state = (state == DATA && data_reg[7:0] != 8'b00000000) ? DATA : STOP;\n\t\tend\n\t\tSTOP: begin\n\t\t\tnext_state = (in == 1) ? IDLE : STOP;\n\t\t\tdone = (in == 1);\n\t\tend\n\tendcase\nend\n\noutput done;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] byte_reg;\nlogic [2:0] next_state;\n\nparameter START = 3'd0, DATA = 3'd1, STOP = 3'd2, IDLE = 3'd3;\n\nalways_ff @(posedge clk, posedge reset)\nbegin\n\tif(reset)\n\t\tstate <= IDLE;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb\nbegin\n\tcase(state)\n\t\tIDLE:\n\t\t\tif(in == 0)\n\t\t\t\tnext_state = START;\n\t\t\telse\n\t\t\t\tnext_state = IDLE;\n\t\tSTART:\n\t\t\tnext_state = DATA;\n\t\tDATA:\n\t\t\tif(byte_reg < 8'd7)\n\t\t\t\tnext_state = DATA;\n\t\t\telse if(in == 1)\n\t\t\t\tnext_state = STOP;\n\t\t\telse\n\t\t\t\tnext_state = DATA;\n\t\tSTOP:\n\t\t\tif(in == 1)\n\t\t\t\tnext_state = IDLE;\n\t\t\telse\n\t\t\t\tnext_state = STOP;\n\tdefault:\n\t\tnext_state = IDLE;\n\tendcase\nend\n\nalways_ff @(posedge clk)\nbegin\n\tcase(state)\n\t\tDATA:\n\t\t\tif(byte_reg < 8'd7)\n\t\t\t\tbyte_reg <= {in, byte_reg[7:1]};\n\t\tdefault:\n\t\t\tbyte_reg <= 8'b0;\n\tendcase\nend\n\nassign done = (state == STOP);\nassign out_byte = (state == STOP) ? byte_reg : 8'bZ;\n\nendmodule", "result": "failed: 198 out of 905 samples.", "passed": false}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "logic [6:0] ghr;\nlogic [6:0] pht_index;\nlogic [6:0] new_ghr;\nlogic [6:0] new_pht_index;\nlogic [6:0] pht_entry_addr;\nlogic [6:0] pht_entry_data[0:127];\nlogic [1:0] pht_entry;\nlogic [1:0] new_pht_entry;\nlogic [1:0] predict_state;\nlogic [1:0] train_state;\n\nalways_ff @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tghr <= 7'b0;\n\telse\n\t\tghr <= new_ghr;\nend\n\nassign pht_index = {ghr[6:0], predict_pc}[13:7] ^ predict_pc[6:0];\nassign pht_entry_addr = pht_index * 4; // 128 entries, each entry is 2 bits\n\nalways_comb\nbegin\n\tpredict_taken = 1'b0;\n\tpredict_history = ghr;\n\tpredict_state = pht_entry_data[pht_index];\n\n\tcase(predict_state)\n\t\t2'b00: predict_taken = 1'b0;\n\t\t2'b01: predict_taken = 1'b0;\n\t\t2'b10: predict_taken = 1'b1;\n\t\t2'b11: predict_taken = 1'b1;\n\tendcase\nend\n\nalways_ff @(posedge clk)\nbegin\n\tif (train_valid)\n\tbegin\n\t\tnew_pht_entry = pht_entry_data[pht_index];\n\t\tif (train_mispredicted)\n\t\t\tnew_ghr = train_history;\n\t\telse\n\t\t\tnew_ghr = {ghr[5:0], train_taken};\n\t\t\n\t\tif (train_taken == 1'b1)\n\t\t\tnew_pht_entry = new_pht_entry + 1;\n\t\telse\n\t\t\tnew_pht_entry = new_pht_entry - 1;\n\t\tnew_pht_entry = new_pht_entry > 2'b11 ? 2'b11 : new_pht_entry < 2'b00 ? 2'b00 : new_pht_entry;\n\t\tpht_entry_data[pht_index] = new_pht_entry;\n\tend\n\telse if (predict_valid)\n\t\tnew_ghr = {ghr[5:0], predict_taken};\nend\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "logic [5:0] state, next_state;\nlogic fall_count;\nlogic [4:0] fall_timer;\n\ntypedef enum logic [5:0] {\n    WALK_LEFT = 6'b000001,\n    WALK_RIGHT = 6'b000010,\n    FALL = 6'b000100,\n    DIG_LEFT = 6'b001000,\n    DIG_RIGHT = 6'b001001,\n    SPLATTER = 6'b010000\n} state_t;\n\nalways_ff @(posedge clk, posedge areset) begin\n    if (areset)\n        state <= WALK_LEFT;\n    else\n        state <= next_state;\nend\n\nalways_comb begin\n    unique case (state)\n        WALK_LEFT: begin\n            if (bump_right)\n                next_state = WALK_RIGHT;\n            else if (!ground && !dig)\n                next_state = FALL;\n            else if (dig && ground)\n                next_state = DIG_LEFT;\n            else\n                next_state = WALK_LEFT;\n        end\n        WALK_RIGHT: begin\n            if (bump_left)\n                next_state = WALK_LEFT;\n            else if (!ground && !dig)\n                next_state = FALL;\n            else if (dig && ground)\n                next_state = DIG_RIGHT;\n            else\n                next_state = WALK_RIGHT;\n        end\n        FALL: begin\n            if (ground)\n                next_state = (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n            else\n                next_state = FALL;\n        end\n        DIG_LEFT: begin\n            if (!ground)\n                next_state = FALL;\n            else if (bump_left || bump_right)\n                next_state = DIG_LEFT;\n            else\n                next_state = DIG_LEFT;\n        end\n        DIG_RIGHT: begin\n            if (!ground)\n                next_state = FALL;\n            else if (bump_left || bump_right)\n                next_state = DIG_RIGHT;\n            else\n                next_state = DIG_RIGHT;\n        end\n        SPLATTER: next_state = SPLATTER;\n    endcase\nend\n\nalways_ff @(posedge clk) begin\n    if (state == FALL && !fall_count)\n        fall_timer <= 1;\n    else if (state == FALL && fall_count)\n        fall_timer <= fall_timer + 1;\n    else\n        fall_timer <= 0;\n    \n    fall_count <= (state == FALL);\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\nassign aaah = (state == FALL);\nassign digging = (state == DIG_LEFT || state == DIG_RIGHT);\n\nalways_ff @(posedge clk) begin\n    if (fall_timer >= 20)\n        state <= SPLATTER;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [3:0] state;\nreg [3:0] pattern_reg;\n\nenum {SEARCH, SHIFT, COUNT, NOTIFY} state_d, state_q;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate_q <= SEARCH;\n\telse\n\t\tstate_q <= state_d;\nend\n\nalways @(*)\nbegin\n\tcase(state_q)\n\tSEARCH:\n\tbegin\n\t\tpattern_reg <= {pattern_reg[2:0], data};\n\t\tif(pattern_reg == 4'b1101)\n\t\t\tstate_d = SHIFT;\n\t\telse\n\t\t\tstate_d = SEARCH;\n\tend\n\tSHIFT:\n\tbegin\n\t\tshift_ena = 1;\n\t\tif(pattern_reg == 4'b1111)\n\t\t\tstate_d = COUNT;\n\t\telse\n\t\t\tstate_d = SHIFT;\n\tend\n\tCOUNT:\n\tbegin\n\t\tcounting = 1;\n\t\tshift_ena = 0;\n\t\tif(done_counting)\n\t\t\tstate_d = NOTIFY;\n\t\telse\n\t\t\tstate_d = COUNT;\n\tend\n\tNOTIFY:\n\tbegin\n\t\tdone = 1;\n\t\tcounting = 0;\n\t\tif(ack)\n\t\t\tstate_d = SEARCH;\n\t\telse\n\t\t\tstate_d = NOTIFY;\n\tend\n\tdefault:\n\t\tstate_d = SEARCH;\n\tendcase\nend\n\nendmodule", "result": "failed: 5066 out of 5069 samples.", "passed": false}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "reg [255:0] next_state;\nwire [255:0] neighbour_sum;\n\ngenvar i, j;\ngenerate\n\tfor (i = 0; i < 16; i = i + 1) begin : row_gen\n\t\tfor (j = 0; j < 16; j = j + 1) begin : col_gen\n\t\t\tassign neighbour_sum[i*16+j] = q[((i-1)%16)*16+(j-1)%16] + // Top left\n\t\t\t\t\t\t\t\t\t\t\tq[((i-1)%16)*16+j] +       // Top middle\n\t\t\t\t\t\t\t\t\t\t\tq[((i-1)%16)*16+(j+1)%16] + // Top right\n\t\t\t\t\t\t\t\t\t\t\tq[i*16+(j-1)%16] +         // Left\n\t\t\t\t\t\t\t\t\t\t\tq[i*16+(j+1)%16] +         // Right\n\t\t\t\t\t\t\t\t\t\t\tq[((i+1)%16)*16+(j-1)%16] + // Bottom left\n\t\t\t\t\t\t\t\t\t\t\tq[((i+1)%16)*16+j] +       // Bottom middle\n\t\t\t\t\t\t\t\t\t\t\tq[((i+1)%16)*16+(j+1)%16]; // Bottom right\n\n\t\t\talways @(posedge clk) begin\n\t\t\t\tif (load)\n\t\t\t\t\tq[i*16+j] <= data[i*16+j];\n\t\t\t\telse\n\t\t\t\t\tcase(neighbour_sum[i*16+j])\n\t\t\t\t\t\t0, 1: next_state[i*16+j] <= 0;\n\t\t\t\t\t\t2: next_state[i*16+j] <= q[i*16+j];\n\t\t\t\t\t\t3: next_state[i*16+j] <= 1;\n\t\t\t\t\t\tdefault: next_state[i*16+j] <= 0;\n\t\t\t\t\tendcase\n\t\t\tend\n\t\tend\n\tend\nendgenerate\n\nalways @(posedge clk) begin\n\tif (!load)\n\t\tq <= next_state;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "logic [2:0] current_state;\nlogic [2:0] next_state;\n\nparameter IDLE = 3'b000;\nparameter WALK_LEFT = 3'b001;\nparameter WALK_RIGHT = 3'b010;\nparameter FALL = 3'b011;\nparameter DIG = 3'b100;\n\nalways_ff @(posedge clk, posedge areset)\nbegin\n\tif (areset)\n\t\tcurrent_state <= IDLE;\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways_comb\nbegin\n\tcase(current_state)\n\t\tIDLE:\n\t\t\tif (ground)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse\n\t\t\t\tnext_state = FALL;\n\t\tWALK_LEFT:\n\t\t\tif (bump_left && !bump_right)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_LEFT;\n\t\tWALK_RIGHT:\n\t\t\tif (bump_right && !bump_left)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\tFALL:\n\t\t\tif (ground)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse\n\t\t\t\tnext_state = FALL;\n\t\tDIG:\n\t\t\tif (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_LEFT;\n\t\tdefault:\n\t\t\tnext_state = IDLE;\n\tendcase\nend\n\nalways_comb\nbegin\n\twalk_left = 1'b0;\n\twalk_right = 1'b0;\n\taaah = 1'b0;\n\tdigging = 1'b0;\n\tcase(current_state)\n\t\tWALK_LEFT:\n\t\t\twalk_left = 1'b1;\n\t\tWALK_RIGHT:\n\t\t\twalk_right = 1'b1;\n\t\tFALL:\n\t\t\taaah = 1'b1;\n\t\tDIG:\n\t\t\tdigging = 1'b1;\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk) begin\n    if (reset)\n        begin\n            hh <= 8'b0001_0010; // 12 in BCD\n            mm <= 8'b0000_0000;\n            ss <= 8'b0000_0000;\n            pm <= 1'b0; // AM\n        end\n    else if (ena)\n        begin\n            ss <= ss + 1;\n            if (ss == 8'd59) // 59 in BCD\n                begin\n                    ss <= 8'b0000_0000;\n                    mm <= mm + 1;\n                    if (mm == 8'd59) // 59 in BCD\n                        begin\n                            mm <= 8'b0000_0000;\n                            hh <= hh + 1;\n                            if (hh == 8'd12) // 12 in BCD\n                                begin\n                                    hh <= 8'b0001_0010; // 12 in BCD\n                                    pm <= ~pm; // Toggle AM/PM\n                                end\n                            else if (hh == 8'd23) // 11 in BCD, but we only go up to 12\n                                hh <= 8'b0000_0100; // 4 in BCD, corrected to 1 (12+1-12)\n                        end\n                end\n        end\nend\n\nendmodule", "result": "failed: 351838 out of 352413 samples.", "passed": false}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "logic [1:0] state, next_state;\nlogic falling;\n\nalways_ff @(posedge clk or posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: next_state = (bump_right) ? 2'b01 : 2'b00; // Walk Left\n\t\t2'b01: next_state = (bump_left) ? 2'b00 : 2'b01; // Walk Right\n\tendcase\n\n\tif (!ground && state != 2'b11) // Start falling\n\t\tnext_state = 2'b11;\n\telse if (ground && state == 2'b11) // Resume walking\n\t\tnext_state = (state == 2'b01) ? 2'b01 : 2'b00;\nend\n\nalways_comb begin\n\twalk_left = (state == 2'b00);\n\twalk_right = (state == 2'b01);\n\taaah = (state == 2'b11);\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tq <= 16'b0;\n\telse begin\n\t\tif (q[3:0] == 4'b1001) begin\n\t\t\tq[3:0] <= 4'b0000;\n\t\t\tena[1] <= 1;\n\t\tend else if (q[7:4] == 4'b1001 && ena[1]) begin\n\t\t\tq[7:4] <= 4'b0000;\n\t\t\tena[2] <= 1;\n\t\tend else if (q[11:8] == 4'b1001 && ena[2]) begin\n\t\t\tq[11:8] <= 4'b0000;\n\t\t\tena[3] <= 1;\n\t\tend else if (q[15:12] == 4'b1001 && ena[3]) begin\n\t\t\tq[15:12] <= 4'b0000;\n\t\tend else begin\n\t\t\tena <= 3'b000;\n\t\t\tif (q[3:0] < 4'b1001)\n\t\t\t\tq[3:0] <= q[3:0] + 1;\n\t\t\telse if (ena[1])\n\t\t\t\tq[7:4] <= q[7:4] + 1;\n\t\t\telse if (ena[2])\n\t\t\t\tq[11:8] <= q[11:8] + 1;\n\t\t\telse if (ena[3])\n\t\t\t\tq[15:12] <= q[15:12] + 1;\n\t\tend\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "\n\tassign out = (sel == 1'b0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(*) begin\n    case ({y[3:1], w})\n        4'b0000: Y2 = 0; // State A\n        4'b0001: Y2 = 0; // State A\n        4'b0010: Y2 = 1; // State B\n        4'b0011: Y2 = 1; // State B\n        4'b0100: Y2 = 1; // State C\n        4'b0101: Y2 = 1; // State C\n        4'b0110: Y2 = 1; // State D\n        4'b0111: Y2 = 0; // State D\n        4'b1000: Y2 = 1; // State E\n        4'b1001: Y2 = 1; // State E\n        4'b1010: Y2 = 0; // State F\n        4'b1011: Y2 = 1; // State F\n    endcase\nend\nendmodule", "result": "failed: 20 out of 100 samples.", "passed": false}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "assign ringer = ~vibrate_mode & ring;\nassign motor = vibrate_mode & ring;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*) begin\n\tif(a & b)\n\t\tout_alwaysblock = 1;\n\telse\n\t\tout_alwaysblock = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": "\n\tassign zero = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n\tif (a == 0)\n\t\tq <= 1;\n\telse if (q == 1)\n\t\tq <= 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\nlogic carry;\n\n// State transition logic\nalways_ff @(posedge clk, posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\n// Next state logic\nalways_comb\nbegin\n\tcase(state)\n\t\t2'b00: begin // Initial state\n\t\t\tif (x == 1'b1)\n\t\t\t\tnext_state = 2'b01; // Start inverting\n\t\t\telse\n\t\t\t\tnext_state = 2'b00; // Wait for first '1'\n\t\tend\n\t\t2'b01: begin // Invert mode\n\t\t\tif (carry == 1'b1)\n\t\t\t\tnext_state = 2'b10; // End of inversion, add 1\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // Continue inverting\n\t\tend\n\t\t2'b10: begin // Add 1 mode\n\t\t\tif (x == 1'b1)\n\t\t\t\tnext_state = 2'b10; // Carry propagation\n\t\t\telse\n\t\t\t\tnext_state = 2'b10; // Continue adding 1\n\t\tend\n\t\tdefault: next_state = 2'b00;\n\tendcase\nend\n\n// Output logic\nalways_comb\nbegin\n\tcase(state)\n\t\t2'b00: z = 1'b0; // Wait state\n\t\t2'b01: z = ~x;   // Invert the bit\n\t\t2'b10: z = x ^ carry; // Add 1 to the inverted bit\n\t\tdefault: z = 1'b0;\n\tendcase\nend\n\n// Carry logic\nalways_ff @(posedge clk, posedge areset)\nbegin\n\tif (areset)\n\t\tcarry <= 1'b0;\n\telse if (state == 2'b00 && x == 1'b1)\n\t\tcarry <= 1'b1; // Start carry after first '1'\n\telse if (state == 2'b01 && x == 1'b0)\n\t\tcarry <= 1'b1; // Propagate carry\n\telse if (state == 2'b10)\n\t\tcarry <= 1'b0; // Clear carry after addition\n\telse\n\t\tcarry <= carry; // Hold carry\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (!in) next_state = 2'b00; else next_state = 2'b01;\n\t\t2'b01: if (!in) next_state = 2'b10; else next_state = 2'b01;\n\t\t2'b10: if (!in) next_state = 2'b00; else next_state = 2'b11;\n\t\t2'b11: if (!in) next_state = 2'b10; else next_state = 2'b01;\n\tendcase\nend\n\nassign out = (state == 2'b11) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "assign out[7:0] = in[24:16];\nassign out[15:8] = in[8:0];\nassign out[23:16] = in[31:24];\nassign out[31:24] = in[15:8];\nendmodule", "result": "failed: 109 out of 110 samples.", "passed": false}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk) begin\n\tif (r)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\n\t\n\tassign z = (x ^ y) & x;\n\t\nendmodule", "result": "passed", "passed": true}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse if (ena) begin\n\t\tcase (amount)\n\t\t\t2'b00: q <= {q[62:0], q[63]};\n\t\t\t2'b01: q <= {q[55:0], 8'b0};\n\t\t\t2'b10: q <= {(q[63] & ena) ? 64'b1 : 64'b0, q[63:1]};\n\t\t\t2'b11: q <= {(q[63] & ena) ? 8'b11111111 : 8'b0, q[63:8]};\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: 1316 out of 4041 samples.", "passed": false}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn) begin\n\tif (!aresetn)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tS0: if (x == 1) next_state = S1; else next_state = S0;\n\t\tS1: if (x == 0) next_state = S2; else next_state = S0;\n\t\tS2: if (x == 1) next_state = S2; else next_state = S0;\n\tendcase\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tS0: z = 0;\n\t\tS1: z = 0;\n\t\tS2: z = x;\n\tdefault: z = 0;\n\tendcase\nend\n\nendmodule", "result": "failed: 35 out of 440 samples.", "passed": false}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "logic [2:0] state, next_state;\n\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b011;\nparameter E = 3'b100;\nparameter F = 3'b101;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tA: if(w == 0) next_state = B; else next_state = A;\n\t\tB: if(w == 0) next_state = C; else next_state = D;\n\t\tC: if(w == 0) next_state = E; else next_state = D;\n\t\tD: if(w == 0) next_state = F; else next_state = A;\n\t\tE: if(w == 1) next_state = E; else next_state = D;\n\t\tF: if(w == 1) next_state = C; else next_state = D;\n\tendcase\n\nassign z = (state == E || state == F);\n\nendmodule", "result": "failed: 10 out of 200 samples.", "passed": false}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] byte1, byte2, byte3;\nlogic [23:0] temp_out_bytes;\n\nalways_ff @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\t\tstate <= 3'b000;\n\t\tbyte1 <= 8'h00;\n\t\tbyte2 <= 8'h00;\n\t\tbyte3 <= 8'h00;\n\tend\n\telse\n\tcase(state)\n\t\t3'b000: begin\n\t\t\tif (in[3])\n\t\t\t\tstate <= 3'b001;\n\t\t\telse\n\t\t\t\tstate <= 3'b000;\n\t\tend\n\t\t3'b001: begin\n\t\t\tbyte1 <= in;\n\t\t\tstate <= 3'b010;\n\t\tend\n\t\t3'b010: begin\n\t\t\tbyte2 <= in;\n\t\t\tstate <= 3'b011;\n\t\tend\n\t\t3'b011: begin\n\t\t\tbyte3 <= in;\n\t\t\tstate <= 3'b100;\n\t\tend\n\t\t3'b100: begin\n\t\t\tstate <= 3'b000;\n\t\t\tdone <= 1'b1;\n\t\tend\n\tendcase\nend\n\nassign temp_out_bytes = {byte3, byte2, byte1};\nassign out_bytes = done ? temp_out_bytes : 24'hXXXXXXX;\nassign done = state == 3'b100;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = (y == 6'b000001) ? w : // State A\n            (y == 6'b000010) ? ~w : // State B\n            (y == 6'b001000) ? w : // State D\n            (y == 6'b010000) ? w : // State E\n            (y == 6'b100000) ? ~w; // State F\n\nassign Y3 = (y == 6'b000001) ? 0 : // State A\n            (y == 6'b000010) ? 0 : // State B\n            (y == 6'b000100) ? 1 : // State C\n            (y == 6'b001000) ? 0 : // State D\n            (y == 6'b010000) ? 0 : // State E\n            (y == 6'b100000) ? 0; // State F\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "assign outv = vec;\nassign o2 = vec[2];\nassign o1 = vec[1];\nassign o0 = vec[0];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @(*) begin\n    case ({c,d,a,b})\n        4'b0000: out <= 1'b0;\n        4'b0001: out <= 1'b1;\n        4'b0011: out <= 1'b0;\n        4'b0010: out <= 1'b1;\n        4'b0100: out <= 1'b1;\n        4'b0101: out <= 1'b0;\n        4'b0111: out <= 1'b1;\n        4'b0110: out <= 1'b0;\n        4'b1100: out <= 1'b0;\n        4'b1101: out <= 1'b1;\n        4'b1111: out <= 1'b0;\n        4'b1110: out <= 1'b1;\n        4'b1000: out <= 1'b1;\n        4'b1001: out <= 1'b0;\n        4'b1011: out <= 1'b1;\n        4'b1010: out <= 1'b0;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "assign out_hi = in[15:8];\nassign out_lo = in[7:0];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a | b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @(*) begin\n\tout_always_comb = a ^ b;\nend\n\nalways @(posedge clk) begin\n\tout_always_ff <= a ^ b;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "assign Y2 = ~y[1] & ~y[2] & w | y[1] & ~w;\nassign Y4 = ~y[1] & ~y[2] & ~y[3] & ~y[4] & ~y[5] & ~w | y[2] & ~y[3] & ~y[4] & ~y[5] & ~w | y[3] & ~y[4] & ~y[5] & w;\n\nendmodule", "result": "failed: 313 out of 600 samples.", "passed": false}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "\n\t\nalways @(*) begin\n    case (sel)\n        8'b00000000: out <= in[0];\n        8'b00000001: out <= in[1];\n        8'b00000010: out <= in[2];\n        8'b00000011: out <= in[3];\n        8'b00000100: out <= in[4];\n        8'b00000101: out <= in[5];\n        8'b00000110: out <= in[6];\n        8'b00000111: out <= in[7];\n        8'b00001000: out <= in[8];\n        8'b00001001: out <= in[9];\n        8'b00001010: out <= in[10];\n        8'b00001011: out <= in[11];\n        8'b00001100: out <= in[12];\n        8'b00001101: out <= in[13];\n        8'b00001110: out <= in[14];\n        8'b00001111: out <= in[15];\n        // ... continue for all 256 cases\n        8'b11111110: out <= in[254];\n        8'b11111111: out <= in[255];\n    endcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "\n\treg next_Q;\n\n\talways @(posedge clk) begin\n\t\tif (L)\n\t\t\tQ <= R;\n\t\telse if (E)\n\t\t\tQ <= {w, Q[Q'$left-1:0]};\n\t\telse\n\t\t\tQ <= Q;\n\tend\n\n\tassign next_Q = (L) ? R : (E) ? {w, Q[Q'$left-1:0]} : Q;\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "logic q1, q2, q3, not_q1, not_q2, not_q3;\n\nassign not_q1 = ~q1;\nassign not_q2 = ~q2;\nassign not_q3 = ~q3;\n\nalways_ff @(posedge clk) begin\n\tq1 <= x ^ q1;\n\tq2 <= x & not_q2;\n\tq3 <= x | not_q3;\nend\n\nassign z = ~(q1 ^ q2 ^ q3);\n\nendmodule", "result": "failed: 118 out of 118 samples.", "passed": false}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & b & c & d) | (~a & b & c & d) | (~a & ~b & c & d) | (~a & b & ~c & d) | (~a & b & c & ~d);\n\nendmodule", "result": "failed: 54 out of 121 samples.", "passed": false}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else\n        for (int i = 0; i < 512; i++) begin\n            case ({data[i-1], data[i], data[(i+1)%512]})\n                3'b111: q[i] <= 1'b0;\n                3'b110: q[i] <= 1'b1;\n                3'b101: q[i] <= 1'b1;\n                3'b100: q[i] <= 1'b0;\n                3'b011: q[i] <= 1'b1;\n                3'b010: q[i] <= 1'b1;\n                3'b001: q[i] <= 1'b1;\n                default: q[i] <= 1'b0;\n            endcase\n        end\nend\n\nendmodule", "result": "failed: 6220 out of 6283 samples.", "passed": false}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] current_state;\nlogic [1:0] next_state;\n\nalways_ff @(posedge clk, posedge reset) begin\n\tif (reset)\n\t\tcurrent_state <= 2'b00; // State A\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways_comb begin\n\tcase (current_state)\n\t\t2'b00: begin // State A\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = 2'b00; // Stay in A\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // Go to B\n\t\t\tout = 1'b0;\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = 2'b10; // Go to C\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // Stay in B\n\t\t\tout = 1'b0;\n\t\tend\n\t\t2'b10: begin // State C\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = 2'b00; // Go to A\n\t\t\telse\n\t\t\t\tnext_state = 2'b11; // Go to D\n\t\t\tout = 1'b0;\n\t\tend\n\t\t2'b11: begin // State D\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = 2'b10; // Go to C\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // Go to B\n\t\t\tout = 1'b1;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = 2'b00; // Reset to A\n\t\t\tout = 1'b0;\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @(*) begin\n    case (c)\n        0: q = b;\n        1: q = e;\n        2: q = a;\n        3: q = d;\n        default: q = 4'b1111; //default case, though not needed based on given inputs\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "always @(*) begin\n    if (!sel)\n        out <= a;\n    else\n        out <= b;\nend\n\nendmodule", "result": "failed: 111 out of 114 samples.", "passed": false}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "always @(posedge clk) begin\n    if (L) begin\n        Q <= r_in;\n    end else begin\n        Q <= q_in[1] ^ q_in[2];\n    end\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tout <= 0;\n\t\telse\n\t\t\tfor (int i = 0; i < 32; i++) begin\n\t\t\t\tif (in[i] == 1'b0 && in[i] !== out[i])\n\t\t\t\t\tout[i] <= 1;\n\t\t\t\telse if (in[i] == 1'b1)\n\t\t\t\t\tout[i] <= 0;\n\t\t\tend\n\tend\nendmodule", "result": "failed: 227 out of 266 samples.", "passed": false}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n    q[0] <= d[0];\n    q[1] <= d[1];\n    q[2] <= d[2];\n    q[3] <= d[3];\n    q[4] <= d[4];\n    q[5] <= d[5];\n    q[6] <= d[6];\n    q[7] <= d[7];\nend\n\nendmodule", "result": "failed: 1 out of 41 samples.", "passed": false}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "\n    wire [8:0] sum;\n    \n    assign {sum[8], s} = a + b;\n    assign overflow = (a[7] == b[7] && a[7] != sum[8]) || (a[7] != b[7] && a[7] == sum[8]);\nendmodule", "result": "failed: 59 out of 116 samples.", "passed": false}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = (state == 10'b1000000000) ? 10'b0000000001 : 10'b0;\nassign S_next = (state == 10'b0000000001) & (!d | (state == 10'b0000000100) & !d | (state == 10'b0001000000) & !d) ? 10'b0000000001 : 10'b0;\nassign S1_next = (state == 10'b0000000010) & !d ? 10'b0000000001 : 10'b0;\nassign Count_next = (state == 10'b0000000100) & d ? 10'b0000001000 : 10'b0;\nassign Wait_next = (state == 10'b0000000000) & ack ? 10'b0000000000 : 10'b0;\nassign done = (state == 10'b0000000000);\nassign counting = (state == 10'b0000001000);\nassign shift_ena = (state == 10'b0000000000 | state == 10'b0000000010 | state == 10'b0000010000 | state == 10'b0000100000 | state == 10'b0001000000);\n\nendmodule", "result": "failed: 3183 out of 3303 samples.", "passed": false}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "always_ff @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= 2'b01;\n    else if (train_valid && train_taken) begin\n        if (state < 2'b11)\n            state <= state + 1;\n        else\n            state <= 2'b11;\n    end\n    else if (train_valid && !train_taken) begin\n        if (state > 2'b00)\n            state <= state - 1;\n        else\n            state <= 2'b00;\n    end\n    else\n        state <= state;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "\nalways @(*) begin\n    case (in)\n        8'b00000001: pos <= 3'd0;\n        8'b00000010: pos <= 3'd1;\n        8'b00000100: pos <= 3'd2;\n        8'b00001000: pos <= 3'd3;\n        8'b00010000: pos <= 3'd4;\n        8'b00100000: pos <= 3'd5;\n        8'b01000000: pos <= 3'd6;\n        8'b10000000: pos <= 3'd7;\n        default: pos <= 3'd0; // If all bits are 0, return 0\n    endcase\nend\nendmodule", "result": "failed: 147 out of 346 samples.", "passed": false}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    case (scancode)\n        16'hE06B: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'hE072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'hE074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'hE075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "wire c_out;\n\nfull_adder fa0 (.a(x[0]), .b(y[0]), .cin(1'b0), .sum(sum[0]), .cout(c_out0));\nfull_adder fa1 (.a(x[1]), .b(y[1]), .cin(c_out0), .sum(sum[1]), .cout(c_out1));\nfull_adder fa2 (.a(x[2]), .b(y[2]), .cin(c_out1), .sum(sum[2]), .cout(c_out2));\nfull_adder fa3 (.a(x[3]), .b(y[3]), .cin(c_out2), .sum(sum[3]), .cout(c_out3));\n\nassign sum[4] = c_out3; // Overflow bit\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "always_ff @(posedge clk or posedge areset)\nbegin\n    if (areset)\n        predict_history <= 32'b0;\n    else if (train_mispredicted)\n        predict_history <= {train_history[30:0], train_taken};\n    else if (predict_valid)\n        predict_history <= {predict_history[30:0], predict_taken};\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "\n\twire and1_out;\n\twire and2_out;\n\n\tand and1(.a(a), .b(b), .y(and1_out));\n\tand and2(.a(c), .b(d), .y(and2_out));\n\tor or1(.a(and1_out), .b(and2_out), .y(out));\n\tnot not1(.a(out), .y(out_n));\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk) begin\n    q <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] shift_reg;\n\nalways @(posedge clk) begin\n\tif (enable)\n\t\tshift_reg <= {S, shift_reg[7:1]};\nend\n\nalways @* begin\n\tcase ({A,B,C})\n\t\t3'b000: Z = shift_reg[0];\n\t\t3'b001: Z = shift_reg[1];\n\t\t3'b010: Z = shift_reg[2];\n\t\t3'b011: Z = shift_reg[3];\n\t\t3'b100: Z = shift_reg[4];\n\t\t3'b101: Z = shift_reg[5];\n\t\t3'b110: Z = shift_reg[6];\n\t\t3'b111: Z = shift_reg[7];\n\tendcase\nend\n\nendmodule", "result": "failed: 263 out of 530 samples.", "passed": false}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "assign heater = mode & too_cold;\nassign aircon = ~mode & too_hot;\nassign fan = mode & too_cold | ~mode & too_hot | fan_on;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "assign out_sop = (a & ~b & ~c & ~d) | (~a & b & ~c & d) | (~a & ~b & ~c & ~d);\nassign out_pos = ~(a ^ b ^ c ^ d | a ^ ~b ^ ~c ^ d | ~a ^ ~b ^ ~c ^ d);\n\nendmodule", "result": "failed: 49 out of 107 samples.", "passed": false}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 32'h1;\n\telse\n\t\tq <= {q[30:0], q[31] ^ q[21] ^ q[1] ^ q[0]};\nend\n\nendmodule", "result": "failed: 400356 out of 400411 samples.", "passed": false}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & b) | (~a & c & d);\n\nendmodule", "result": "failed: 55 out of 121 samples.", "passed": false}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "assign p1y = ~(p1a & p1b & p1c & p1d);\nassign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "\n\tassign out = in[254] + in[253] + in[252] + in[251] + in[250] + in[249] + in[248] + in[247]\n\t\t\t\t + in[246] + in[245] + in[244] + in[243] + in[242] + in[241] + in[240] + in[239]\n\t\t\t\t + in[238] + in[237] + in[236] + in[235] + in[234] + in[233] + in[232] + in[231]\n\t\t\t\t + in[230] + in[229] + in[228] + in[227] + in[226] + in[225] + in[224] + in[223]\n\t\t\t\t + in[222] + in[221] + in[220] + in[219] + in[218] + in[217] + in[216] + in[215]\n\t\t\t\t + in[214] + in[213] + in[212] + in[211] + in[210] + in[209] + in[208] + in[207]\n\t\t\t\t + in[206] + in[205] + in[204] + in[203] + in[202] + in[201] + in[200] + in[199]\n\t\t\t\t + in[198] + in[197] + in[196] + in[195] + in[194] + in[193] + in[192] + in[191]\n\t\t\t\t + in[190] + in[189] + in[188] + in[187] + in[186] + in[185] + in[184] + in[183]\n\t\t\t\t + in[182] + in[181] + in[180] + in[179] + in[178] + in[177] + in[176] + in[175]\n\t\t\t\t + in[174] + in[173] + in[172] + in[171] + in[170] + in[169] + in[168] + in[167]\n\t\t\t\t + in[166] + in[165] + in[164] + in[163] + in[162] + in[161] + in[160] + in[159]\n\t\t\t\t + in[158] + in[157] + in[156] + in[155] + in[154] + in[153] + in[152] + in[151]\n\t\t\t\t + in[150] + in[149] + in[148] + in[147] + in[146] + in[145] + in[144] + in[143]\n\t\t\t\t + in[142] + in[141] + in[140] + in[139] + in[138] + in[137] + in[136] + in[135]\n\t\t\t\t + in[134] + in[133] + in[132] + in[131] + in[130] + in[129] + in[128] + in[127]\n\t\t\t\t + in[126] + in[125] + in[124] + in[123] + in[122] + in[121] + in[120] + in[119]\n\t\t\t\t + in[118] + in[117] + in[116] + in[115] + in[114] + in[113] + in[112] + in[111]\n\t\t\t\t + in[110] + in[109] + in[108] + in[107] + in[106] + in[105] + in[104] + in[103]\n\t\t\t\t + in[102] + in[101] + in[100] + in[99] + in[98] + in[97] + in[96] + in[95] + in[94]\n\t\t\t\t + in[93] + in[92] + in[91] + in[90] + in[89] + in[88] + in[87] + in[86] + in[85]\n\t\t\t\t + in[84] + in[83] + in[82] + in[81] + in[80] + in[79] + in[78] + in[77] + in[76]\n\t\t\t\t + in[75] + in[74] + in[73] + in[72] + in[71] + in[70] + in[69] + in[68] + in[67]\n\t\t\t\t + in[66] + in[65] + in[64] + in[63] + in[62] + in[61] + in[60] + in[59] + in[58]\n\t\t\t\t + in[57] + in[56] + in[55] + in[54] + in[53] + in[52] + in[51] + in[50] + in[49]\n\t\t\t\t + in[48] + in[47] + in[46] + in[45] + in[44] + in[43] + in[42] + in[41] + in[40]\n\t\t\t\t + in[39] + in[38] + in[37] + in[36] + in[35] + in[34] + in[33] + in[32] + in[31]\n\t\t\t\t + in[30] + in[29] + in[28] + in[27] + in[26] + in[25] + in[24] + in[23] + in[22]\n\t\t\t\t + in[21] + in[20] + in[19] + in[18] + in[17] + in[16] + in[15] + in[14] + in[13]\n\t\t\t\t + in[12] + in[11] + in[10] + in[9] + in[8] + in[7] + in[6] + in[5] + in[4] + in[3]\n\t\t\t\t + in[2] + in[1] + in[0];\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "assign out_both = {1'b0, in[3:1] & in[2:0]};\nassign out_any = {in[3] | in[2], in[2] | in[1], in[1] | in[0], in[0] | in[3]};\nassign out_different = {in[3] ^ in[0], in[0] ^ in[1], in[1] ^ in[2], in[2] ^ in[3]};\nendmodule", "result": "failed: 160 out of 213 samples.", "passed": false}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*) begin\n    case (a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\n\treg [3:0] count;\n\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tcount <= 4'b0;\n\t\telse if (slowena)\n\t\t\tcount <= count + 1;\n\t\tq <= count;\n\tend\n\n\tassign q = (count >= 4'b1010) ? 4'b0 : count;\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n\t\n\tassign out = in1 & ~in2;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b1; // State B\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tnext_state = (in == 1'b0) ? 2'b00 : 2'b10;\n\t\t\tout = 1'b1;\n\t\tend\n\t\t2'b00: begin // State A\n\t\t\tnext_state = (in == 1'b0) ? 2'b10 : 2'b00;\n\t\t\tout = 1'b0;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = 2'b10;\n\t\t\tout = 1'b1;\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "\n\treg q_reg;\n\talways @(posedge clk or negedge clk) begin\n\t\tif (clk == 1'b1)\n\t\t\tq_reg <= d;\n\t\telse\n\t\t\tq <= q_reg;\n\tend\nendmodule", "result": "failed: 113 out of 224 samples.", "passed": false}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a ^ b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "wire out_a1, out_b1, out_a2, out_b2, or_out, and_out;\n\nmodule A(input x, input y, output z);\n    assign z = (x ^ y) & x;\nendmodule\n\nmodule B(input x, input y, output z);\n    assign z = (x == 0 && y == 0) ? 1 : 0;\nendmodule\n\nA a1(x, y, out_a1);\nB b1(x, y, out_b1);\nA a2(x, y, out_a2);\nB b2(x, y, out_b2);\n\nassign or_out = out_a1 | out_b1;\nassign and_out = out_a2 & out_b2;\nassign z = or_out ^ and_out;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load)\n        q <= data;\n    else if (ena == 2'b01) // Rotate right by one bit\n        q <= {q[0], q[99:1]};\n    else if (ena == 2'b10) // Rotate left by one bit\n        q <= {q[98:0], q[99]};\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 10'b0;\n\telse if (q == 10'd999)\n\t\tq <= 10'b0;\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "assign out = ~in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "assign next_state = (state == 10'b0000000001) ? (in ? 10'b0000000010 : 10'b0000000001) :\n                    (state == 10'b0000000010) ? (in ? 10'b0000000100 : 10'b0000000001) :\n                    (state == 10'b0000000100) ? (in ? 10'b0000001000 : 10'b0000000001) :\n                    (state == 10'b0000001000) ? (in ? 10'b0000010000 : 10'b0000000001) :\n                    (state == 10'b0000010000) ? (in ? 10'b0000100000 : 10'b0000000001) :\n                    (state == 10'b0000100000) ? (in ? 10'b0001000000 : 10'b0000000001) :\n                    (state == 10'b0001000000) ? (in ? 10'b0010000000 : 10'b0000000001) :\n                    (state == 10'b0010000000) ? (in ? 10'b0100000000 : 10'b0000000001) :\n                    (state == 10'b0100000000) ? (in ? 10'b1000000000 : 10'b0000000001) :\n                    (state == 10'b1000000000) ? (in ? 10'b0000000001 : 10'b0000000001) : 10'b0000000001;\n\nassign out1 = &state[7:0];\nassign out2 = state[9] & ~state[8];\n\nendmodule", "result": "failed: 1215 out of 1424 samples.", "passed": false}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tcase ({j,k})\n\t\t2'b00: Q <= Q;\n\t\t2'b01: Q <= 0;\n\t\t2'b10: Q <= 1;\n\t\t2'b11: Q <= ~Q;\n\tendcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "\n\tassign out = in[0] + in[1] + in[2];\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "\n\tassign out[24] = ~a ^ a;\n\tassign out[23] = ~a ^ b;\n\tassign out[22] = ~a ^ c;\n\tassign out[21] = ~a ^ d;\n\tassign out[20] = ~a ^ e;\n\tassign out[19] = ~b ^ a;\n\tassign out[18] = ~b ^ b;\n\tassign out[17] = ~b ^ c;\n\tassign out[16] = ~b ^ d;\n\tassign out[15] = ~b ^ e;\n\tassign out[14] = ~c ^ a;\n\tassign out[13] = ~c ^ b;\n\tassign out[12] = ~c ^ c;\n\tassign out[11] = ~c ^ d;\n\tassign out[10] = ~c ^ e;\n\tassign out[9] = ~d ^ a;\n\tassign out[8] = ~d ^ b;\n\tassign out[7] = ~d ^ c;\n\tassign out[6] = ~d ^ d;\n\tassign out[5] = ~d ^ e;\n\tassign out[4] = ~e ^ a;\n\tassign out[3] = ~e ^ b;\n\tassign out[2] = ~e ^ c;\n\tassign out[1] = ~e ^ d;\n\tassign out[0] = ~e ^ e;\nendmodule", "result": "passed", "passed": true}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "logic state;\nparameter LEFT = 1'b0, RIGHT = 1'b1;\n\nalways_ff @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= LEFT;\n\telse\n\tbegin\n\t\tcase ({bump_right, bump_left})\n\t\t\t2'b00: state <= state; // No bumps, stay in current state\n\t\t\t2'b01: state <= RIGHT; // Bumped on the left\n\t\t\t2'b10: state <= LEFT;  // Bumped on the right\n\t\t\t2'b11: state <= RIGHT; // Bumped on both sides, prioritize RIGHT\n\t\tendcase\n\tend\nend\n\nassign walk_left = state == LEFT;\nassign walk_right = state == RIGHT;\n\nendmodule", "result": "failed: 9 out of 229 samples.", "passed": false}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "assign q = a & b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "\n\twire and_p1_1, and_p1_2, and_p2_1, and_p2_2;\n\n\tassign and_p1_1 = p1a & p1b & p1c;\n\tassign and_p1_2 = p1d & p1e & p1f;\n\tassign p1y = and_p1_1 | and_p1_2;\n\n\tassign and_p2_1 = p2a & p2b;\n\tassign and_p2_2 = p2c & p2d;\n\tassign p2y = and_p2_1 | and_p2_2;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "reg [2:0] next_state;\n\nalways @(posedge clk) begin\n\tcase (y)\n\t\t3'b000: begin\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state <= 3'b000;\n\t\t\telse\n\t\t\t\tnext_state <= 3'b001;\n\t\tend\n\t\t3'b001: begin\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state <= 3'b001;\n\t\t\telse\n\t\t\t\tnext_state <= 3'b100;\n\t\tend\n\t\t3'b010: begin\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state <= 3'b010;\n\t\t\telse\n\t\t\t\tnext_state <= 3'b001;\n\t\tend\n\t\t3'b011: begin\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state <= 3'b001;\n\t\t\telse\n\t\t\t\tnext_state <= 3'b010;\n\t\tend\n\t\t3'b100: begin\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state <= 3'b011;\n\t\t\telse\n\t\t\t\tnext_state <= 3'b100;\n\t\tend\n\t\tdefault: next_state <= 3'b000;\n\tendcase\n\ty <= next_state;\n\tY0 <= next_state[0];\n\tz <= (y == 3'b011 || y == 3'b100);\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n\t\n\tassign out = ~(in1 | in2);\n\t\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or posedge ar) begin\n\tif (ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @(*) begin\n    case (sel)\n        3'b000: out <= data0;\n        3'b001: out <= data1;\n        3'b010: out <= data2;\n        3'b011: out <= data3;\n        3'b100: out <= data4;\n        3'b101: out <= data5;\n        default: out <= 4'b0;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\nreg tc_reg;\n\nalways @(posedge clk) begin\n    if (load)\n        counter <= data;\n    else if (counter > 0)\n        counter <= counter - 1;\n    \n    tc_reg <= (counter == 0);\nend\n\nassign tc = tc_reg;\n\nendmodule", "result": "failed: 250 out of 7127 samples.", "passed": false}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\n\t\n\ttypedef enum logic [2:0] {S0, S1, S2, S3} state_t;\n\tstate_t state, next_state;\n\t\n\talways_ff @(posedge clk, posedge reset)\n\t\tif (reset)\n\t\t\tstate <= S0;\n\t\telse\n\t\t\tstate <= next_state;\n\t\t\t\n\talways_comb begin\n\t\tcase(state)\n\t\t\tS0: if (data == 1) next_state = S1; else next_state = S0;\n\t\t\tS1: if (data == 1) next_state = S2; else next_state = S0;\n\t\t\tS2: if (data == 0) next_state = S3; else next_state = S0;\n\t\t\tS3: if (data == 1) next_state = S3; else next_state = S0;\n\t\t\tdefault: next_state = S0;\n\t\tendcase\n\tend\n\t\n\tassign start_shifting = (state == S3);\n\t\nendmodule", "result": "failed: 263 out of 643 samples.", "passed": false}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "\n\treg [7:0] in_delayed;\n\n\talways @(posedge clk) begin\n\t\tin_delayed <= in;\n\tend\n\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\t\tif ((in[i] == 1'b1) && (in_delayed[i] == 1'b0)) \n\t\t\t\tanyedge[i] <= 1'b1;\n\t\t\telse \n\t\t\t\tanyedge[i] <= 1'b0;\n\t\tend\n\tend\nendmodule", "result": "failed: 187 out of 228 samples.", "passed": false}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0001; // Reset to 1\n\telse if (q == 4'b1010) // When count reaches 10\n\t\tq <= 4'b0001; // Reset to 1\n\telse\n\t\tq <= q + 1; // Increment by 1\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n\tif (a == 1'b0) begin\n\t\tcase (q)\n\t\t\t4'd4: q <= 4'd5;\n\t\t\t4'd5: q <= 4'd6;\n\t\t\t4'd6: q <= 4'd0;\n\t\t\tdefault: q <= 4'd1;\n\t\tendcase\n\tend\n\telse begin\n\t\tq <= 4'd4;\n\tend\nend\n\nendmodule", "result": "failed: 150 out of 245 samples.", "passed": false}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "always @(posedge clk) begin\n    if (reset)\n        q <= 5'b00001;\n    else\n        q <= {q[3], q[4] ^ q[2], q[0:0]};\nend\n\nendmodule", "result": "failed: 4276 out of 4443 samples.", "passed": false}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "always @(*) begin\n    case (do_sub)\n      0: out = a + b;\n      1: out = a - b;\n    endcase\n\n    result_is_zero = (out == 8'b0);\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "\n\t\n\tassign f = ~(x[4]^x[3]) & (x[4]|x[2]);\n\nendmodule", "result": "failed: 20 out of 100 samples.", "passed": false}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case(code)\n        8'h45: begin out = 4'b0000; valid = 1'b1; end\n        8'h16: begin out = 4'b0001; valid = 1'b1; end\n        8'h1e: begin out = 4'b0010; valid = 1'b1; end\n        8'h26: begin out = 4'b0011; valid = 1'b1; end\n        8'h25: begin out = 4'b0100; valid = 1'b1; end\n        8'h2e: begin out = 4'b0101; valid = 1'b1; end\n        8'h36: begin out = 4'b0110; valid = 1'b1; end\n        8'h3d: begin out = 4'b0111; valid = 1'b1; end\n        8'h3e: begin out = 4'b1000; valid = 1'b1; end\n        8'h46: begin out = 4'b1001; valid = 1'b1; end\n        default: begin out = 4'b0000; valid = 1'b0; end\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "assign out[0] = in[7];\nassign out[1] = in[6];\nassign out[2] = in[5];\nassign out[3] = in[4];\nassign out[4] = in[3];\nassign out[5] = in[2];\nassign out[6] = in[1];\nassign out[7] = in[0];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case ({c,b,a})\n        3'b000: out = 0;\n        3'b001: out = 0;\n        3'b010: out = 0;\n        3'b011: out = 0;\n        3'b100: out = 1;\n        3'b101: out = 1;\n        3'b110: out = 1;\n        3'b111: out = 1;\n    endcase\nend\nendmodule", "result": "failed: 58 out of 232 samples.", "passed": false}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (shift_ena)\n\t\t\tq <= {data, q[3:1]};\n\t\telse if (count_ena && q != 4'b0000)\n\t\t\tq <= q - 1;\n\tend\n\nendmodule", "result": "failed: 1900 out of 2071 samples.", "passed": false}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "\n\tassign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "reg [1:0] state;\nreg [1:0] next_state;\n\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n\tif(reset)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase(state)\n\t\tS0: if(reset) next_state = S1; else next_state = S0;\n\t\tS1: next_state = S2;\n\t\tS2: next_state = S3;\n\t\tS3: next_state = S0;\n\tendcase\nend\n\nassign shift_ena = (state == S1 || state == S2 || state == S3);\n\nendmodule", "result": "failed: 10 out of 200 samples.", "passed": false}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2)\n\t\tout_always = b;\n\telse\n\t\tout_always = a;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "assign out = b & ~c | b & c | ~b & c;\n\nendmodule", "result": "failed: 26 out of 219 samples.", "passed": false}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "logic [2:0] state, next_state;\nlogic [3:1] g;\n\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b100;\n\nalways_ff @(posedge clk, negedge resetn)\n\tif (!resetn)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tA: begin\n\t\t\tif(r[1])\n\t\t\t\tnext_state = B;\n\t\t\telse if(r[2])\n\t\t\t\tnext_state = C;\n\t\t\telse if(r[3])\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tB: begin\n\t\t\tif(r[1] && !r[2] && !r[3])\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tC: begin\n\t\t\tif(!r[1] && r[2] && !r[3])\n\t\t\t\tnext_state = C;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tD: begin\n\t\t\tif(!r[1] && !r[2] && r[3])\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tdefault: next_state = A;\n\tendcase\n\nalways_comb\n\tcase(state)\n\t\tA: begin\n\t\t\tg[1] = r[1];\n\t\t\tg[2] = r[2];\n\t\t\tg[3] = r[3];\n\t\tend\n\t\tB: begin\n\t\t\tg[1] = 1;\n\t\t\tg[2] = 0;\n\t\t\tg[3] = 0;\n\t\tend\n\t\tC: begin\n\t\t\tg[1] = 0;\n\t\t\tg[2] = 1;\n\t\t\tg[3] = 0;\n\t\tend\n\t\tD: begin\n\t\t\tg[1] = 0;\n\t\t\tg[2] = 0;\n\t\t\tg[3] = 1;\n\t\tend\n\t\tdefault: begin\n\t\t\tg[1] = 0;\n\t\t\tg[2] = 0;\n\t\t\tg[3] = 0;\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\nalways @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse if (q == 4'b1001) // 9 in binary\n\t\tq <= 4'b0; // Reset to 0\n\telse\n\t\tq <= q + 1;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [7:0] buffer;\nlogic [1:0] count;\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tcount <= 2'b00;\n\telse if (in[3])\n\t\tcount <= count + 1;\n\telse\n\t\tcount <= 2'b00;\nend\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tbuffer <= 8'b0;\n\telse if (count == 2'b10)\n\t\tbuffer <= in;\nend\n\nassign done = (count == 2'b11);\n\nendmodule", "result": "failed: 92 out of 400 samples.", "passed": false}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "assign out = (sel == 1'b0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset)\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b000: if(x) next_state = 3'b001; else next_state = 3'b000;\n\t\t3'b001: if(x) next_state = 3'b100; else next_state = 3'b001;\n\t\t3'b010: if(x) next_state = 3'b001; else next_state = 3'b010;\n\t\t3'b011: if(x) next_state = 3'b100; else next_state = 3'b010;\n\t\t3'b100: if(x) next_state = 3'b100; else next_state = 3'b011;\n\t\tdefault: next_state = 3'b000;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b001, 3'b100: z = 1;\n\t\tdefault: z = 0;\n\tendcase\nend\n\nendmodule", "result": "failed: 358 out of 1006 samples.", "passed": false}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "logic [1:0] state, next_state;\nlogic [2:0] counter;\n\nalways_ff @(posedge clk or negedge resetn)\nbegin\n\tif (!resetn)\n\t\tstate <= 2'b00; // State A\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb\nbegin\n\tcase(state)\n\t\t2'b00: // State A\n\t\t\tbegin\n\t\t\t\tf = 1;\n\t\t\t\tg = 0;\n\t\t\t\tnext_state = 2'b01; // Move to state B\n\t\t\tend\n\t\t2'b01: // State B\n\t\t\tbegin\n\t\t\t\tf = 0;\n\t\t\t\tg = 0;\n\t\t\t\tif (x == 1)\n\t\t\t\t\tnext_state = 2'b10; // Move to state C\n\t\t\t\telse\n\t\t\t\t\tnext_state = 2'b01;\n\t\t\tend\n\t\t2'b10: // State C\n\t\t\tbegin\n\t\t\t\tf = 0;\n\t\t\t\tg = 0;\n\t\t\t\tif (x == 0)\n\t\t\t\t\tnext_state = 2'b11; // Move to state D\n\t\t\t\telse\n\t\t\t\t\tnext_state = 2'b10;\n\t\t\tend\n\t\t2'b11: // State D\n\t\t\tbegin\n\t\t\t\tf = 0;\n\t\t\t\tif (counter < 2 && x == 1)\n\t\t\t\t\tnext_state = 2'b100; // Move to state E\n\t\t\t\telse\n\t\t\t\t\tnext_state = 2'b11;\n\t\t\tend\n\t\t2'b100: // State E\n\t\t\tbegin\n\t\t\t\tf = 0;\n\t\t\t\tif (y == 1)\n\t\t\t\t\tnext_state = 2'b101; // Move to state F\n\t\t\t\telse\n\t\t\t\t\tnext_state = 2'b100;\n\t\t\tend\n\t\t2'b101: // State F\n\t\t\tbegin\n\t\t\t\tf = 0;\n\t\t\t\tg = 1;\n\t\t\t\tnext_state = 2'b101;\n\t\t\tend\n\tendcase\nend\n\nalways_ff @(posedge clk or negedge resetn)\nbegin\n\tif (!resetn)\n\t\tcounter <= 3'd0;\n\telse if (state == 2'b11 || state == 2'b100)\n\t\tif (counter < 2)\n\t\t\tcounter <= counter + 1;\n\t\telse\n\t\t\tcounter <= 3'd0;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge ~clk) begin\n\tif (reset)\n\t\tq <= 8'b00110100; // Binary representation of 0x34\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "assign parity = ^in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        2'b00: begin // State A\n            if (in == 1'b0) begin\n                next_state = 2'b00; // A\n            end else begin\n                next_state = 2'b01; // B\n            end\n            out = 1'b0;\n        end\n        2'b01: begin // State B\n            if (in == 1'b0) begin\n                next_state = 2'b10; // C\n            end else begin\n                next_state = 2'b01; // B\n            end\n            out = 1'b0;\n        end\n        2'b10: begin // State C\n            if (in == 1'b0) begin\n                next_state = 2'b00; // A\n            end else begin\n                next_state = 2'b11; // D\n            end\n            out = 1'b0;\n        end\n        2'b11: begin // State D\n            if (in == 1'b0) begin\n                next_state = 2'b10; // C\n            end else begin\n                next_state = 2'b01; // B\n            end\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00; // A\n            out = 1'b0;\n        end\n    endcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "wire x_delayed;\nwire y_delayed;\n\n// Delay x and y by one clock cycle\nalways @(posedge x or posedge y) begin\n    x_delayed <= x;\n    y_delayed <= y;\nend\n\n// Output z is high if both inputs were high in the previous cycle, \n// or if x is high now and y was high last cycle.\nassign z = (x_delayed & y_delayed) | (x & y_delayed);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "logic [2:0] state, next_state;\n\n// State encoding: A=000, B=001, C=010, D=011, E=100, F=101\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b011;\nparameter E = 3'b100;\nparameter F = 3'b101;\n\n// State register\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\n// Next state logic\nalways_comb begin\n\tcase(state)\n\t\tA: if (w) next_state = B; else next_state = A;\n\t\tB: if (w) next_state = C; else next_state = D;\n\t\tC: if (w) next_state = E; else next_state = D;\n\t\tD: if (w) next_state = F; else next_state = A;\n\t\tE: if (w) next_state = E; else next_state = D;\n\t\tF: if (w) next_state = C; else next_state = D;\n\tendcase\nend\n\n// Output logic\nalways_comb\n\tcase(state)\n\t\tA: z = 1'b0;\n\t\tB: z = 1'b0;\n\t\tC: z = 1'b0;\n\t\tD: z = 1'b0;\n\t\tE: z = 1'b1;\n\t\tF: z = 1'b0;\n\t\tdefault: z = 1'b0;\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or negedge resetn) begin\n\tif (!resetn)\n\t\tq <= 16'b0;\n\telse begin\n\t\tif (byteena == 2'b11 || byteena == 2'b10)\n\t\t\tq[15:8] <= d[15:8];\n\t\tif (byteena == 2'b11 || byteena == 2'b01)\n\t\t\tq[7:0] <= d[7:0];\n\tend\nend\n\nendmodule", "result": "failed: 1 out of 443 samples.", "passed": false}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i++) begin\n\t\t\tif (~in[i] & in[i+8]) // Check for transition from 0 to 1\n\t\t\t\tpedge[i] <= 1'b1;\n\t\t\telse if (in[i])\n\t\t\t\tpedge[i] <= 1'b0;\n\t\tend\n\tend\n\t\nendmodule", "result": "failed: 208 out of 227 samples.", "passed": false}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "always @(posedge clock) begin\n    if (a)\n        p <= ~q;\n    else\n        q <= p;\nend\n\nendmodule", "result": "failed: 235 out of 240 samples.", "passed": false}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse\n\t\tfor (int i = 1; i < 511; i=i+1) \n\t\t\tq[i] <= data[i-1] ^ data[i+1];\n\t\t\t\n\t// Handling boundary conditions\n\tq[0] <= data[0] ^ 1'b0; // Left boundary condition\n\tq[511] <= data[510] ^ 1'b0; // Right boundary condition\nend\n\nendmodule", "result": "failed: 7054 out of 7121 samples.", "passed": false}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "\n\t\n\tassign z = (A == B) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "assign out_both = {99'b0, {98:0}{in[i] & in[i+1]}};\nassign out_any = {99:{i+1<99 ? in[i] | in[i+1] : in[i]}};\nassign out_different = {in[i] ^ in[(i+1)%100] for(i=0; i<100; i++)}[99:0];\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "\nalways @(ena or d) begin\n\tif (ena)\n\t\tq <= d;\n\telse\n\t\tq <= q;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "\n\tassign out = in[(sel<<2)+3:(sel<<2)];\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "always_comb begin\n    case (sel)\n        4'b0000: out = a;\n        4'b0001: out = b;\n        4'b0010: out = c;\n        4'b0011: out = d;\n        4'b0100: out = e;\n        4'b0101: out = f;\n        4'b0110: out = g;\n        4'b0111: out = h;\n        4'b1000: out = i;\n        default: out = 16'b1;\n    endcase\nend\nendmodule", "result": "failed: 101 out of 220 samples.", "passed": false}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "assign out_or_bitwise = a | b;\nassign out_or_logical = a != 3'b0 || b != 3'b0;\nassign out_not[5:3] = ~b;\nassign out_not[2:0] = ~a;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "assign next_state = (state == 4'b0001) ? (in ? 4'b0010 : 4'b0001) :\n                    (state == 4'b0010) ? (in ? 4'b0010 : 4'b0100) :\n                    (state == 4'b0100) ? (in ? 4'b1000 : 4'b0001) :\n                    (state == 4'b1000) ? (in ? 4'b0010 : 4'b0100) : 4'b0001;\n\nassign out = (state == 4'b1000) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 284 out of 600 samples.", "passed": false}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "\nalways @(*) begin\n\tif(a <= b & a <= c & a <= d)\n\t\tmin = a;\n\telse if(b <= a & b <= c & b <= d)\n\t\tmin = b;\n\telse if(c <= a & c <= b & c <= d)\n\t\tmin = c;\n\telse\n\t\tmin = d;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "assign out_and = a & b;\nassign out_or = a | b;\nassign out_xor = a ^ b;\nassign out_nand = ~(a & b);\nassign out_nor = ~(a | b);\nassign out_xnor = ~(a ^ b);\nassign out_anotb = a & ~b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (a & ~b & ~c & d) | (~a & b & ~c & d) | (a & b & c & ~d) | (a & ~b & c & ~d) | (~a & b & c & ~d) | (~a & b & ~c & ~d);\nendmodule", "result": "failed: 141 out of 232 samples.", "passed": false}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state;\nreg [2:0] count;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\t\tstate <= A;\n\t\tcount <= 0;\n\tend\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\tA:\n\t\t\t\tif (s) state <= B;\n\t\t\tB:\n\t\t\t\tif (count < 3)\n\t\t\t\t\tcount <= count + 1;\n\t\t\t\telse\n\t\t\t\t\tstate <= B;\n\t\tendcase\n\n\t\tif (state == B && count == 3)\n\t\tbegin\n\t\t\tif ({w,w,w} inside {3'b011,3'b101,3'b110})\n\t\t\t\tz <= 1;\n\t\t\telse\n\t\t\t\tz <= 0;\n\t\t\tcount <= 0;\n\t\tend\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n\tassign out = { {24{in[7]}}, in };\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "\nreg [3:0] shift_reg;\n\nalways @(posedge clk or negedge resetn)\nbegin\n\tif (!resetn)\n\t\tshift_reg <= 4'b0;\n\telse\n\t\tshift_reg <= {shift_reg[2:0], in};\nend\n\nassign out = shift_reg[3];\n\nendmodule", "result": "failed: 14 out of 299 samples.", "passed": false}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @* begin\n    case (in)\n        4'b0001: pos = 2'd0;\n        4'b0010: pos = 2'd1;\n        4'b0100: pos = 2'd2;\n        4'b1000: pos = 2'd3;\n        default: pos = 2'd0; // If none of the inputs are high, output zero\n    endcase\nend\nendmodule", "result": "failed: 20 out of 94 samples.", "passed": false}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] current_state;\nlogic [1:0] next_state;\n\n// State encoding\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset) \n\t\tcurrent_state <= OFF;\n\telse \n\t\tcurrent_state <= next_state;\n\nalways_comb\n\tcase(current_state)\n\t\tOFF: if (j) next_state = ON; else next_state = OFF;\n\t\tON: if (k) next_state = OFF; else next_state = ON;\n\tendcase\n\nassign out = (current_state == ON) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": "assign out = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "assign one = 1'b1;\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "\n\talways @(*) begin\n\t\tfor (int i = 0; i < 100; i++) begin\n\t\t\tout[i] = in[99-i];\n\t\tend\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "logic d;\n\nalways_ff @(posedge clk) begin\n    out <= d;\nend\n\nassign d = ^{in, out};\n\nendmodule", "result": "failed: 1 out of 100 samples.", "passed": false}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tq <= 4'b0;\n\telse if (load)\n\t\tq <= data;\n\telse if (ena)\n\t\tq <= {q[2:0], 1'b0};\nend\n\nendmodule", "result": "failed: 61 out of 427 samples.", "passed": false}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = (x2 & x1) | (~x3 & x2) | (~x3 & x1);\nendmodule", "result": "failed: 4 out of 58 samples.", "passed": false}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\tq <= 8'b0;\n\t\telse\n\t\t\tq <= d;\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "assign sum = a ^ b;\nassign cout = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "always @(*) begin\n    if (cpu_overheated)\n       shut_off_computer = 1;\n    else\n       shut_off_computer = 0;\nend\n\nalways @(*) begin\n    if (~arrived)\n       keep_driving = ~gas_tank_empty;\n    else\n       keep_driving = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= 2'b00; // OFF\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (j) next_state = 2'b01; // ON\n\t\t       else next_state = 2'b00; // OFF\n\t\t2'b01: if (k) next_state = 2'b00; // OFF\n\t\t       else next_state = 2'b01; // ON\n\t\tdefault: next_state = 2'b00; // OFF\n\tendcase\nend\n\nassign out = (state == 2'b01) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 21 out of 241 samples.", "passed": false}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "assign w = {a[4:0], b[4]};\nassign x = {b[3:0], c, 2'b00};\nassign y = {d, e[4:0], 2'b00};\nassign z = {e[3:0], f, 2'b01};\n\nendmodule", "result": "failed: 126 out of 126 samples.", "passed": false}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & ~b & ~c & ~d) | (a & ~b & c & d) | (a & b & ~c & ~d) | (a & b & c & d);\nendmodule", "result": "failed: 62 out of 121 samples.", "passed": false}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= 2'b10; // Reset state B\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tnext_state = (in == 1'b0) ? 2'b01 : 2'b10;\n\t\t\tout = 1'b1;\n\t\tend\n\t\t2'b01: begin // State A\n\t\t\tnext_state = (in == 1'b0) ? 2'b10 : 2'b01;\n\t\t\tout = 1'b0;\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "assign {cout, sum} = a ^ b ^ cin ? {a & b | a & cin | b & cin, a ^ b ^ cin} : {a & b | a & cin | b & cin, a ^ b ^ cin};\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\n\tlogic xnor_out;\n\n\tassign xnor_out = ~(in1 ^ in2); // XNOR operation\n\tassign out = xnor_out ^ in3; // XOR operation\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "\n    assign mux_in[0] = 1'b1; // ab = 00\n    assign mux_in[1] = 1'b0; // ab = 01\n    assign mux_in[2] = d; // ab = 11\n    assign mux_in[3] = 1'b1; // ab = 10\nendmodule", "result": "failed: 60 out of 60 samples.", "passed": false}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (x == 1) next_state = 2'b01; else next_state = 2'b00;\n\t\t2'b01: next_state = 2'b01;\n\tendcase\nend\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: z = x;\n\t\t2'b01: z = ~x;\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "reg q_reg;\nwire next_q;\n\nassign state = q_reg;\n\nalways @(posedge clk) begin\n\tq_reg <= next_q;\nend\n\nassign next_q = ~(a & b) ? q_reg : ~q_reg;\n\nassign q = q_reg;\n\nendmodule", "result": "failed: 229 out of 232 samples.", "passed": false}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "logic [3:0] x_3to0;\nassign x_3to0 = {x[4], x[3], x[2], x[1]};\nalways_comb begin\n    unique case (x_3to0)\n        4'b0000, 4'b0010, 4'b0111, 4'b1001, 4'b1011, 4'b1101: f = 1;\n        default: f = 0;\n    endcase\nend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "logic [5:0] state_reg, state_next;\nlogic [5:0] input_shift_reg;\n\nenum logic [5:0] {\n    IDLE,\n    ONE,\n    TWO,\n    THREE,\n    FOUR,\n    FIVE,\n    SIX,\n    SEVEN,\n    EIGHT,\n    NINE,\n    FLAG,\n    DISCARD,\n    ERROR\n} state, next_state;\n\nalways_ff @(posedge clk or posedge reset)\nbegin\n    if (reset)\n        state <= IDLE;\n    else\n        state <= next_state;\nend\n\nalways_comb\nbegin\n    case(state)\n        IDLE: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = ONE;\n        end\n        ONE: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = TWO;\n        end\n        TWO: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = THREE;\n        end\n        THREE: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = FOUR;\n        end\n        FOUR: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = FIVE;\n        end\n        FIVE: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = SIX;\n        end\n        SIX: begin\n            if (!in)\n                next_state = DISCARD;\n            else\n                next_state = SEVEN;\n        end\n        SEVEN: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = ERROR;\n        end\n        EIGHT: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = ERROR;\n        end\n        NINE: begin\n            if (!in)\n                next_state = FLAG;\n            else\n                next_state = ERROR;\n        end\n        FLAG: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = ERROR;\n        end\n        DISCARD: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = ONE;\n        end\n        ERROR: begin\n            if (!in)\n                next_state = IDLE;\n            else\n                next_state = ERROR;\n        end\n        default: next_state = IDLE;\n    endcase\nend\n\nassign disc = (state == DISCARD);\nassign flag = (state == FLAG);\nassign err = (state == ERROR);\n\nendmodule", "result": "failed: 116 out of 801 samples.", "passed": false}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "reg [3:0] state, next_state;\nreg [3:0] delay, count_reg;\nreg [3:0] bit_shift_reg;\n\nparameter SEARCH = 4'b0000;\nparameter READ_DELAY = 4'b0001;\nparameter COUNTING = 4'b0010;\nparameter DONE = 4'b0011;\n\nalways @(posedge clk or posedge reset) begin\n\tif(reset)\n\t\tstate <= SEARCH;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase(state)\n\tSEARCH: begin\n\t\tif(data == 1 && bit_shift_reg == 4'b1101) begin\n\t\t\tnext_state = READ_DELAY;\n\t\t\tbit_shift_reg = 4'b0;\n\t\tend else begin\n\t\t\tnext_state = SEARCH;\n\t\t\tbit_shift_reg = {data, bit_shift_reg[3:1]};\n\t\tend\n\tend\n\tREAD_DELAY: begin\n\t\tif(bit_shift_reg == 4'b1101) begin\n\t\t\tdelay = {delay[2:0], data};\n\t\t\tbit_shift_reg = {data, bit_shift_reg[3:1]};\n\t\t\tif(bit_shift_reg == 4'b0000)\n\t\t\t\tnext_state = COUNTING;\n\t\t\telse\n\t\t\t\tnext_state = READ_DELAY;\n\t\tend else begin\n\t\t\tbit_shift_reg = {data, bit_shift_reg[3:1]};\n\t\t\tnext_state = READ_DELAY;\n\t\tend\n\tend\n\tCOUNTING: begin\n\t\tif(count_reg < delay)\n\t\t\tcount_reg = count_reg + 1;\n\t\telse if(count_reg == delay)\n\t\t\tcount_reg = 4'b0;\n\t\telse if(count_reg == 4'b1000)\n\t\t\tnext_state = DONE;\n\t\telse\n\t\t\tcount_reg = count_reg + 1;\n\tend\n\tDONE: begin\n\t\tif(ack == 1)\n\t\t\tnext_state = SEARCH;\n\t\telse\n\t\t\tnext_state = DONE;\n\tend\n\tdefault: next_state = SEARCH;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(state)\n\tSEARCH: begin\n\t\tcounting = 0;\n\t\tdone = 0;\n\t\tcount = 4'bZZZZ;\n\tend\n\tREAD_DELAY: begin\n\t\tcounting = 0;\n\t\tdone = 0;\n\t\tcount = 4'bZZZZ;\n\tend\n\tCOUNTING: begin\n\t\tcounting = 1;\n\t\tdone = 0;\n\t\tcount = count_reg;\n\tend\n\tDONE: begin\n\t\tcounting = 0;\n\t\tdone = 1;\n\t\tcount = 4'bZZZZ;\n\tend\n\tdefault: begin\n\t\tcounting = 0;\n\t\tdone = 0;\n\t\tcount = 4'bZZZZ;\n\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "reg [2:0] current_state, next_state;\nparameter LOW = 3'b000, FR3 = 3'b001, FR2_FR3 = 3'b010, FR1_FR2_FR3 = 3'b011, NONE = 3'b100;\n\nalways @(posedge clk or posedge reset)\n\tif (reset)\n\t\tcurrent_state <= LOW;\n\telse\n\t\tcurrent_state <= next_state;\n\nalways @* begin\n\tcase(current_state)\n\t\tLOW: if (&s) next_state = NONE; else next_state = LOW;\n\t\tNONE: if (s == 3'b001) next_state = FR3; else next_state = NONE;\n\t\tFR3: if (s == 3'b011) next_state = FR2_FR3; else next_state = NONE;\n\t\tFR2_FR3: if (s == 3'b111) next_state = FR1_FR2_FR3; else next_state = NONE;\n\t\tFR1_FR2_FR3: if (|s) next_state = FR1_FR2_FR3; else next_state = LOW;\n\tendcase\nend\n\nalways @* begin\n\tcase(current_state)\n\t\tNONE: {dfr, fr3, fr2, fr1} = 4'b1111;\n\t\tFR3: {dfr, fr3, fr2, fr1} = 4'b0011;\n\t\tFR2_FR3: {dfr, fr3, fr2, fr1} = 4'b0111;\n\t\tFR1_FR2_FR3: {dfr, fr3, fr2, fr1} = 4'b1111;\n\t\tdefault: {dfr, fr3, fr2, fr1} = 4'b0000;\n\tendcase\nend\n\nendmodule", "result": "failed: 1437 out of 2040 samples.", "passed": false}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] data_reg;\nlogic next_state_en;\n\nparameter START = 3'b000;\nparameter DATA = 3'b001;\nparameter STOP = 3'b010;\nparameter IDLE = 3'b100;\n\nalways_ff @(posedge clk, posedge reset)\n\tif(reset)\n\t\tstate <= IDLE;\n\telse if(next_state_en)\n\t\tstate <= state + 1;\n\nalways_comb begin\n\tcase(state)\n\t\tIDLE: begin\n\t\t\tnext_state_en = (in == 1'b0);\n\t\t\tstate = START;\n\t\tend\n\t\tSTART: begin\n\t\t\tnext_state_en = 1'b1;\n\t\t\tstate = DATA;\n\t\tend\n\t\tDATA: begin\n\t\t\tif(data_reg == 8'b11111111) begin\n\t\t\t\tnext_state_en = 1'b1;\n\t\t\t\tstate = STOP;\n\t\t\tend else begin\n\t\t\t\tdata_reg = {data_reg[6:0], in};\n\t\t\t\tnext_state_en = 1'b0;\n\t\t\tend\n\t\tend\n\t\tSTOP: begin\n\t\t\tnext_state_en = (in == 1'b1);\n\t\t\tstate = IDLE;\n\t\tend\n\t\tdefault: state = IDLE;\n\tendcase\nend\n\nassign done = (state == IDLE);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] data_reg;\nlogic [2:0] next_state;\n\nparameter START = 3'd0, DATA = 3'd1, STOP = 3'd2, IDLE = 3'd3;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= IDLE;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tIDLE: if (~in) next_state = START; else next_state = IDLE;\n\t\tSTART: next_state = DATA;\n\t\tDATA: begin\n\t\t\tdata_reg = {data_reg[6:0], in};\n\t\t\tif (data_reg[7])\n\t\t\t\tnext_state = STOP;\n\t\t\telse\n\t\t\t\tnext_state = DATA;\n\t\tend\n\t\tSTOP: if (in) next_state = IDLE; else next_state = STOP;\n\tdefault: next_state = IDLE;\n\tendcase\n\nassign done = (state == STOP);\nassign out_byte = data_reg;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "logic [6:0] global_history;\nlogic [6:0] pht_index;\nlogic [6:0] next_global_history;\nlogic [6:0] temp_global_history;\n\ntypedef enum logic [1:0] {BHT_STRONG_NOT_TAKEN=2'b00, BHT_WEAK_NOT_TAKEN=2'b01, BHT_WEAK_TAKEN=2'b10, BHT_STRONG_TAKEN=2'b11} bht_state_t;\n\nbht_state_t pht_table [0:127];\n\nalways_ff @(posedge clk, posedge areset)\nbegin\n\tif (areset)\n\t\tglobal_history <= 7'b0;\n\telse if (predict_valid && !train_valid)\n\t\tglobal_history <= next_global_history;\n\telse if (train_valid)\n\t\tglobal_history <= temp_global_history;\nend\n\nassign pht_index = {global_history, predict_pc}[6:0];\n\nalways_comb\nbegin\n\tpredict_taken = 1'b0;\n\tcase(pht_table[pht_index])\n\t\tBHT_STRONG_NOT_TAKEN: predict_taken = 1'b0;\n\t\tBHT_WEAK_NOT_TAKEN: predict_taken = 1'b0;\n\t\tBHT_WEAK_TAKEN: predict_taken = 1'b1;\n\t\tBHT_STRONG_TAKEN: predict_taken = 1'b1;\n\tendcase\nend\n\nalways_comb\nbegin\n\tnext_global_history = global_history ^ {predict_pc[6], predict_pc[5], predict_pc[4]};\n\ttemp_global_history = global_history ^ {train_pc[6], train_pc[5], train_pc[4]};\nend\n\nalways_ff @(posedge clk)\nbegin\n\tif (train_valid)\n\tbegin\n\t\tif (train_taken == 1'b0 && train_mispredicted == 1'b0)\n\t\t\tpht_table[pht_index] <= BHT_WEAK_NOT_TAKEN;\n\t\telse if (train_taken == 1'b0 && train_mispredicted == 1'b1)\n\t\t\tpht_table[pht_index] <= BHT_STRONG_NOT_TAKEN;\n\t\telse if (train_taken == 1'b1 && train_mispredicted == 1'b0)\n\t\t\tpht_table[pht_index] <= BHT_WEAK_TAKEN;\n\t\telse if (train_taken == 1'b1 && train_mispredicted == 1'b1)\n\t\t\tpht_table[pht_index] <= BHT_STRONG_TAKEN;\n\tend\nend\n\nassign predict_history = global_history;\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "typedef enum logic [2:0] {WALK_LEFT, WALK_RIGHT, FALL, DIG, SPLATTER} state_t;\nstate_t current_state, next_state;\n\nalways_ff @(posedge clk or posedge areset)\n\tif (areset)\n\t\tcurrent_state <= WALK_LEFT;\n\telse\n\t\tcurrent_state <= next_state;\n\nalways_comb begin\n\twalk_left = 1'b0;\n\twalk_right = 1'b0;\n\taaah = 1'b0;\n\tdigging = 1'b0;\n\tcase (current_state)\n\t\tWALK_LEFT: begin\n\t\t\twalk_left = 1'b1;\n\t\t\tif (bump_right)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_LEFT;\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\twalk_right = 1'b1;\n\t\t\tif (bump_left)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\tend\n\t\tFALL: begin\n\t\t\taaah = 1'b1;\n\t\t\tif (ground)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse\n\t\t\t\tnext_state = FALL;\n\t\tend\n\t\tDIG: begin\n\t\t\tdigging = 1'b1;\n\t\t\tif (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (ground && !dig)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse\n\t\t\t\tnext_state = DIG;\n\t\tend\n\tendcase\nend\n\nalways_ff @(posedge clk)\n\tcase (current_state)\n\t\tFALL: begin\n\t\t\tif (!ground)\n\t\t\t\t$display(\"Falling cycle count increased\");\n\t\t\telse if ($countdown == 0)\n\t\t\t\tcurrent_state <= SPLATTER;\n\t\t\telse\n\t\t\t\tcurrent_state <= WALK_LEFT;\n\t\tend\n\t\tdefault: begin\n\t\t\tif (!ground)\n\t\t\t\t$countdown <= 20;\n\t\t\telse\n\t\t\t\t$countdown <= $countdown - 1;\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [3:0] state;\nreg [3:0] pattern;\n\nalways @(posedge clk or posedge reset)\nbegin\n    if(reset)\n    begin\n        state <= 4'b0000;\n        pattern <= 4'b0000;\n    end\n    else\n    begin\n        case(state)\n            4'b0000: // Search for pattern\n                begin\n                    if(pattern == 4'b1101)\n                        state <= 4'b0001;\n                    else\n                        state <= 4'b0000;\n                    if(data)\n                        pattern <= {pattern[2:0],data};\n                    else\n                        pattern <= {pattern[2:0],data};\n                end\n            \n            4'b0001: // Shift in 4 more bits\n                begin\n                    shift_ena <= 1;\n                    if(pattern == 4'b1101 && !shift_ena)\n                        state <= 4'b0010;\n                    else if(!shift_ena)\n                        state <= 4'b0001;\n                    pattern <= {pattern[2:0],data};\n                end\n            \n            4'b0010: // Wait for counters to finish\n                begin\n                    counting <= 1;\n                    if(done_counting)\n                        state <= 4'b0011;\n                end\n            \n            4'b0011: // Notify the user\n                begin\n                    done <= 1;\n                    if(ack)\n                        state <= 4'b0100;\n                end\n            \n            4'b0100: // Acknowledged, reset pattern\n                begin\n                    done <= 0;\n                    counting <= 0;\n                    shift_ena <= 0;\n                    state <= 4'b0000;\n                    pattern <= 4'b0000;\n                end\n            \n            default: state <= 4'b0000;\n        endcase\n    end\nend\n\nendmodule", "result": "failed: 5066 out of 5069 samples.", "passed": false}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "reg [255:0] next_state;\nalways @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse\n\t\tq <= next_state;\nend\n\ngenvar i, j;\ngenerate\n\tfor (i = 0; i < 16; i = i + 1) begin : row_gen\n\t\tfor (j = 0; j < 16; j = j + 1) begin : col_gen\n\t\t\twire [3:0] neighbors;\n\t\t\tassign neighbors = q[((i - 1 + 16) % 16) * 16 + ((j - 1 + 16) % 16)] +\n\t\t\t                   q[((i - 1 + 16) % 16) * 16 + (j           + 16) % 16] +\n\t\t\t                   q[((i - 1 + 16) % 16) * 16 + ((j + 1 + 16) % 16)] +\n\t\t\t                   q[(i           + 16) % 16 * 16 + ((j - 1 + 16) % 16)] +\n\t\t\t                   q[(i           + 16) % 16 * 16 + (j           + 16) % 16] +\n\t\t\t                   q[(i           + 16) % 16 * 16 + ((j + 1 + 16) % 16)] +\n\t\t\t                   q[((i + 1 + 16) % 16) * 16 + ((j - 1 + 16) % 16)] +\n\t\t\t                   q[((i + 1 + 16) % 16) * 16 + (j           + 16) % 16] +\n\t\t\t                   q[((i + 1 + 16) % 16) * 16 + ((j + 1 + 16) % 16)];\n\n\t\t\talways @(*) begin\n\t\t\t\tcase(neighbors)\n\t\t\t\t\t2'b00: next_state[i*16+j] = 1'b0;\n\t\t\t\t\t2'b01: next_state[i*16+j] = 1'b0;\n\t\t\t\t\t2'b10: next_state[i*16+j] = q[i*16+j];\n\t\t\t\t\t2'b11: next_state[i*16+j] = 1'b1;\n\t\t\t\t\tdefault: next_state[i*16+j] = 1'b0;\n\t\t\t\tendcase\n\t\t\tend\n\t\tend\n\tend\nendgenerate\n\nendmodule", "result": "failed: 1176 out of 5023 samples.", "passed": false}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "logic [2:0] state, next_state;\nlogic falling;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 3'b001; // Initial state: Walking Left\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t3'b001: begin // Walking Left\n\t\t\twalk_left = 1;\n\t\t\twalk_right = 0;\n\t\t\taaah = ground ? 0 : 1;\n\t\t\tdigging = 0;\n\t\t\tfalling = !ground;\n\t\t\tnext_state = falling ? 3'b010 : (bump_right ? 3'b010 : (dig && !falling ? 3'b100 : 3'b001));\n\t\tend\n\t\t3'b010: begin // Walking Right\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 1;\n\t\t\taaah = ground ? 0 : 1;\n\t\t\tdigging = 0;\n\t\t\tfalling = !ground;\n\t\t\tnext_state = falling ? 3'b010 : (bump_left ? 3'b001 : (dig && !falling ? 3'b100 : 3'b010));\n\t\tend\n\t\t3'b100: begin // Digging\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 0;\n\t\t\taaah = 0;\n\t\t\tdigging = 1;\n\t\t\tfalling = !ground;\n\t\t\tnext_state = falling ? 3'b010 : (ground ? (state == 3'b001 ? 3'b001 : 3'b010) : 3'b100);\n\t\tend\n\t\tdefault: begin\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 0;\n\t\t\taaah = 0;\n\t\t\tdigging = 0;\n\t\t\tfalling = 0;\n\t\t\tnext_state = 3'b001;\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk) begin\n    if (reset)\n        {hh, mm, ss, pm} <= 8'b1100_0000; // 12:00 AM in BCD\n    else if (ena) begin\n        if (ss == 8'd59) begin\n            ss <= 8'd0;\n            if (mm == 8'd59) begin\n                mm <= 8'd0;\n                if (hh == 8'd12) begin\n                    hh <= 8'd1;\n                    pm <= ~pm;\n                end\n                else if (hh < 8'd12) begin\n                    hh <= hh + 1;\n                end\n            end\n            else\n                mm <= mm + 1;\n        end\n        else\n            ss <= ss + 1;\n    end\nend\n\nendmodule", "result": "failed: 352412 out of 352413 samples.", "passed": false}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "logic [1:0] state, next_state;\nlogic falling;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: next_state = (bump_right) ? 2'b01 : 2'b00; // Walk Left\n\t\t2'b01: next_state = (bump_left) ? 2'b00 : 2'b01; // Walk Right\n\tendcase\n\n\tif (!ground && state != 2'b11) begin // Start falling\n\t\tfalling = 1;\n\t\tnext_state = 2'b11;\n\tend else if (ground && state == 2'b11) begin // Stop falling\n\t\tfalling = 0;\n\t\tnext_state = state[1:0];\n\tend else if (falling)\n\t\tnext_state = 2'b11; // Stay in falling state\nend\n\nassign walk_left = (state == 2'b00) && !falling;\nassign walk_right = (state == 2'b01) && !falling;\nassign aaah = falling && !ground;\n\nendmodule", "result": "failed: 397 out of 441 samples.", "passed": false}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif(reset)\n\t\tq <= 16'b0;\n\telse begin\n\t\tcase(q[3:0])\n\t\t\t4'd9: begin\n\t\t\t\tq[3:0] <= 4'b0;\n\t\t\t\tena[1] <= 1;\n\t\t\t\tena[2] <= 0;\n\t\t\t\tena[3] <= 0;\n\t\t\tend\n\t\t\tdefault: begin\n\t\t\t\tq[3:0] <= q[3:0] + 1;\n\t\t\t\tena[1] <= 0;\n\t\t\t\tena[2] <= 0;\n\t\t\t\tena[3] <= 0;\n\t\t\tend\n\t\tendcase\n\t\t\n\t\tif(ena[1]) begin\n\t\t\tcase(q[7:4])\n\t\t\t\t4'd9: begin\n\t\t\t\t\tq[7:4] <= 4'b0;\n\t\t\t\t\tena[2] <= 1;\n\t\t\t\t\tena[3] <= 0;\n\t\t\t\tend\n\t\t\t\tdefault: begin\n\t\t\t\t\tq[7:4] <= q[7:4] + 1;\n\t\t\t\t\tena[2] <= 0;\n\t\t\t\t\tena[3] <= 0;\n\t\t\t\tend\n\t\t\tendcase\n\t\tend\n\t\t\n\t\tif(ena[2]) begin\n\t\t\tcase(q[11:8])\n\t\t\t\t4'd9: begin\n\t\t\t\t\tq[11:8] <= 4'b0;\n\t\t\t\t\tena[3] <= 1;\n\t\t\t\tend\n\t\t\t\tdefault: begin\n\t\t\t\t\tq[11:8] <= q[11:8] + 1;\n\t\t\t\t\tena[3] <= 0;\n\t\t\t\tend\n\t\t\tendcase\n\t\tend\n\t\t\n\t\tif(ena[3]) begin\n\t\t\tq[15:12] <= q[15:12] + 1;\n\t\tend\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "\n\tassign out = (sel) ? b : a;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(y or w) begin\n    case ({y[3:1]})\n        3'b000: Y2 = 0; // State A\n        3'b001: Y2 = w ? 0 : 1; // State B\n        3'b010: Y2 = 1; // State C\n        3'b011: Y2 = w ? 1 : 0; // State D\n        3'b100: Y2 = 1; // State E\n        3'b101: Y2 = 0; // State F\n    endcase\nend\nendmodule", "result": "failed: 29 out of 100 samples.", "passed": false}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "\n\tassign ringer = ~vibrate_mode & ring;\n\tassign motor = vibrate_mode & ring;\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*) begin\n\tif(a & b)\n\t\tout_alwaysblock = 1;\n\telse\n\t\tout_alwaysblock = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": "\n\tassign zero = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n    if (a)\n        q <= ~q;\n    else\n        q <= 1'b1;\nend\n\nendmodule", "result": "failed: 26 out of 123 samples.", "passed": false}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\nlogic carry;\n\nparameter S0 = 2'b00, S1 = 2'b01;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\nbegin\n\tcase(state)\n\t\tS0: if (~areset) next_state = S0; else next_state = S1;\n\t\tS1: next_state = S1;\n\tendcase\nend\n\nalways_comb\nbegin\n\tcase(state)\n\t\tS0: begin\n\t\t\tz = 1'b0;\n\t\t\tcarry = 1'b0;\n\t\tend\n\t\tS1: begin\n\t\t\tz = ~x ^ carry;\n\t\t\tcarry = (carry) & (x);\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (in == 1'b0) next_state = 2'b00; else next_state = 2'b01;\n\t\t2'b01: if (in == 1'b0) next_state = 2'b10; else next_state = 2'b01;\n\t\t2'b10: if (in == 1'b0) next_state = 2'b00; else next_state = 2'b11;\n\t\t2'b11: if (in == 1'b0) next_state = 2'b10; else next_state = 2'b01;\n\tendcase\nend\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: out = 1'b0;\n\t\t2'b01: out = 1'b0;\n\t\t2'b10: out = 1'b0;\n\t\t2'b11: out = 1'b1;\n\t\tdefault: out = 1'b0;\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "assign out[7:0] = in[24:16];\nassign out[15:8] = in[8:0];\nassign out[23:16] = in[31:24];\nassign out[31:24] = in[15:8];\n\nendmodule", "result": "failed: 109 out of 110 samples.", "passed": false}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "\nalways @(posedge clk) begin\n\tif (r)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "assign z = (x ^ y) & x;\nendmodule", "result": "passed", "passed": true}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse if (ena) begin\n\t\tcase (amount)\n\t\t\t2'b00: q <= {q[62:0], 1'b0}; // Shift left by 1 bit\n\t\t\t2'b01: q <= {q[55:0], 8'b0}; // Shift left by 8 bits\n\t\t\t2'b10: q <= {(q[63] == 1'b1) ? 64'b1 : 64'b0, q[62:1]}; // Arithmetic shift right by 1 bit\n\t\t\t2'b11: q <= {(q[63] == 1'b1) ? 64'b1 : 64'b0, q[55:1]}; // Arithmetic shift right by 8 bits\n\t\t\tdefault: q <= q; // No shift\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: 2960 out of 4041 samples.", "passed": false}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\nlocalparam S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn) begin\n\tif (!aresetn)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tS0: if (x == 1'b1) next_state = S1; else next_state = S0;\n\t\tS1: if (x == 1'b0) next_state = S2; else next_state = S0;\n\t\tS2: if (x == 1'b1) next_state = S2; else next_state = S0;\n\tendcase\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tS0: z = 1'b0;\n\t\tS1: z = 1'b0;\n\t\tS2: if (x == 1'b0) z = 1'b1; else z = 1'b0;\n\tendcase\nend\n\nendmodule", "result": "failed: 80 out of 440 samples.", "passed": false}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "logic [2:0] state, next_state;\nparameter A=3'b000, B=3'b001, C=3'b010, D=3'b011, E=3'b100, F=3'b110;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tA: if (w==0) next_state = B; else next_state = A;\n\t\tB: if (w==0) next_state = C; else next_state = D;\n\t\tC: if (w==0) next_state = E; else next_state = D;\n\t\tD: if (w==0) next_state = F; else next_state = A;\n\t\tE: if (w==1) next_state = E; else next_state = D;\n\t\tF: if (w==1) next_state = C; else next_state = D;\n\tendcase\n\nassign z = (state == E) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 17 out of 200 samples.", "passed": false}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "logic [7:0] byte1, byte2, byte3;\nlogic [2:0] state;\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse if (state == 3'b000 && in[3])\n\t\tstate <= 3'b001;\n\telse if (state == 3'b001)\n\t\tstate <= state + 1;\n\telse if (state == 3'b011)\n\t\tstate <= 3'b000;\nend\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tbyte1 <= 8'h00;\n\t\tbyte2 <= 8'h00;\n\t\tbyte3 <= 8'h00;\n\tend else if (state == 3'b001) begin\n\t\tbyte1 <= in;\n\t\tbyte2 <= 8'h00;\n\t\tbyte3 <= 8'h00;\n\tend else if (state == 3'b010) begin\n\t\tbyte2 <= in;\n\t\tbyte3 <= 8'h00;\n\tend else if (state == 3'b011) begin\n\t\tbyte3 <= in;\n\tend\nend\n\nassign done = state == 3'b011;\nassign out_bytes = {byte3, byte2, byte1};\n\nendmodule", "result": "failed: 490 out of 1619 samples.", "passed": false}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = ~y[0] & ~y[1] & ~y[2] & ~y[3] & w | ~y[0] & ~y[1] & ~y[2] & y[3] & ~w;\nassign Y3 = y[0] & ~w | y[1] & w | y[1] & ~w | y[2] & w;\n\nendmodule", "result": "failed: 454 out of 600 samples.", "passed": false}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "\nassign outv = vec;\nassign o2 = vec[2];\nassign o1 = vec[1];\nassign o0 = vec[0];\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @(*) begin\n    case ({c,d,a,b})\n        4'b0000: out = 0;\n        4'b0001: out = 1;\n        4'b0011: out = 0;\n        4'b0010: out = 1;\n        4'b0100: out = 1;\n        4'b0101: out = 0;\n        4'b0111: out = 1;\n        4'b0110: out = 0;\n        4'b1100: out = 0;\n        4'b1101: out = 1;\n        4'b1111: out = 0;\n        4'b1110: out = 1;\n        4'b1000: out = 1;\n        4'b1001: out = 0;\n        4'b1011: out = 1;\n        4'b1010: out = 0;\n    endcase\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "assign out_hi = in[15:8];\nassign out_lo = in[7:0];\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a | b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @(*) begin\n\tout_always_comb = a ^ b;\nend\n\nreg q;\nalways @(posedge clk) begin\n\tq <= a ^ b;\nend\n\nalways @(posedge clk) begin\n\tout_always_ff <= q;\nend\n\nendmodule", "result": "failed: 92 out of 219 samples.", "passed": false}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "assign Y2 = ~y[1] & ~y[2] & w | y[1] & ~w | y[2] & ~y[3] & ~y[4] & w | y[2] & y[3] & ~y[4] & ~w | y[4] & ~y[5] & ~y[6] & ~w | y[4] & y[5] & y[6] & w;\nassign Y4 = ~y[1] & ~y[2] & ~y[3] & ~y[4] & w | y[1] & ~w | y[2] & ~y[3] & ~y[4] & ~w | y[2] & y[3] & ~y[4] & w | y[4] & ~w;\n\nendmodule", "result": "failed: 388 out of 600 samples.", "passed": false}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "\n\t\nalways @(*) begin\n\tcase (sel)\n\t\t8'b00000000: out <= in[0];\n\t\t8'b00000001: out <= in[1];\n\t\t8'b00000010: out <= in[2];\n\t\t8'b00000011: out <= in[3];\n\t\t8'b00000100: out <= in[4];\n\t\t8'b00000101: out <= in[5];\n\t\t8'b00000110: out <= in[6];\n\t\t8'b00000111: out <= in[7];\n\t\t8'b00001000: out <= in[8];\n\t\t8'b00001001: out <= in[9];\n\t\t8'b00001010: out <= in[10];\n\t\t8'b00001011: out <= in[11];\n\t\t8'b00001100: out <= in[12];\n\t\t8'b00001101: out <= in[13];\n\t\t8'b00001110: out <= in[14];\n\t\t8'b00001111: out <= in[15];\n\t\t// ... (continue for all 256 cases)\n\t\t8'b11111110: out <= in[254];\n\t\t8'b11111111: out <= in[255];\n\t\tdefault: out <= 1'b0; // optional default case to handle invalid sel values\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tif (L)\n\t\tQ <= R;\n\telse if (E)\n\t\tQ <= Q; // Shift operation can be implemented here as needed\n\telse\n\t\tQ <= w;\nend\n\nendmodule", "result": "failed: 56 out of 200 samples.", "passed": false}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "logic q1, q2, q3;\nlogic not_q1, not_q2, not_q3;\n\nassign not_q1 = ~q1;\nassign not_q2 = ~q2;\nassign not_q3 = ~q3;\n\nalways @(posedge clk) begin\n\tq1 <= (x ^ q1);\n\tq2 <= (x & not_q2);\n\tq3 <= (x | not_q3);\nend\n\nassign z = ~(q1 ^ q2 ^ q3);\n\nendmodule", "result": "failed: 118 out of 118 samples.", "passed": false}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & (b | c | d)) | (!a & d);\n\nendmodule", "result": "failed: 35 out of 121 samples.", "passed": false}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse begin\n\t\tfor (int i = 0; i < 512; i++) begin\n\t\t\tcase ({data[i-1], data[i], data[(i+1)%512]})\n\t\t\t\t3'b111: q[i] <= 1'b0;\n\t\t\t\t3'b110: q[i] <= 1'b1;\n\t\t\t\t3'b101: q[i] <= 1'b1;\n\t\t\t\t3'b100: q[i] <= 1'b0;\n\t\t\t\t3'b011: q[i] <= 1'b1;\n\t\t\t\t3'b010: q[i] <= 1'b1;\n\t\t\t\t3'b001: q[i] <= 1'b1;\n\t\t\t\tdefault: q[i] <= 1'b0;\n\t\t\tendcase\n\t\tend\n\tend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (in == 1'b0) next_state = 2'b00; else next_state = 2'b01;\n\t\t2'b01: if (in == 1'b0) next_state = 2'b10; else next_state = 2'b01;\n\t\t2'b10: if (in == 1'b0) next_state = 2'b00; else next_state = 2'b11;\n\t\t2'b11: if (in == 1'b0) next_state = 2'b10; else next_state = 2'b01;\n\t\tdefault: next_state = 2'b00;\n\tendcase\nend\n\nassign out = (state == 2'b11) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 3 out of 230 samples.", "passed": false}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @(*) begin\n    case (c)\n        0: q = b;\n        1: q = e;\n        2: q = a;\n        3: q = d;\n        default: q = 4'b1111; // Assuming f corresponds to an invalid or error state represented as all 1's.\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "always @(*) begin\n    if (!sel)\n        out <= a;\n    else\n        out <= b;\nend\n\nendmodule", "result": "failed: 111 out of 114 samples.", "passed": false}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "always @(posedge clk) begin\n    if (L) begin\n        Q <= r_in;\n    end else begin\n        Q <= q_in ^ Q;\n    end\nend\n\nendmodule", "result": "failed: 49 out of 199 samples.", "passed": false}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "always @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tout <= 32'b0;\n\telse\n\tbegin\n\t\tfor (int i = 0; i < 32; i = i + 1)\n\t\t\tif (~in[i] && in[i+32*i])\n\t\t\t\tout[i] <= 1;\n\tend\nend\n\nendmodule", "result": "failed: 227 out of 266 samples.", "passed": false}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n    q[0] <= d[0];\n    q[1] <= d[1];\n    q[2] <= d[2];\n    q[3] <= d[3];\n    q[4] <= d[4];\n    q[5] <= d[5];\n    q[6] <= d[6];\n    q[7] <= d[7];\nend\n\nendmodule", "result": "failed: 1 out of 41 samples.", "passed": false}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "\n\twire [8:0] sum;\n\tassign {overflow, s} = a + b;\nendmodule", "result": "failed: 55 out of 116 samples.", "passed": false}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = &state; // Always false as B3_next is not part of state encoding\nassign S_next = (state == 10'b1000000000) ? (d == 1'b0) : 1'b0;\nassign S1_next = (state == 10'b1000000000) ? (d == 1'b1) : 1'b0;\nassign Count_next = (state == 10'b0000010000);\nassign Wait_next = (state == 10'b0000000010) && done_counting;\nassign done = (state == 10'b0000000010);\nassign counting = (state == 10'b0000010000);\nassign shift_ena = |{state[8], state[7], state[6], state[5], state[4]}; \n\nendmodule", "result": "failed: 3169 out of 3303 samples.", "passed": false}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "always_ff @(posedge clk or posedge areset) begin\n    if (areset)\n        state <= 2'b01;\n    else if (train_valid && train_taken)\n        state <= state == 2'b11 ? 2'b11 : state + 1;\n    else if (train_valid && !train_taken)\n        state <= state == 2'b00 ? 2'b00 : state - 1;\n    else\n        state <= state;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "\n\talways @* begin\n\t\tfor (int i = 0; i < 8; i++) begin\n\t\t\tif (in[i]) begin\n\t\t\t\tpos = i;\n\t\t\t\tbreak;\n\t\t\tend\n\t\tend\n\t\tif (!in)\n\t\t\tpos = 3'd0;\n\tend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    case(scancode)\n        16'hE06B: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'hE072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'hE074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'hE075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "\nwire c_out;\n\nassign {sum[4], sum[3:0]} = x + y;\nendmodule", "result": "passed", "passed": true}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "\nlogic [31:0] internal_history;\n\nalways_ff @(posedge clk or posedge areset)\nbegin\n    if (areset)\n        internal_history <= 32'b0;\n    else if (train_mispredicted)\n        internal_history <= {train_history[30:0], train_taken};\n    else if (predict_valid)\n        internal_history <= {internal_history[30:0], predict_taken};\nend\n\nassign predict_history = internal_history;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "\n\twire and1_out;\n\twire and2_out;\n\n\tassign and1_out = a & b;\n\tassign and2_out = c & d;\n\tassign out = and1_out | and2_out;\n\tassign out_n = ~out;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk) begin\n    q <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] shift_register;\nalways @(posedge clk) begin\n\tif (enable)\n\t\tshift_register <= {S, shift_register[7:1]};\nend\n\nwire [2:0] addr = {A, B, C};\nassign Z = shift_register[addr];\n\nendmodule", "result": "failed: 263 out of 530 samples.", "passed": false}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "assign heater = mode & too_cold;\nassign aircon = ~mode & too_hot;\nassign fan = mode & too_cold | ~mode & too_hot | fan_on;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "assign out_sop = (a & ~b & ~c & ~d) | (~a & b & ~c & d) | (~a & ~b & ~c & ~d);\nassign out_pos = ~(a ^ b ^ c ^ d) & ~(a | b & ~c | ~d) & ~(a | ~b | c | ~d);\n\nendmodule", "result": "failed: 49 out of 107 samples.", "passed": false}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 32'h1;\n\telse\n\t\tq <= {q[30:0], ^{q[31], q[21], q[1], q[0]}};\nend\n\nendmodule", "result": "failed: 400356 out of 400411 samples.", "passed": false}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (a & b) | (~a & (c & d));\n\nendmodule", "result": "failed: 55 out of 121 samples.", "passed": false}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "assign p1y = ~(p1a & p1b & p1c & p1d);\nassign p2y = ~(p2a & p2b & p2c & p2d);\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "\n\tassign out = {8{1'b0}}; // Initialize output to 0\n\talways @(*) begin\n\t\tfor (int i = 0; i < 255; i = i + 1) begin\n\t\t\tout = out + in[i];\n\t\tend\n\tend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "assign out_both = {1'b0, in[3:1] & in[2:0]};\nassign out_any = {in[3]|in[2], in[2]|in[1], in[1]|in[0], in[0]};\nassign out_different = {in[3]^in[0], in[0]^in[1], in[1]^in[2], in[2]^in[3]};\nendmodule", "result": "failed: 181 out of 213 samples.", "passed": false}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*) begin\n    case (a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'hAEE0;\n        3'b010: q = 16'h27D4;\n        3'b011: q = 16'h5A0E;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64CE;\n        3'b110: q = 16'hC526;\n        3'b111: q = 16'h2F19;\n    endcase\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tq <= 4'b0;\n\t\telse if (slowena)\n\t\t\tif (q == 4'b1001)\n\t\t\t\tq <= 4'b0;\n\t\t\telse\n\t\t\t\tq <= q + 1;\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n\tassign out = in1 & ~in2;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b1; // State B\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tnext_state = (in == 1'b0) ? 2'b00 : 2'b10;\n\t\t\tout = 1'b1;\n\t\tend\n\t\t2'b00: begin // State A\n\t\t\tnext_state = (in == 1'b0) ? 2'b10 : 2'b00;\n\t\t\tout = 1'b0;\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "\n\treg temp_q;\n\t\n\talways @(posedge clk) begin\n\t\ttemp_q <= d;\n\tend\n\t\n\talways @(negedge clk) begin\n\t\tq <= temp_q;\n\tend\n\nendmodule", "result": "failed: 113 out of 224 samples.", "passed": false}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a ^ b);\nendmodule", "result": "passed", "passed": true}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "wire a_out1, b_out1, a_out2, b_out2, or_out, and_out;\n\nmodule A (\n\tinput x,\n\tinput y,\n\toutput reg z);\n\t\n\talways @(*) \n\t\tz = (x ^ y) & x;\nendmodule\n\nmodule B (\n\tinput x,\n\tinput y,\n\toutput reg z);\n\n\talways @(*) \n\t\tz = 1;\nendmodule\n\nA a1 (.x(x), .y(y), .z(a_out1));\nB b1 (.x(x), .y(y), .z(b_out1));\nA a2 (.x(x), .y(y), .z(a_out2));\nB b2 (.x(x), .y(y), .z(b_out2));\n\nassign or_out = a_out1 | b_out1;\nassign and_out = a_out2 & b_out2;\n\nassign z = or_out ^ and_out;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse if (ena == 2'b01) // Rotate right by one bit\n\t\tq <= {q[0], q[99:1]};\n\telse if (ena == 2'b10) // Rotate left by one bit\n\t\tq <= {q[98:0], q[99]};\n\tendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 10'b0;\n\telse if (q == 10'b1111100001) // Decimal 999\n\t\tq <= 10'b0;\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "failed: 2322 out of 8027 samples.", "passed": false}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "assign out = ~in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "assign next_state = (state == 10'b0000000001) ? (in ? 10'b0000000010 : 10'b0000000001) :\n                    (state == 10'b0000000010) ? (in ? 10'b0000000100 : 10'b0000000001) :\n                    (state == 10'b0000000100) ? (in ? 10'b0000001000 : 10'b0000000001) :\n                    (state == 10'b0000001000) ? (in ? 10'b0000010000 : 10'b0000000001) :\n                    (state == 10'b0000010000) ? (in ? 10'b0000100000 : 10'b0000000001) :\n                    (state == 10'b0000100000) ? (in ? 10'b0001000000 : 10'b0000000001) :\n                    (state == 10'b0001000000) ? (in ? 10'b0010000000 : 10'b0000000001) :\n                    (state == 10'b0010000000) ? (in ? 10'b0100000000 : 10'b0000000001) :\n                    (state == 10'b0100000000) ? (in ? 10'b1000000000 : 10'b0000000001) :\n                    (state == 10'b1000000000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                    (state == 10'b1000000000) ? (in ? 10'b0000000001 : 10'b0000000001) :\n                    (state == 10'b0000000000) ? 10'b0000000000 : 10'b0000000000;\n\nassign out1 = state[7];\nassign out2 = state[9];\n\nendmodule", "result": "failed: 1261 out of 1424 samples.", "passed": false}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tcase ({j,k})\n\t\t2'b00: Q <= Q; // Q remains unchanged\n\t\t2'b01: Q <= 1'b0;\n\t\t2'b10: Q <= 1'b1;\n\t\t2'b11: Q <= ~Q; // Toggle the state\n\tendcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "\nwire w0, w1;\n\nassign w0 = in[0] | in[1] | in[2];\nassign w1 = (in[0] & ~in[1] & ~in[2]) | (~in[0] & in[1] & ~in[2]) | (~in[0] & ~in[1] & in[2]);\nassign out = {w0, w1};\n\nendmodule", "result": "failed: 105 out of 220 samples.", "passed": false}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "\n\tassign out[24] = ~a ^ a;\n\tassign out[23] = ~a ^ b;\n\tassign out[22] = ~a ^ c;\n\tassign out[21] = ~a ^ d;\n\tassign out[20] = ~a ^ e;\n\tassign out[19] = ~b ^ a;\n\tassign out[18] = ~b ^ b;\n\tassign out[17] = ~b ^ c;\n\tassign out[16] = ~b ^ d;\n\tassign out[15] = ~b ^ e;\n\tassign out[14] = ~c ^ a;\n\tassign out[13] = ~c ^ b;\n\tassign out[12] = ~c ^ c;\n\tassign out[11] = ~c ^ d;\n\tassign out[10] = ~c ^ e;\n\tassign out[9] = ~d ^ a;\n\tassign out[8] = ~d ^ b;\n\tassign out[7] = ~d ^ c;\n\tassign out[6] = ~d ^ d;\n\tassign out[5] = ~d ^ e;\n\tassign out[4] = ~e ^ a;\n\tassign out[3] = ~e ^ b;\n\tassign out[2] = ~e ^ c;\n\tassign out[1] = ~e ^ d;\n\tassign out[0] = ~e ^ e;\nendmodule", "result": "passed", "passed": true}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "logic q, next_q;\n\nalways_ff @(posedge clk, posedge areset) begin\n\tif (areset)\n\t\tq <= 0;\n\telse\n\t\tq <= next_q;\nend\n\nalways_comb begin\n\tcase(q)\n\t\t0: next_q = (bump_left) ? 1 : 0; // Walking Left -> Walking Right if bumped_left\n\t\t1: next_q = (bump_right) ? 0 : 1; // Walking Right -> Walking Left if bumped_right\n\tendcase\nend\n\nassign walk_left = ~q;\nassign walk_right = q;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "assign q = a & b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "wire and1_out;\nwire and2_out;\nwire and3_out;\nwire and4_out;\n\nassign and1_out = p1a & p1b & p1c;\nassign and2_out = p1d & p1e & p1f;\nassign and3_out = p2a & p2b;\nassign and4_out = p2c & p2d;\n\nassign p1y = and1_out | and2_out;\nassign p2y = and3_out | and4_out;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "reg [2:0] next_state;\n\nalways @(posedge clk) begin\n    case (y)\n        3'b000: if (x == 1'b0) next_state <= 3'b000; else next_state <= 3'b001;\n        3'b001: if (x == 1'b0) next_state <= 3'b001; else next_state <= 3'b100;\n        3'b010: if (x == 1'b0) next_state <= 3'b010; else next_state <= 3'b001;\n        3'b011: if (x == 1'b0) next_state <= 3'b001; else next_state <= 3'b010;\n        3'b100: if (x == 1'b0) next_state <= 3'b011; else next_state <= 3'b100;\n    endcase\n    Y0 <= next_state[0];\n    case (next_state)\n        3'b001, 3'b100: z <= 1'b1;\n        default: z <= 1'b0;\n    endcase\nend\n\nendmodule", "result": "failed: 87 out of 200 samples.", "passed": false}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "assign out = ~(in1 | in2);\nendmodule", "result": "passed", "passed": true}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or posedge ar) begin\n\tif (ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @(*) begin\n    case (sel)\n        3'b000: out = data0;\n        3'b001: out = data1;\n        3'b010: out = data2;\n        3'b011: out = data3;\n        3'b100: out = data4;\n        3'b101: out = data5;\n        default: out = 4'b0;\n    endcase\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\nreg tc_reg;\n\nalways @(posedge clk) begin\n    if (load)\n        counter <= data;\n    else if (counter > 0)\n        counter <= counter - 1;\n    \n    tc_reg <= (counter == 0);\nend\n\nassign tc = tc_reg;\n\nendmodule", "result": "failed: 250 out of 7127 samples.", "passed": false}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\n\t\n\ttypedef enum logic [1:0] {S0, S1, S2, S3} state_t;\n\tstate_t current_state, next_state;\n\t\n\talways_ff @(posedge clk, posedge reset) begin\n\t\tif (reset)\n\t\t\tcurrent_state <= S0;\n\t\telse\n\t\t\tcurrent_state <= next_state;\n\tend\n\t\n\talways_comb begin\n\t\tcase(current_state)\n\t\t\tS0: if(data == 1) next_state = S1; else next_state = S0;\n\t\t\tS1: if(data == 1) next_state = S2; else next_state = S0;\n\t\t\tS2: if(data == 0) next_state = S3; else next_state = S0;\n\t\t\tS3: if(data == 1) next_state = S3; else next_state = S0;\n\t\t\tdefault: next_state = S0;\n\t\tendcase\n\tend\n\t\n\talways_ff @(posedge clk, posedge reset) begin\n\t\tif(reset) \n\t\t\tstart_shifting <= 0;\n\t\telse if(next_state == S3) \n\t\t\tstart_shifting <= 1;\n\tend\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "\n\treg [7:0] in_prev;\n\n\talways @(posedge clk) begin\n\t\tin_prev <= in;\n\tend\n\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\t\tif (~in_prev[i] & in[i])\n\t\t\t\tanyedge[i] <= 1'b1;\n\t\t\telse\n\t\t\t\tanyedge[i] <= 1'b0;\n\t\tend\n\tend\nendmodule", "result": "failed: 187 out of 228 samples.", "passed": false}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0001; // Reset to 1\n\telse if (q == 4'b1010) // When count reaches 10 (binary for decimal 10)\n\t\tq <= 4'b0001; // Reset to 1\n\telse\n\t\tq <= q + 1; // Increment the counter\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1'b0) begin\n        case (q)\n            3'd0: q <= 3'd1;\n            3'd1: q <= 3'd4;\n            3'd4: q <= 3'd5;\n            3'd5: q <= 3'd6;\n            default: q <= 3'd0;\n        endcase\n    end else begin\n        q <= 3'd4;\n    end\nend\n\nendmodule", "result": "failed: 152 out of 245 samples.", "passed": false}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "always @(posedge clk) begin\n    if (reset)\n        q <= 5'b00001;\n    else\n        q <= {q[3], q[4]^q[2], q[0:2]};\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "always @(*) begin\n    case (do_sub)\n      0: out = a + b;\n      1: out = a - b;\n    endcase\n    \n    result_is_zero = (out == 8'b0);\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "\n\tlogic [3:0] y;\n\tassign y = {x[3], x[4], x[2], x[1]};\n\talways_comb begin\n\t\tcase (y)\n\t\t\t4'b0000, 4'b0101, 4'b1010, 4'b1111: f = 1;\n\t\t\tdefault: f = 0;\n\t\tendcase\n\tend\nendmodule", "result": "failed: 25 out of 100 samples.", "passed": false}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case (code)\n        8'h45: begin out = 4'b0000; valid = 1; end\n        8'h16: begin out = 4'b0001; valid = 1; end\n        8'h1e: begin out = 4'b0010; valid = 1; end\n        8'h26: begin out = 4'b0011; valid = 1; end\n        8'h25: begin out = 4'b0100; valid = 1; end\n        8'h2e: begin out = 4'b0101; valid = 1; end\n        8'h36: begin out = 4'b0110; valid = 1; end\n        8'h3d: begin out = 4'b0111; valid = 1; end\n        8'h3e: begin out = 4'b1000; valid = 1; end\n        8'h46: begin out = 4'b1001; valid = 1; end\n        default: begin out = 4'b0000; valid = 0; end\n    endcase\nend\nendmodule", "result": "passed", "passed": true}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "\n\tassign out[0] = in[7];\n\tassign out[1] = in[6];\n\tassign out[2] = in[5];\n\tassign out[3] = in[4];\n\tassign out[4] = in[3];\n\tassign out[5] = in[2];\n\tassign out[6] = in[1];\n\tassign out[7] = in[0];\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @(*) begin\n    case ({c,b,a})\n        3'b000: out = 0;\n        3'b001: out = 0;\n        3'b010: out = 0;\n        3'b011: out = 0;\n        3'b100: out = 1;\n        3'b101: out = 1;\n        3'b110: out = 1;\n        3'b111: out = 1;\n    endcase\nend\nendmodule", "result": "failed: 58 out of 232 samples.", "passed": false}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n    if (shift_ena)\n        q <= {data, q[3:1]};\n    else if (count_ena)\n        q <= q - 1;\nend\n\nendmodule", "result": "failed: 1886 out of 2071 samples.", "passed": false}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "\n\treg [1:0] state;\n\tparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;\n\n\talways @(posedge clk) begin\n\t\tif(reset)\n\t\t\tstate <= S0;\n\t\telse if(state == S0)\n\t\t\tstate <= S1;\n\t\telse if(state == S1)\n\t\t\tstate <= S2;\n\t\telse if(state == S2)\n\t\t\tstate <= S3;\n\t\telse if(state == S3)\n\t\t\tstate <= S0;\n\tend\n\n\tassign shift_ena = (state != S0);\n\nendmodule", "result": "failed: 95 out of 200 samples.", "passed": false}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2)\n\t\tout_always = b;\n\telse\n\t\tout_always = a;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "assign out = b & ~c | b & c | ~b & c;\n\nendmodule", "result": "failed: 26 out of 219 samples.", "passed": false}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "logic [2:0] state, next_state;\nparameter A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011;\n\nalways_ff @(posedge clk or negedge resetn)\n\tif (!resetn)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\tA: begin\n\t\t\tif (r[1]) next_state = B;\n\t\t\telse if (r[2]) next_state = C;\n\t\t\telse if (r[3]) next_state = D;\n\t\t\telse next_state = A;\n\t\tend\n\t\tB: begin\n\t\t\tif (r[1]) next_state = B;\n\t\t\telse next_state = A;\n\t\tend\n\t\tC: begin\n\t\t\tif (r[2]) next_state = C;\n\t\t\telse next_state = A;\n\t\tend\n\t\tD: next_state = A;\n\tendcase\nend\n\nassign g[1] = (state == B);\nassign g[2] = (state == C);\nassign g[3] = (state == D);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset)\n\t\tq <= 4'b0;\n\telse if (q == 4'b1001) // 9 in binary\n\t\tq <= 4'b0; // reset to 0\n\telse\n\t\tq <= q + 1;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] byte_count;\n\nalways_ff @(posedge clk) begin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse if (in[3])\n\t\tcase(state)\n\t\t\t3'b000: begin state <= 3'b001; byte_count <= in; end\n\t\t\t3'b001: begin state <= 3'b010; byte_count <= in; end\n\t\t\t3'b010: begin state <= 3'b000; byte_count <= in; done <= 1; end\n\t\tendcase\n\telse\n\t\tstate <= 3'b000;\nend\n\nassign done = (state == 3'b010) ? 1 : 0;\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "assign out = (sel == 0) ? a : b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b000: if (x == 1) next_state = 3'b001; else next_state = 3'b000;\n\t\t3'b001: if (x == 1) next_state = 3'b100; else next_state = 3'b001;\n\t\t3'b010: if (x == 1) next_state = 3'b001; else next_state = 3'b010;\n\t\t3'b011: if (x == 1) next_state = 3'b100; else next_state = 3'b010;\n\t\t3'b100: if (x == 1) next_state = 3'b100; else next_state = 3'b011;\n\t\tdefault: next_state = 3'b000;\n\tendcase\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b001, 3'b100: z = 1;\n\t\tdefault: z = 0;\n\tendcase\nend\n\nendmodule", "result": "failed: 358 out of 1006 samples.", "passed": false}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "logic [1:0] counter;\nlogic [2:0] state;\nlogic [2:0] next_state;\n\nparameter A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\nalways_ff @(posedge clk or negedge resetn) begin\n\tif (!resetn)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb begin\n\tcase(state)\n\t\tA: next_state = (resetn) ? B : A;\n\t\tB: next_state = (x == 1) ? C : B;\n\t\tC: next_state = (x == 0) ? D : B;\n\t\tD: next_state = (x == 1) ? E : B;\n\t\tE: next_state = (counter < 2 && y == 1) ? F : E;\n\t\tF: next_state = F;\n\tendcase\nend\n\nalways_ff @(posedge clk or negedge resetn) begin\n\tif (!resetn) begin\n\t\tf <= 0;\n\t\tg <= 0;\n\t\tcounter <= 0;\n\tend else begin\n\t\tcase(state)\n\t\t\tB: f <= 1;\n\t\t\tdefault: f <= 0;\n\t\tendcase\n\t\t\n\t\tcase(state)\n\t\t\tE: begin\n\t\t\t\tif (y == 1) counter <= counter + 1;\n\t\t\t\tg <= 0;\n\t\t\tend\n\t\t\tF: g <= 1;\n\t\t\tdefault: g <= 0;\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge ~clk) begin\n\tif (reset)\n\t\tq <= 8'b00110100; // Binary for 0x34\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "\n\tassign parity = ^in;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        2'b00: // State A\n            if (in == 1'b0) begin\n                next_state = 2'b00;\n                out = 1'b0;\n            end else begin\n                next_state = 2'b01;\n                out = 1'b0;\n            end\n        2'b01: // State B\n            if (in == 1'b0) begin\n                next_state = 2'b10;\n                out = 1'b0;\n            end else begin\n                next_state = 2'b01;\n                out = 1'b0;\n            end\n        2'b10: // State C\n            if (in == 1'b0) begin\n                next_state = 2'b00;\n                out = 1'b0;\n            end else begin\n                next_state = 2'b11;\n                out = 1'b0;\n            end\n        2'b11: // State D\n            if (in == 1'b0) begin\n                next_state = 2'b10;\n                out = 1'b1;\n            end else begin\n                next_state = 2'b01;\n                out = 1'b1;\n            end\n        default: \n            next_state = 2'b00;\n            out = 1'b0;\n    endcase\nend\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "reg z;\nalways @(x or y) begin\n\tif (x & y)\n\t\tz <= 1'b1;\n\telse if (x)\n\t\tz <= 1'b0;\n\telse if (y)\n\t\tz <= 1'b0;\n\telse\n\t\tz <= 1'b1;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "logic [2:0] state, next_state;\n\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b011;\nparameter E = 3'b100;\nparameter F = 3'b101;\n\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\tA: next_state = w ? B : A;\n\t\tB: next_state = w ? C : D;\n\t\tC: next_state = w ? E : D;\n\t\tD: next_state = w ? F : A;\n\t\tE: next_state = w ? E : D;\n\t\tF: next_state = w ? C : D;\n\tdefault: next_state = A;\n\tendcase\n\nalways_comb\n\tcase(state)\n\t\tA: z = 1'b0;\n\t\tB: z = 1'b0;\n\t\tC: z = 1'b0;\n\t\tD: z = 1'b0;\n\t\tE: z = 1'b1;\n\t\tF: z = 1'b0;\n\tdefault: z = 1'b0;\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or negedge resetn) begin\n\tif (!resetn)\n\t\tq <= 16'b0;\n\telse begin\n\t\tif (byteena == 2'b11 || byteena == 2'b01)\n\t\t\tq[15:8] <= d[15:8];\n\t\tif (byteena == 2'b11 || byteena == 2'b10)\n\t\t\tq[7:0] <= d[7:0];\n\tend\nend\n\nendmodule", "result": "failed: 173 out of 443 samples.", "passed": false}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "\n\treg [7:0] in_prev;\n\n\talways @(posedge clk) begin\n\t\tin_prev <= in;\n\tend\n\n\talways @(posedge clk) begin\n\t\tfor (int i = 0; i < 8; i++) begin\n\t\t\tif (~in_prev[i] & in[i])\n\t\t\t\tpedge[i] <= 1'b1;\n\t\t\telse\n\t\t\t\tpedge[i] <= 1'b0;\n\t\tend\n\tend\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "always @(posedge clock) begin\n    if (a)\n        p <= ~q;\n    else\n        p <= 0;\n    q <= p;\nend\n\nendmodule", "result": "failed: 199 out of 240 samples.", "passed": false}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load)\n\t\tq <= data;\n\telse\n\t\tfor (int i = 0; i < 512; i++) begin\n\t\t\tq[i] <= (i == 0) ? data[1] ^ data[511] : data[i-1] ^ data[i+1];\n\t\tend\nend\n\nendmodule", "result": "failed: 7058 out of 7121 samples.", "passed": false}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "\n\tassign z = (A == B) ? 1'b1 : 1'b0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "assign out_both = {99'b0, {98:0} & {<<{1{in}}}};\nassign out_any = {{99:1} | {>>{1{in}}}, 1'b0};\nassign out_different = {99:0} ^ {<<{1{in}}};\n\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "\nalways @(posedge ena) begin\n\tif (ena)\n\t\tq <= d;\n\telse\n\t\tq <= q;\nend\nendmodule", "result": "failed: 40 out of 100 samples.", "passed": false}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "\n\t\n\tassign out = in[(sel*4+3):(sel*4)];\n\t\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "always_comb begin\n    case (sel)\n        4'b0000: out = a;\n        4'b0001: out = b;\n        4'b0010: out = c;\n        4'b0011: out = d;\n        4'b0100: out = e;\n        4'b0101: out = f;\n        4'b0110: out = g;\n        4'b0111: out = h;\n        4'b1000: out = i;\n        default: out = 16'b1;\n    endcase\nend\nendmodule", "result": "failed: 101 out of 220 samples.", "passed": false}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "assign out_or_bitwise = a | b;\nassign out_or_logical = a != 3'b0 || b != 3'b0;\nassign out_not[5:3] = ~b;\nassign out_not[2:0] = ~a;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "assign next_state = (state == 4'b0001) ? (in ? 4'b0010 : 4'b0001) :\n                    (state == 4'b0010) ? (in ? 4'b0010 : 4'b0100) :\n                    (state == 4'b0100) ? (in ? 4'b1000 : 4'b0001) :\n                    (state == 4'b1000) ? (in ? 4'b0010 : 4'b0100) : 4'b0001;\n\nassign out = (state == 4'b1000) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 284 out of 600 samples.", "passed": false}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "\n\t\n\talways @(*) begin\n\t\tif(a <= b & a <= c & a <= d)\n\t\t\tmin = a;\n\t\telse if(b <= c & b <= d)\n\t\t\tmin = b;\n\t\telse if(c <= d)\n\t\t\tmin = c;\n\t\telse\n\t\t\tmin = d;\n\tend\n\t\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "assign out_and = a & b;\nassign out_or = a | b;\nassign out_xor = a ^ b;\nassign out_nand = ~(a & b);\nassign out_nor = ~(a | b);\nassign out_xnor = ~(a ^ b);\nassign out_anotb = a & ~b;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (a & ~b & ~c & d) | (~a & b & ~c & d) | (a & b & c & ~d) | (~a & ~b & c & d) | (~a & b & c & ~d);\nendmodule", "result": "failed: 150 out of 232 samples.", "passed": false}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state;\nreg [3:0] w_counter;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= A;\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\tA: if (s) state <= B;\n\t\t\tB: begin\n\t\t\t\t\tw_counter <= {w_counter[2:0], w};\n\t\t\t\t\tif (w_counter == 4'b1010 || w_counter == 4'b0110 || w_counter == 4'b1100)\n\t\t\t\t\t\tz <= 1;\n\t\t\t\t\telse\n\t\t\t\t\t\tz <= 0;\n\t\t\t\t\tstate <= B;\n\t\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: 422 out of 1414 samples.", "passed": false}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n\tassign out = { {24{in[7]}}, in };\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "\n\t\n\treg [3:0] shift_reg;\n\n\talways @(posedge clk or negedge resetn) begin\n\t\tif (!resetn)\n\t\t\tshift_reg <= 4'b0;\n\t\telse\n\t\t\tshift_reg <= {shift_reg[2:0], in};\n\tend\n\t\n\tassign out = shift_reg[3];\n\nendmodule", "result": "failed: 14 out of 299 samples.", "passed": false}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @* begin\n    case (in)\n        4'b0001: pos = 2'd0;\n        4'b0010: pos = 2'd1;\n        4'b0100: pos = 2'd2;\n        4'b1000: pos = 2'd3;\n        default: pos = 2'd0; // If all inputs are 0, output 0 as specified.\n    endcase\nend\n\nendmodule", "result": "failed: 20 out of 94 samples.", "passed": false}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge areset)\n\tif (areset)\n\t\tstate <= OFF;\n\telse\n\t\tstate <= next_state;\n\nalways @(*) begin\n\tcase(state)\n\t\tOFF: if(j) next_state = ON; else next_state = OFF;\n\t\tON: if(k) next_state = OFF; else next_state = ON;\n\tendcase\nend\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": "assign out = 0;\nendmodule", "result": "passed", "passed": true}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "assign one = 1'b1;\nendmodule", "result": "passed", "passed": true}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "always @(*) begin\n    for (int i = 0; i < 100; i++) begin\n        out[i] = in[99-i];\n    end\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "logic q;\n\nalways_ff @(posedge clk) begin\n\tq <= in ^ out;\n\tout <= q;\nend\n\nendmodule", "result": "failed: 1 out of 100 samples.", "passed": false}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tq <= 4'b0;\n\telse if (load)\n\t\tq <= data;\n\telse if (ena)\n\t\tq <= {q[2:0], 1'b0};\nend\n\nendmodule", "result": "failed: 61 out of 427 samples.", "passed": false}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = (x2 & x1) | (~x3 & x2) | (x3 & ~x1);\nendmodule", "result": "failed: 6 out of 58 samples.", "passed": false}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "assign sum = a ^ b;\nassign cout = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "always @(*) begin\n    if (cpu_overheated) \n        shut_off_computer = 1;\n    else \n        shut_off_computer = 0;\nend\n\nalways @(*) begin\n    if (~arrived) \n        keep_driving = ~gas_tank_empty;\n    else \n        keep_driving = 0;\nend\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "logic [1:0] state, next_state;\n\n// State transition logic\nalways_ff @(posedge clk, posedge reset)\n\tif (reset)\n\t\tstate <= 2'b00; // OFF state\n\telse\n\t\tstate <= next_state;\n\n// Next state logic\nalways_comb begin\n\tcase(state)\n\t\t2'b00: if (j) next_state = 2'b01; // ON state\n\t\t       else    next_state = 2'b00;\n\t\t2'b01: if (k) next_state = 2'b00;\n\t\t       else    next_state = 2'b01;\n\tendcase\nend\n\n// Output logic\nassign out = (state == 2'b01) ? 1'b1 : 1'b0;\n\nendmodule", "result": "failed: 21 out of 241 samples.", "passed": false}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "assign {w, x, y, z} = {a, b, c, d, e, f, 2'b11};\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (~a & b & c & ~d) | (a & ~b & ~c & ~d) | (a & ~b & c & d) | (a & b & ~c & ~d) | (a & b & c & d);\nendmodule", "result": "failed: 62 out of 121 samples.", "passed": false}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = a & b;\nendmodule", "result": "passed", "passed": true}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge reset)\n\tif (reset)\n\t\tstate <= 2'b10; // Reset state B\n\telse\n\t\tstate <= next_state;\n\nalways @(*) begin\n\tcase(state)\n\t\t2'b10: begin // State B\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = 2'b01; // Transition to A\n\t\t\telse\n\t\t\t\tnext_state = 2'b10; // Stay in B\n\t\tend\n\t\t2'b01: begin // State A\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = 2'b10; // Transition to B\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // Stay in A\n\t\tend\n\t\tdefault: next_state = 2'b10;\n\tendcase\nend\n\nassign out = (state == 2'b10) ? 1'b1 : 1'b0; // Output is 1 for state B, 0 for state A\n\nendmodule", "result": "failed: 57 out of 230 samples.", "passed": false}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "assign {cout, sum} = a ^ b ^ cin ? {a & b | a & cin | b & cin, a ^ b ^ cin} : {a & b | a & cin | b & cin, a ^ b ^ cin};\nendmodule", "result": "passed", "passed": true}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\n\tlogic xnor_out;\n\n\tassign xnor_out = ~(in1 ^ in2); // XNOR operation\n\tassign out = (xnor_out ^ in3); // XOR operation with xnor_out and in3\n\nendmodule", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "assign mux_in[0] = 1'b1;\nassign mux_in[1] = 1'b0;\nassign mux_in[2] = d;\nassign mux_in[3] = c | d;\n\nendmodule", "result": "failed: 60 out of 60 samples.", "passed": false}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "logic [1:0] state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 2'b00; // State A\n\telse\n\t\tstate <= next_state;\n\nalways_comb\n\tcase(state)\n\t\t2'b00: begin // State A\n\t\t\tz = x ? 1'b1 : 1'b0;\n\t\t\tnext_state = x ? 2'b01 : 2'b00; // Move to B if x=1, stay at A if x=0\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tz = x ? 1'b0 : 1'b1;\n\t\t\tnext_state = 2'b01; // Stay in B regardless of x value\n\t\tend\n\t\tdefault: begin\n\t\t\tz = 1'bX;\n\t\t\tnext_state = 2'b00; // Default to state A\n\t\tend\n\tendcase\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "reg q_reg;\nalways @(posedge clk) begin\n    case ({a, b})\n        2'b00: q_reg <= 0;\n        2'b01: q_reg <= q_reg ^ 1;\n        2'b10: q_reg <= 1;\n        2'b11: q_reg <= q_reg;\n    endcase\nend\n\nassign state = {q, a, b};\nassign q = q_reg;\n\nendmodule", "result": "failed: 26 out of 232 samples.", "passed": false}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "logic [3:0] temp;\nassign temp = {x[3], x[4], x[1], x[2]};\nassign f = (temp == 4'b0000) ? 1'b0 :\n           (temp == 4'b0001) ? 1'b0 :\n           (temp == 4'b0010) ? 1'b0 :\n           (temp == 4'b0011) ? 1'b1 :\n           (temp == 4'b0100) ? 1'b0 :\n           (temp == 4'b0101) ? 1'b0 :\n           (temp == 4'b0110) ? 1'b0 :\n           (temp == 4'b0111) ? 1'b0 :\n           (temp == 4'b1000) ? 1'b1 :\n           (temp == 4'b1001) ? 1'b1 :\n           (temp == 4'b1010) ? 1'b1 :\n           (temp == 4'b1011) ? 1'b0 :\n           (temp == 4'b1100) ? 1'b1 :\n           (temp == 4'b1101) ? 1'b1 :\n           (temp == 4'b1110) ? 1'b0 :\n           (temp == 4'b1111) ? 1'b1 : 1'bx;\nendmodule", "result": "failed: 15 out of 100 samples.", "passed": false}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "logic [5:0] shift_reg;\nlogic [4:0] count_ones;\n\nalways_ff @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\t\tshift_reg <= 6'b000000;\n\t\tcount_ones <= 5'b00000;\n\tend\n\telse\n\tbegin\n\t\tshift_reg <= {shift_reg[4:0], in};\n\t\tif (in == 1'b1)\n\t\t\tcount_ones <= count_ones + 1;\n\t\telse\n\t\t\tcount_ones <= 5'b00000;\n\tend\nend\n\nalways_ff @(posedge clk)\nbegin\n\tcase (shift_reg)\n\t\t6'b011111: begin // 0111110\n\t\t\tdisc <= 1;\n\t\t\tflag <= 0;\n\t\t\terr <= 0;\n\t\tend\n\t\t6'b0111111: begin // 01111110\n\t\t\tdisc <= 0;\n\t\t\tflag <= 1;\n\t\t\terr <= 0;\n\t\tend\n\t\tdefault: begin\n\t\t\tdisc <= 0;\n\t\t\tflag <= 0;\n\t\t\tif (count_ones >= 5) // Indicates 6 consecutive ones, insert a zero\n\t\t\t\tdisc <= 1;\n\t\t\telse if (count_ones == 7) // 7 consecutive ones\n\t\t\t\terr <= 1;\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "reg [3:0] state;\nreg [3:0] delay;\nreg [3:0] bit_counter;\nreg [11:0] bit_shift_reg;\nreg [11:0] cycle_count;\nreg [3:0] count_down;\n\nparameter IDLE = 4'b0000;\nparameter SEARCHING = 4'b0001;\nparameter RECEIVING_DELAY = 4'b0010;\nparameter COUNTING = 4'b0011;\nparameter DONE = 4'b0100;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif(reset)\n\tbegin\n\t\tstate <= IDLE;\n\t\tcounting <= 0;\n\t\tdone <= 0;\n\t\tbit_shift_reg <= 0;\n\t\tcycle_count <= 0;\n\t\tdelay <= 0;\n\t\tcount_down <= 0;\n\tend\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\tIDLE:\n\t\t\t\tif(bit_shift_reg == 12'd1101)\n\t\t\t\t\tstate <= SEARCHING;\n\t\t\t\telse\n\t\t\t\t\tstate <= IDLE;\n\t\t\tSEARCHING:\n\t\t\t\tif(bit_shift_reg == 12'd1101)\n\t\t\t\t\tstate <= RECEIVING_DELAY;\n\t\t\t\telse\n\t\t\t\t\tstate <= IDLE;\n\t\t\tRECEIVING_DELAY:\n\t\t\t\tbegin\n\t\t\t\t\tif(bit_counter < 4)\n\t\t\t\t\t\tbit_shift_reg <= {bit_shift_reg[9:0],data};\n\t\t\t\t\telse\n\t\t\t\t\t\tstate <= COUNTING;\n\t\t\t\tend\n\t\t\tCOUNTING:\n\t\t\t\tbegin\n\t\t\t\t\tif(cycle_count < (delay + 1) * 12'd1000)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tcycle_count <= cycle_count + 1;\n\t\t\t\t\t\tcount_down <= delay - (cycle_count / 12'd1000);\n\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\tstate <= DONE;\n\t\t\t\tend\n\t\t\tDONE:\n\t\t\t\tif(ack)\n\t\t\t\t\tstate <= IDLE;\n\t\tendcase\n\tend\nend\n\nalways @(*)\nbegin\n\tcase(state)\n\t\tIDLE:\n\t\t\tbegin\n\t\t\t\tcounting <= 0;\n\t\t\t\tdone <= 0;\n\t\t\tend\n\t\tRECEIVING_DELAY:\n\t\t\tbegin\n\t\t\t\tcounting <= 0;\n\t\t\t\tdone <= 0;\n\t\t\t\tbit_counter <= bit_counter + 1;\n\t\t\t\tif(bit_counter >= 4)\n\t\t\t\t\tdelay <= bit_shift_reg[3:0];\n\t\t\tend\n\t\tCOUNTING:\n\t\t\tbegin\n\t\t\t\tcounting <= 1;\n\t\t\t\tdone <= 0;\n\t\t\t\tcount <= count_down;\n\t\t\tend\n\t\tDONE:\n\t\t\tbegin\n\t\t\t\tcounting <= 0;\n\t\t\t\tdone <= 1;\n\t\t\t\tcount <= 0;\n\t\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "reg [2:0] current_state;\nreg [2:0] next_state;\n\nparameter LOW = 3'b000, FR1_FR2_FR3 = 3'b001, FR1_FR2 = 3'b010, FR1 = 3'b011, NONE = 3'b100;\n\nalways @(posedge clk or posedge reset) begin\n\tif(reset)\n\t\tcurrent_state <= NONE;\n\telse\n\t\tcurrent_state <= next_state;\nend\n\nalways @(*) begin\n\tcase(current_state)\n\t\tNONE: begin\n\t\t\tfr3 <= 1; fr2 <= 1; fr1 <= 1; dfr <= 0;\n\t\t\tif(s == 3'b111)\n\t\t\t\tnext_state = NONE;\n\t\t\telse if(s == 3'b110)\n\t\t\t\tnext_state = FR1;\n\t\t\telse if(s == 3'b100)\n\t\t\t\tnext_state = FR1_FR2;\n\t\t\telse if(s == 3'b000)\n\t\t\t\tnext_state = FR1_FR2_FR3;\n\t\tend\n\t\tFR1: begin\n\t\t\tfr3 <= 0; fr2 <= 0; fr1 <= 1; dfr <= 0;\n\t\t\tif(s == 3'b111)\n\t\t\t\tnext_state = NONE;\n\t\t\telse if(s == 3'b110)\n\t\t\t\tnext_state = FR1;\n\t\t\telse if(s == 3'b100)\n\t\t\t\tnext_state = FR1_FR2;\n\t\t\telse if(s == 3'b000)\n\t\t\t\tnext_state = FR1_FR2_FR3;\n\t\tend\n\t\tFR1_FR2: begin\n\t\t\tfr3 <= 0; fr2 <= 1; fr1 <= 1; dfr <= 0;\n\t\t\tif(s == 3'b111)\n\t\t\t\tnext_state = NONE;\n\t\t\telse if(s == 3'b110)\n\t\t\t\tnext_state = FR1;\n\t\t\telse if(s == 3'b100)\n\t\t\t\tnext_state = FR1_FR2;\n\t\t\telse if(s == 3'b000)\n\t\t\t\tnext_state = FR1_FR2_FR3;\n\t\tend\n\t\tFR1_FR2_FR3: begin\n\t\t\tfr3 <= 1; fr2 <= 1; fr1 <= 1; dfr <= 0;\n\t\t\tif(s == 3'b111)\n\t\t\t\tnext_state = NONE;\n\t\t\telse if(s == 3'b110)\n\t\t\t\tnext_state = FR1;\n\t\t\telse if(s == 3'b100)\n\t\t\t\tnext_state = FR1_FR2;\n\t\t\telse if(s == 3'b000)\n\t\t\t\tnext_state = FR1_FR2_FR3;\n\t\tend\n\tendcase\nend\n\nendmodule", "result": "failed: 2039 out of 2040 samples.", "passed": false}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [7:0] data;\nlogic next_state_en;\n\nparameter START = 3'd0,\n          DATA = 3'd1,\n          STOP = 3'd2,\n          IDLE = 3'd3;\n\nalways_ff @(posedge clk or posedge reset)\nbegin\n    if(reset)\n        state <= IDLE;\n    else if(next_state_en)\n        state <= state;\n    else\n        case(state)\n            START: begin\n                if(in == 0)\n                    state <= DATA;\n                else\n                    state <= IDLE;\n            end\n            DATA: begin\n                if(data == 8'b11111111)\n                    state <= STOP;\n                else\n                    state <= DATA;\n            end\n            STOP: begin\n                if(in == 1)\n                    state <= IDLE;\n                else\n                    state <= STOP;\n            end\n            default: state <= IDLE;\n        endcase\nend\n\nalways_ff @(posedge clk)\nbegin\n    if(state == DATA)\n        data <= {data[6:0], in};\n    else if(state == IDLE || in == 1)\n        data <= 8'b0;\nend\n\nalways_comb\nbegin\n    unique case(state)\n        START: next_state_en = 1;\n        DATA: next_state_en = (data != 8'b11111111);\n        STOP: next_state_en = in;\n        default: next_state_en = 0;\n    endcase\nend\n\nassign done = (state == IDLE && data == 8'b11111111);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "logic [2:0] state;\nlogic [6:0] counter;\nlogic [7:0] data_reg;\n\nalways_ff @(posedge clk, posedge reset)\nbegin\n\tif (reset)\n\tbegin\n\t\tstate <= 3'b000;\n\t\tcounter <= 7'b0;\n\t\tdata_reg <= 8'b0;\n\t\tout_byte <= 8'b0;\n\t\tdone <= 1'b0;\n\tend\n\telse\n\tbegin\n\t\tcase(state)\n\t\t\t3'b000: begin // Idle\n\t\t\t\tif (in == 1'b0) begin // Start bit detected\n\t\t\t\t\tstate <= 3'b001;\n\t\t\t\t\tcounter <= 7'b0;\n\t\t\t\t\tdata_reg <= 8'b0;\n\t\t\t\tend\n\t\t\tend\n\t\t\t3'b001: begin // Receiving data bits\n\t\t\t\tif (counter < 7) begin\n\t\t\t\t\tdata_reg <= {data_reg[6:0], in};\n\t\t\t\t\tcounter <= counter + 1;\n\t\t\t\t\tif (counter == 6) state <= 3'b010; // Prepare for stop bit check after receiving 8 bits\n\t\t\t\tend\n\t\t\tend\n\t\t\t3'b010: begin // Stop bit check\n\t\t\t\tif (in == 1'b1) begin // Correct stop bit detected\n\t\t\t\t\tstate <= 3'b000;\n\t\t\t\t\tout_byte <= data_reg;\n\t\t\t\t\tdone <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse begin // Incorrect stop bit, stay in this state until correct stop bit is found\n\t\t\t\t\tstate <= 3'b010;\n\t\t\t\tend\n\t\t\tend\n\t\t\tdefault: state <= 3'b000;\n\t\tendcase\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "logic [6:0] ghr;\nlogic [6:0] pht_index;\nlogic [6:0] pht_entry_addr;\nlogic [3:0] pht_entry;\n\nparameter [1:0] STRONG_NOT_TAKEN = 2'b00;\nparameter [1:0] WEAK_NOT_TAKEN = 2'b01;\nparameter [1:0] WEAK_TAKEN = 2'b10;\nparameter [1:0] STRONG_TAKEN = 2'b11;\n\nalways_ff @(posedge clk, posedge areset)\nbegin\n\tif (areset)\n\t\tghr <= 7'b0;\n\telse begin\n\t\tif (predict_valid && !train_valid)\n\t\t\tghr <= {ghr[5:0], predict_taken};\n\t\telse if (train_valid && train_mispredicted)\n\t\t\tghr <= train_history;\n\tend\nend\n\nassign pht_index = predict_pc ^ ghr;\nassign pht_entry_addr = pht_index[6:0];\nassign pht_entry = pht_entry_addr[6:5] == 2'b0 ? pht_entry_addr[4:2] : {pht_entry_addr[3:0], 2'b00};\n\nalways_ff @(posedge clk)\nbegin\n\tif (train_valid)\n\t\tcase ({train_taken, pht_entry[pht_entry_addr]})\n\t\t\t2'b00: pht_entry[pht_entry_addr] <= STRONG_NOT_TAKEN;\n\t\t\t2'b01: pht_entry[pht_entry_addr] <= WEAK_NOT_TAKEN;\n\t\t\t2'b10: pht_entry[pht_entry_addr] <= WEAK_TAKEN;\n\t\t\t2'b11: pht_entry[pht_entry_addr] <= STRONG_TAKEN;\n\t\tendcase\nend\n\nalways_comb\nbegin\n\tcase (pht_entry[pht_entry_addr])\n\t\tSTRONG_NOT_TAKEN: predict_taken = 1'b0;\n\t\tWEAK_NOT_TAKEN: predict_taken = 1'b0;\n\t\tWEAK_TAKEN: predict_taken = 1'b1;\n\t\tSTRONG_TAKEN: predict_taken = 1'b1;\n\tendcase\n\tpredict_history = ghr;\nendmodule", "result": "failed: syntax error.", "passed": false}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "typedef enum logic [3:0] {WALK_LEFT, WALK_RIGHT, FALL, DIG, SPLATTER} state_t;\nstate_t state, next_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= WALK_LEFT;\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\tWALK_LEFT: begin\n\t\t\twalk_left = 1'b1;\n\t\t\twalk_right = 1'b0;\n\t\t\taaah = 1'b0;\n\t\t\tdigging = 1'b0;\n\t\t\tif (bump_left)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if (bump_right)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_LEFT;\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\twalk_left = 1'b0;\n\t\t\twalk_right = 1'b1;\n\t\t\taaah = 1'b0;\n\t\t\tdigging = 1'b0;\n\t\t\tif (bump_left)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if (bump_right)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIG;\n\t\t\telse\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\tend\n\t\tFALL: begin\n\t\t\twalk_left = 1'b0;\n\t\t\twalk_right = 1'b0;\n\t\t\taaah = 1'b1;\n\t\t\tdigging = 1'b0;\n\t\t\tif (ground) begin\n\t\t\t\tif (state == WALK_LEFT)\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\telse\n\t\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\tend\n\t\t\telse if (!ground && !dig)\n\t\t\t\tnext_state = FALL;\n\t\t\telse\n\t\t\t\tnext_state = DIG;\n\t\tend\n\t\tDIG: begin\n\t\t\twalk_left = 1'b0;\n\t\t\twalk_right = 1'b0;\n\t\t\taaah = 1'b0;\n\t\t\tdigging = 1'b1;\n\t\t\tif (ground && !dig)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (!ground && !dig)\n\t\t\t\tnext_state = DIG;\n\t\t\telse if (ground)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse\n\t\t\t\tnext_state = DIG;\n\t\tend\n\t\tSPLATTER: begin\n\t\t\twalk_left = 1'b0;\n\t\t\twalk_right = 1'b0;\n\t\t\taaah = 1'b0;\n\t\t\tdigging = 1'b0;\n\t\t\tnext_state = SPLATTER;\n\t\tend\n\tendcase\nend\n\nlogic [4:0] count;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tcount <= 5'b0;\n\telse if (state == FALL && ground)\n\t\tcount <= 5'b0;\n\telse if (state == FALL && !ground)\n\t\tcount <= count + 1;\n\telse\n\t\tcount <= 5'b0;\n\nalways_comb begin\n\tif (count >= 5'b10100)\n\t\tnext_state = SPLATTER;\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [3:0] state;\nreg [3:0] pattern = 4'b1101;\nreg [3:0] bit_counter;\n\nalways @(posedge clk or posedge reset)\nbegin\n    if (reset)\n        state <= 4'b0000; // Searching for pattern\n    else\n    begin\n        case(state)\n            4'b0000: // Searching for pattern\n                if (data == pattern[0])\n                    state <= 4'b0001;\n                else\n                    state <= 4'b0000;\n\n            4'b0001:\n                if (data == pattern[1])\n                    state <= 4'b0010;\n                else\n                    state <= 4'b0000;\n\n            4'b0010:\n                if (data == pattern[2])\n                    state <= 4'b0011;\n                else\n                    state <= 4'b0000;\n\n            4'b0011:\n                if (data == pattern[3])\n                begin\n                    state <= 4'b0100;\n                    bit_counter <= 4'd4;\n                end\n                else\n                    state <= 4'b0000;\n\n            4'b0100: // Shift in 4 bits\n                if (bit_counter > 0)\n                begin\n                    bit_counter <= bit_counter - 1;\n                    shift_ena <= 1;\n                    if (bit_counter == 1)\n                        state <= 4'b0101;\n                end\n                else\n                    state <= 4'b0000;\n\n            4'b0101: // Waiting for counters to finish\n                begin\n                    counting <= 1;\n                    if (done_counting)\n                        state <= 4'b0110;\n                end\n\n            4'b0110: // Notify user\n                begin\n                    done <= 1;\n                    if (ack)\n                        state <= 4'b0000;\n                end\n        endcase\n    end\nend\n\nassign shift_ena = (state == 4'b0100 || state == 4'b0101) ? 1 : 0;\nassign counting = (state == 4'b0101);\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "reg [255:0] next_state;\nalways @(posedge clk) begin\n\tif(load)\n\t\tq <= data;\n\telse\n\t\tq <= next_state;\nend\n\nalways @* begin\n\tfor(int i = 0; i < 256; i++) begin\n\t\tint count = 0;\n\t\t// Top-left corner\n\t\tif(i == 0) begin\n\t\t\tcount = count + q[1]; // Right\n\t\t\tcount = count + q[16]; // Bottom\n\t\t\tcount = count + q[17]; // Bottom-right\n\t\tend\n\t\t// Top-right corner\n\t\telse if(i == 15) begin\n\t\t\tcount = count + q[14]; // Left\n\t\t\tcount = count + q[16]; // Bottom\n\t\t\tcount = count + q[31]; // Bottom-left\n\t\tend\n\t\t// Bottom-left corner\n\t\telse if(i == 240) begin\n\t\t\tcount = count + q[241]; // Right\n\t\t\tcount = count + q[224]; // Top\n\t\t\tcount = count + q[225]; // Top-right\n\t\tend\n\t\t// Bottom-right corner\n\t\telse if(i == 255) begin\n\t\t\tcount = count + q[249]; // Left\n\t\t\tcount = count + q[224]; // Top\n\t\t\tcount = count + q[254]; // Top-left\n\t\tend\n\t\t// First column, except corners\n\t\telse if(i % 16 == 0) begin\n\t\t\tcount = count + q[i+1]; // Right\n\t\t\tcount = count + q[i+16]; // Bottom\n\t\t\tcount = count + q[i+17]; // Bottom-right\n\t\t\tcount = count + q[i-16]; // Top\n\t\t\tcount = count + q[i-15]; // Top-right\n\t\tend\n\t\t// Last column, except corners\n\t\telse if((i + 1) % 16 == 0) begin\n\t\t\tcount = count + q[i-1]; // Left\n\t\t\tcount = count + q[i+16]; // Bottom\n\t\t\tcount = count + q[i+15]; // Bottom-left\n\t\t\tcount = count + q[i-16]; // Top\n\t\t\tcount = count + q[i-17]; // Top-left\n\t\tend\n\t\t// First row, except corners\n\t\telse if(i < 16) begin\n\t\t\tcount = count + q[i+1]; // Right\n\t\t\tcount = count + q[i+16]; // Bottom\n\t\t\tcount = count + q[i-1]; // Left\n\t\t\tcount = count + q[i+17]; // Bottom-right\n\t\t\tcount = count + q[i-16]; // Top\n\t\t\tcount = count + q[i-17]; // Top-left\n\t\tend\n\t\t// Last row, except corners\n\t\telse if(i >= 240) begin\n\t\t\tcount = count + q[i+1]; // Right\n\t\t\tcount = count + q[i-16]; // Top\n\t\t\tcount = count + q[i-1]; // Left\n\t\t\tcount = count + q[i+15]; // Bottom-left\n\t\t\tcount = count + q[i-17]; // Top-left\n\t\t\tcount = count + q[i-16]; // Top\n\t\tend\n\t\t// Inner cells\n\t\telse begin\n\t\t\tcount = count + q[i+1]; // Right\n\t\t\tcount = count + q[i-1]; // Left\n\t\t\tcount = count + q[i+16]; // Bottom\n\t\t\tcount = count + q[i-16]; // Top\n\t\t\tcount = count + q[i+17]; // Bottom-right\n\t\t\tcount = count + q[i+15]; // Bottom-left\n\t\t\tcount = count + q[i-17]; // Top-left\n\t\t\tcount = count + q[i-15]; // Top-right\n\t\tend\n\t\t\n\t\tif(q[i] && (count == 2 || count == 3))\n\t\t\tnext_state[i] = 1;\n\t\telse if(!q[i] && count == 3)\n\t\t\tnext_state[i] = 1;\n\t\telse\n\t\t\tnext_state[i] = 0;\n\tend\nend\n\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "logic [2:0] state, next_state;\nlogic falling, digging_state;\n\nalways_ff @(posedge clk, posedge areset)\n\tif (areset)\n\t\tstate <= 3'b001; // Walk Left\n\telse\n\t\tstate <= next_state;\n\nalways_comb begin\n\tcase(state)\n\t\t3'b001: begin // Walk Left\n\t\t\twalk_left = 1;\n\t\t\twalk_right = 0;\n\t\t\tnext_state = ground ? 3'b001 : 3'b010; // Fall\n\t\t\tdigging_state = 0;\n\t\tend\n\t\t3'b010: begin // Fall\n\t\t\taaah = 1;\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 0;\n\t\t\tnext_state = ground ? 3'b001 : 3'b010; // Stay in Fall until ground appears\n\t\t\tdigging_state = 0;\n\t\tend\n\t\t3'b011: begin // Dig Left\n\t\t\tdigging_state = 1;\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 0;\n\t\t\tnext_state = ground ? 3'b011 : 3'b010; // Continue Digging until ground disappears\n\t\tend\n\t\t3'b100: begin // Walk Right\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 1;\n\t\t\tnext_state = ground ? 3'b100 : 3'b010; // Fall\n\t\t\tdigging_state = 0;\n\t\tend\n\t\tdefault: begin // Invalid State\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 0;\n\t\t\taaah = 0;\n\t\t\tdigging_state = 0;\n\t\t\tnext_state = 3'b001; // Default to Walk Left\n\t\tend\n\tendcase\nend\n\nassign digging = digging_state;\n\nalways_comb begin\n\tcase({bump_right, bump_left})\n\t\t2'b00: next_state = {falling, digging_state} ? 3'b010 : state; // No bump, check for fall or dig\n\t\t2'b01: next_state = 3'b100; // Bumped Right\n\t\t2'b10: next_state = 3'b001; // Bumped Left\n\t\t2'b11: next_state = 3'b001; // Bumped Both, prioritize Left\n\tendcase\nend\n\nassign falling = !ground && (state == 3'b001 || state == 3'b100);\nendmodule", "result": "failed: compile error.", "passed": false}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif(reset)\n\t\t\thh <= 8'b01001000; // 12 in BCD\n\t\telse if(ena) begin\n\t\t\tss <= ss + 1;\n\t\t\tif(ss == 8'd59) begin\n\t\t\t\tss <= 8'd0;\n\t\t\t\tmm <= mm + 1;\n\t\t\t\tif(mm == 8'd59) begin\n\t\t\t\t\tmm <= 8'd0;\n\t\t\t\t\thh <= hh + 1;\n\t\t\t\t\tif(hh == 8'd12) begin\n\t\t\t\t\t\thh <= 8'd1;\n\t\t\t\t\t\tpm <= ~pm;\n\t\t\t\t\tend else if(hh == 8'd1 && pm)\n\t\t\t\t\t\tpm <= ~pm;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\nendmodule", "result": "failed: 352412 out of 352413 samples.", "passed": false}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "logic [1:0] state, next_state;\nparameter IDLE = 2'b00, FALLING = 2'b01, WALK_LEFT = 2'b10, WALK_RIGHT = 2'b11;\n\nalways_ff @(posedge clk, posedge areset) begin\n\tif (areset)\n\t\tstate <= WALK_LEFT;\n\telse\n\t\tstate <= next_state;\nend\n\nalways_comb begin\n\tcase(state)\n\t\tWALK_LEFT: if (~ground) next_state = FALLING; else next_state = WALK_LEFT;\n\t\tWALK_RIGHT: if (~ground) next_state = FALLING; else next_state = WALK_RIGHT;\n\t\tFALLING: if (ground) next_state = WALK_LEFT;\n\t\tdefault: next_state = WALK_LEFT;\n\tendcase\n\t\n\tif ((state == WALK_LEFT || state == FALLING) && bump_right)\n\t\tnext_state = WALK_RIGHT;\n\t\n\tif ((state == WALK_RIGHT || state == FALLING) && bump_left)\n\t\tnext_state = WALK_LEFT;\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\nassign aaah = (state == FALLING && ~ground);\n\nendmodule", "result": "failed: 318 out of 441 samples.", "passed": false}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tq <= 16'b0;\n\telse begin\n\t\tif (q[3:0] == 4'b1001) begin // Increment if ones place reaches 9\n\t\t\tq[3:0] <= 4'b0000;\n\t\t\tif (q[7:4] == 4'b1001) begin // Increment if tens place reaches 9\n\t\t\t\tq[7:4] <= 4'b0000;\n\t\t\t\tif (q[11:8] == 4'b1001) begin // Increment if hundreds place reaches 9\n\t\t\t\t\tq[11:8] <= 4'b0000;\n\t\t\t\t\tif (q[15:12] == 4'b1001) // If thousands place reaches 9, reset\n\t\t\t\t\t\tq[15:12] <= 4'b0000;\n\t\t\t\t\telse\n\t\t\t\t\t\tq[15:12] <= q[15:12] + 4'b0001; // Increment thousands place\n\t\t\t\t// Enable signal for hundreds place\n\t\t\t\tena[3] = (q[11:8] == 4'b1001);\n\t\t\t\telse\n\t\t\t\t\tq[11:8] <= q[11:8] + 4'b0001; // Increment hundreds place\n\t\t\t\t// Enable signal for tens place\n\t\t\t\tena[2] = (q[7:4] == 4'b1001);\n\t\t\t// Enable signal for ones place\n\t\t\tena[1] = (q[3:0] == 4'b1001);\n\t\t\telse\n\t\t\t\tq[7:4] <= q[7:4] + 4'b0001; // Increment tens place\n\t\t}\n\t\telse\n\t\t\tq[3:0] <= q[3:0] + 4'b0001; // Increment ones place\n\tend\nend\nendmodule", "result": "failed: syntax error.", "passed": false}
