{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "\nassign out = sel ? b : a;\n\nendmodule\n"}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(*) begin\n    case(y)\n        3'b000: Y2 = (w) ? 1'b0 : 1'b0;\n        3'b001: Y2 = (w) ? 1'b1 : 1'b0;\n        3'b010: Y2 = (w) ? 1'b0 : 1'b0;\n        3'b011: Y2 = (w) ? 1'b1 : 1'b0;\n        3'b100: Y2 = (w) ? 1'b0 : 1'b0;\n        3'b101: Y2 = (w) ? 1'b1 : 1'b0;\n    endcase\nend\nendmodule"}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "assign ringer = (vibrate_mode) ? 0 : ring;\nassign motor = (vibrate_mode) ? ring : 0;\n\nendmodule"}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*)\nbegin\n\tout_alwaysblock = a & b;\nend\n\nendmodule"}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": ""}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1)\n        q <= 0;\n    else\n        q <= 1;\nend\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [2:0] state;\nreg z;\nreg [2:0] next_state;\n\nparameter S0 = 3'b000, S1 = 3'b001, S2 = 3'b010;\nparameter S3 = 3'b011;\n\nalways @(posedge clk or negedge areset) begin\n\tif (!areset)\n\t\tstate <= S0;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @* begin\n\tcase (state)\n\t\tS0: begin\n\t\t\tif (!areset)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (x)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tend\n\t\tS1: begin\n\t\t\tif (!areset)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (x)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = S2;\n\t\tend\n\t\tS2: begin\n\t\t\tif (!areset)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (x)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = S3;\n\t\tend\n\t\tS3: begin\n\t\t\tif (!areset)\n\t\t\t\tnext_state = S0;\n\t\t\telse if (x)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = S3;\n\t\tend\n\t\tdefault: next_state = S0;\n\tendcase\nend\n\nalways @* begin\n\tcase (state)\n\t\tS0: z = 1'b0;\n\t\tS1: z = ~x;\n\t\tS2: z = ~x + 1'b1;\n\t\tS3: z = ~x + 1'b1;\n\t\tdefault: z = 1'b0;\n\tendcase\nend\n\nendmodule"}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\nreg out_reg;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= A;\n\t\tout_reg <= 1'b0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tout_reg <= (state == D) ? 1'b1 : 1'b0;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tA: begin\n\t\t\tnext_state = in ? B : A;\n\t\tend\n\t\tB: begin\n\t\t\tnext_state = in ? B : C;\n\t\tend\n\t\tC: begin\n\t\t\tnext_state = in ? D : A;\n\t\tend\n\t\tD: begin\n\t\t\tnext_state = in ? B : C;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = A;\n\t\tend\n\tendcase\nend\n\nassign out = out_reg;\n\nendmodule"}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": ""}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "always @(posedge clk) begin\n\tif (r == 1'b1) begin\n\t\tq <= 1'b0;\n\tend else begin\n\t\tq <= d;\n\tend\nend\n\nendmodule"}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "reg signed [63:0] q_reg;\n\nalways @(posedge clk) begin\n    if (load) begin\n        q_reg <= data;\n    end else if (ena) begin\n        case(amount)\n            2'b00: q_reg <= {q_reg[62:0], q_reg[63]};\n            2'b01: q_reg <= {q_reg[55:0], q_reg[63:56]};\n            2'b10: q_reg <= {q_reg[63], q_reg[63:1]};\n            2'b11: q_reg <= {q_reg[7:0], q_reg[63:8]};\n        endcase\n    end\nend\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "\treg [1:0] state;\n\n\talways @(posedge clk or negedge aresetn) begin\n\t\tif (~aresetn) begin\n\t\t\tstate <= 2'b00;\n\t\tend else begin\n\t\t\tcase (state)\n\t\t\t\t2'b00: begin\n\t\t\t\t\tif (x == 1'b1)\n\t\t\t\t\t\tstate <= 2'b01;\n\t\t\t\t\telse\n\t\t\t\t\t\tstate <= 2'b00;\n\t\t\t\tend\n\t\t\t\t2'b01: begin\n\t\t\t\t\tif (x == 1'b0)\n\t\t\t\t\t\tstate <= 2'b00;\n\t\t\t\t\telse\n\t\t\t\t\t\tstate <= 2'b10;\n\t\t\t\tend\n\t\t\t\t2'b10: begin\n\t\t\t\t\tif (x == 1'b1) begin\n\t\t\t\t\t\tstate <= 2'b01;\n\t\t\t\t\t\tz <= 1'b1;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tstate <= 2'b00;\n\t\t\t\t\t\tz <= 1'b0;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tdefault: state <= 2'b00;\n\t\t\tendcase\n\t\tend\n\tend\n\nendmodule"}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nparameter A = 3'b000;\nparameter B = 3'b001;\nparameter C = 3'b010;\nparameter D = 3'b011;\nparameter E = 3'b100;\nparameter F = 3'b101;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tA: begin\n\t\t\tif (w) begin\n\t\t\t\tnext_state = A;\n\t\t\tend else begin\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\tend\n\t\tB: begin\n\t\t\tif (w) begin\n\t\t\t\tnext_state = D;\n\t\t\tend else begin\n\t\t\t\tnext_state = C;\n\t\t\tend\n\t\tend\n\t\tC: begin\n\t\t\tif (w) begin\n\t\t\t\tnext_state = D;\n\t\t\tend else begin\n\t\t\t\tnext_state = E;\n\t\t\tend\n\t\tend\n\t\tD: begin\n\t\t\tif (w) begin\n\t\t\t\tnext_state = A;\n\t\t\tend else begin\n\t\t\t\tnext_state = F;\n\t\t\tend\n\t\tend\n\t\tE: begin\n\t\t\tif (w) begin\n\t\t\t\tnext_state = D;\n\t\t\tend else begin\n\t\t\t\tnext_state = E;\n\t\t\tend\n\t\tend\n\t\tF: begin\n\t\t\tif (w) begin\n\t\t\t\tnext_state = D;\n\t\t\tend else begin\n\t\t\t\tnext_state = C;\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = A;\n\tendcase\nend\n\nassign z = (state == E) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "reg [1:0] state;\nreg [7:0] tmp_bytes [2:0];\nreg [23:0] out_bytes_reg;\nreg done_reg;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\t\ttmp_bytes <= 8'b0;\n\t\tout_bytes_reg <= 24'b0;\n\t\tdone_reg <= 1'b0;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\t2'b00: begin // Idle state\n\t\t\t\tif (in[3]) begin\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\t\ttmp_bytes[0] <= in;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t2'b01: begin // Receiving first byte\n\t\t\t\tif (!in[3])\n\t\t\t\t\tstate <= 2'b00;\n\t\t\t\telse begin\n\t\t\t\t\ttmp_bytes[1] <= in;\n\t\t\t\t\tstate <= 2'b10;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t2'b10: begin // Receiving second byte\n\t\t\t\tif (!in[3]) begin\n\t\t\t\t\tstate <= 2'b00;\n\t\t\t\t\ttmp_bytes[0] <= in;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\ttmp_bytes[2] <= in;\n\t\t\t\t\tstate <= 2'b11;\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t2'b11: begin // Receiving third byte\n\t\t\t\tif (!in[3]) begin\n\t\t\t\t\tstate <= 2'b00;\n\t\t\t\t\ttmp_bytes[0] <= in;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tout_bytes_reg <= {tmp_bytes[2], tmp_bytes[1], tmp_bytes[0]};\n\t\t\t\t\tdone_reg <= 1'b1;\n\t\t\t\t\tstate <= 2'b00;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign out_bytes = done_reg ? out_bytes_reg : 24'b0;\nassign done = done_reg;\n\nendmodule"}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = y[0] | y[1] | y[2];\nassign Y3 = y[2] | y[3] | y[4];\n\nendmodule"}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "\nassign {o2, o1, o0} = vec;\nassign outv = vec;\nendmodule\n"}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case({c, d, a, b})\n        4'b0000: out = 1'b0;\n        4'b0001: out = 1'b1;\n        4'b0010: out = 1'b0;\n        4'b0011: out = 1'b1;\n        4'b0110: out = 1'b1;\n        4'b0111: out = 1'b0;\n        4'b1000: out = 1'b1;\n        4'b1001: out = 1'b0;\n        4'b1010: out = 1'b1;\n        4'b1011: out = 1'b0;\n        4'b1100: out = 1'b0;\n        4'b1101: out = 1'b1;\n        4'b1110: out = 1'b0;\n        4'b1111: out = 1'b1;\n        default: out = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "\nassign out_hi = in[15:8];\nassign out_lo = in[7:0];\nendmodule\n"}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "    assign out = ~(a | b);\nendmodule"}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @(*) begin\n\tout_always_comb = a ^ b;\nend\n\nalways @(posedge clk) begin\n\tout_always_ff <= a ^ b;\nend\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "always @(*) begin\n    case (y)\n        7'b000001: begin // State A\n            if (w == 1'b0) begin\n                Y2 = 1'b0;\n                Y4 = 1'b0;\n            end else begin // w == 1\n                Y2 = 1'b0;\n                Y4 = 1'b0;\n            end\n        end\n        7'b000010: begin // State B\n            if (w == 1'b0) begin\n                Y2 = 1'b1;\n                Y4 = 1'b1;\n            end else begin // w == 1\n                Y2 = 1'b0;\n                Y4 = 1'b0;\n            end\n        end\n        7'b000100: begin // State C\n            if (w == 1'b0) begin\n                Y2 = 1'b0;\n                Y4 = 1'b1;\n            end else begin // w == 1\n                Y2 = 1'b0;\n                Y4 = 1'b1;\n            end\n        end\n        7'b001000: begin // State D\n            if (w == 1'b0) begin\n                Y2 = 1'b0;\n                Y4 = 1'b0;\n            end else begin // w == 1\n                Y2 = 1'b0;\n                Y4 = 1'b1;\n            end\n        end\n        7'b010000: begin // State E\n            if (w == 1'b0) begin\n                Y2 = 1'b1;\n                Y4 = 1'b1;\n            end else begin // w == 1\n                Y2 = 1'b0;\n                Y4 = 1'b1;\n            end\n        end\n        7'b100000: begin // State F\n            if (w == 1'b0) begin\n                Y2 = 1'b0;\n                Y4 = 1'b0;\n            end else begin // w == 1\n                Y2 = 1'b1;\n                Y4 = 1'b0;\n            end\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "assign out = in[sel]; \n\nendmodule"}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "always @ (posedge clk) begin\n\tif (E) begin\n\t\tif (L) begin\n\t\t\tQ <= R;\n\t\tend else begin\n\t\t\tQ <= w;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "always @(posedge clk) begin\n    // Define D flip-flops\n    reg dff1, dff2, dff3;\n    \n    // Define three gates with input x\n    wire xor_gate, and_gate, or_gate;\n    \n    assign xor_gate = x ^ dff1;\n    assign and_gate = x & ~dff2;\n    assign or_gate = x | ~dff3;\n    \n    // Define three-input XNOR gate\n    assign z = ~(xor_gate ^ and_gate ^ or_gate);\n    \n    // D flip-flop assignments\n    always @(posedge clk) begin\n        dff1 <= xor_gate;\n        dff2 <= and_gate;\n        dff3 <= or_gate;\n    end\nend\n\nendmodule"}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & b & c) | (b & ~c & ~d);\nendmodule\n"}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        q[0] = (q[0] & ~q[1]) | (q[0] &  q[1]);\n        q[1:510] = ((~q[2:511] & q[1:510]) | (q[2:511] & ~q[1:510]));\n        q[511] = (q[510] & ~q[511]) | (q[510] &  q[511]);\n    end\nend\n\nendmodule"}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\nreg out;\n\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= A;\n\t\tout <= 1'b0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tout <= (state == D) ? 1'b1 : 1'b0;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tA: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tB: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = C;\n\t\t\tend\n\t\tend\n\t\tC: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = D;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tD: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = C;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign out = out;\n\nendmodule"}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @* begin\n\tif (a == b) begin\n\t\tq = e;\n\tend else if (c == d) begin\n\t\tq = d;\n\tend else if (c > d) begin\n\t\tq = a;\n\tend else if (c == 4'b0101) begin\n\t\tq = 4'b1111;\n\tend else begin\n\t\tq = 4'b1110;\n\tend\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "assign out = (!sel & a) | (sel & b);\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "\n\n    always @(posedge clk) begin\n        if (L) begin\n            Q <= r_in;\n        end else begin\n            Q <= {Q[1] ^ Q[2], q_in[0], Q[2]};\n        end\n    end\n\nendmodule\n\nmodule top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q\n);\n\n    submodule submodule_inst1(.clk(clk), .q_in(q_in), .r_in(r_in), .Q(Q));\n    submodule submodule_inst2(.clk(clk), .q_in(Q), .r_in(r_in), .Q(Q));\n    submodule submodule_inst3(.clk(clk), .q_in(Q), .r_in(r_in), .Q(Q));\n\nendmodule"}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        out <= 32'b0; \n    end else begin\n        for (int i = 0; i < 32; i = i + 1) begin\n            if (in[i] == 1'b1 && in[i] == 1'b0) begin\n                out[i] <= 1'b1;\n            end else begin\n                out[i] <= 1'b0;\n            end\n        end\n    end\nend\n"}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "reg [7:0] q_reg;\n\nalways @(posedge clk) begin\n    q_reg <= d;\nend\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "reg [8:0] temp;\n\nalways @(*) begin\n    temp = a + b;\n    s = temp[7:0];\n    if (temp[8] != temp[7]) begin\n        overflow = 1;\n    end else begin\n        overflow = 0;\n    end\nend\n\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = (state == 10'b0000000100) ? 1'b1 : 1'b0;\nassign S_next = ((state == 10'b0000000001) && (!d)) ? 1'b1 : 1'b0;\nassign S1_next = ((state == 10'b0000000010) && (d)) ? 1'b1 : 1'b0;\nassign Count_next = ((state == 10'b1000000000) && !(done_counting)) ? 1'b1 : 1'b0;\nassign Wait_next = ((state == 10'b1000000000) && (done_counting)) ? 1'b1 : 1'b0;\n\nassign done = (state == 10'b1000000000) ? 1'b1 : 1'b0;\nassign counting = (state == 10'b1000000000) ? 1'b1 : 1'b0;\nassign shift_ena = (state == 10'b0000001011) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "    reg [1:0] state;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state <= 2'b01;\n        end else begin\n            if (train_valid & train_taken) begin\n                if (state == 2'b11) begin\n                    state <= 2'b11;\n                end else begin\n                    state <= state + 2'b01;\n                end\n            end else if (train_valid & ~train_taken) begin\n                if (state == 2'b00) begin\n                    state <= 2'b00;\n                end else begin\n                    state <= state - 2'b01;\n                end\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "always @(*) begin\n    case(in)\n        8'b00000001: pos = 3'd0;\n        8'b00000010: pos = 3'd1;\n        8'b00000100: pos = 3'd2;\n        8'b00001000: pos = 3'd3;\n        8'b00010000: pos = 3'd4;\n        8'b00100000: pos = 3'd5;\n        8'b01000000: pos = 3'd6;\n        8'b10000000: pos = 3'd7;\n        default: pos = 3'd0;\n    endcase\nend\n\nendmodule"}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    case(scancode)\n        16'he06b: begin\n            left <= 1;\n            down <= 0;\n            right <= 0;\n            up <= 0;\n        end\n        16'he072: begin\n            left <= 0;\n            down <= 1;\n            right <= 0;\n            up <= 0;\n        end\n        16'he074: begin\n            left <= 0;\n            down <= 0;\n            right <= 1;\n            up <= 0;\n        end\n        16'he075: begin\n            left <= 0;\n            down <= 0;\n            right <= 0;\n            up <= 1;\n        end\n        default: begin\n            left <= 0;\n            down <= 0;\n            right <= 0;\n            up <= 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "// 4-bit adder with full adders\nwire [3:0] c;\nwire  cout;\nfull_adder fa0 (.a(x[0]), .b(y[0]), .cin(1'b0), .sum(sum[0]), .cout(c[0]));\nfull_adder fa1 (.a(x[1]), .b(y[1]), .cin(c[0]), .sum(sum[1]), .cout(c[1]));\nfull_adder fa2 (.a(x[2]), .b(y[2]), .cin(c[1]), .sum(sum[2]), .cout(c[2]));\nfull_adder fa3 (.a(x[3]), .b(y[3]), .cin(c[2]), .sum(sum[3]), .cout(cout));\nassign sum[4] = cout;\n\nendmodule"}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "\n    logic [31:0] branch_history_reg;\n    \n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            branch_history_reg <= 32'b0;\n        end else begin\n            if (train_mispredicted) begin\n                branch_history_reg <= {train_history, train_taken};\n            end else if (predict_valid) begin\n                branch_history_reg <= {branch_history_reg[30:0], predict_taken};\n            end\n        end\n    end\n    \n    assign predict_history = branch_history_reg;\n    \nendmodule\n"}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "wire intermediate1;\nwire intermediate2;\n\nand gate1 (intermediate1, a, b);\nand gate2 (intermediate2, c, d);\nor gate3 (out, intermediate1, intermediate2);\nassign out_n = ~out;\n\nendmodule"}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk)\nbegin\n    q <= d;\nend\n\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] Q;\n\nalways @(posedge clk) begin\n\tif (enable) begin\n\t\tQ <= {Q[6:0], S};\n\tend\nend\n\nalways @* begin\n\tcase({A, B, C})\n\t\t3'b000: Z = Q[0];\n\t\t3'b001: Z = Q[1];\n\t\t3'b010: Z = Q[2];\n\t\t3'b011: Z = Q[3];\n\t\t3'b100: Z = Q[4];\n\t\t3'b101: Z = Q[5];\n\t\t3'b110: Z = Q[6];\n\t\t3'b111: Z = Q[7];\n\tendcase\nend\n\nendmodule"}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "reg heater, aircon, fan;\n\nalways @(*) begin\n    if (mode == 1 && too_cold == 1) begin\n        heater = 1;\n        aircon = 0;\n        fan = 1;\n    end\n    else if (mode == 0 && too_hot == 1) begin\n        heater = 0;\n        aircon = 1;\n        fan = 1;\n    end\n    else if (fan_on == 1) begin\n        heater = 0;\n        aircon = 0;\n        fan = 1;\n    end\n    else begin\n        heater = 0;\n        aircon = 0;\n        fan = 0;\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "\n// Define the truth table for the given conditions\nassign out_sop = (~a & ~b & c & d) | (~a & b & ~c & d) | (~a & b & c & ~d);\n\nassign out_pos = (a + b + ~c + ~d) * (a + ~b + c + ~d) * (a + ~b + ~c + d);\nendmodule\n"}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "reg [31:0] lfsr_reg;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tlfsr_reg <= 32'h1;\n\tend\n\telse begin\n\t\tlfsr_reg <= {lfsr_reg[30:0], lfsr_reg[31] ^ lfsr_reg[21] ^ lfsr_reg[1] ^ lfsr_reg[0]};\n\tend\nend\n\nassign q = lfsr_reg;\n\nendmodule"}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & ~b & c & d) | (~a & b & ~c & ~d) | (~a & b & ~c & d) | (~a & b & c & d) | (a & ~b & ~c & d) | (a & ~b & c & d) | (a & b & c & d);\nendmodule\n"}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "nand nand_gate_1 (nand_out_1, p1a, p1b, p1c, p1d);\nnand nand_gate_2 (nand_out_2, p2a, p2b, p2c, p2d);\n\nassign p1y = nand_out_1;\nassign p2y = nand_out_2;\n\nendmodule"}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "always @(*) begin\n    out = 8'h0;\n    for (int i = 0; i < 255; i = i + 1) begin\n        out = out + in[i];\n    end\nend\n\nendmodule"}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "// Define out_both\nassign out_both[0] = in[0] & in[1];\nassign out_both[1] = in[1] & in[2];\nassign out_both[2] = in[2] & in[3];\n\n// Define out_any\nassign out_any[1] = in[1] | in[2];\nassign out_any[2] = in[2] | in[3];\nassign out_any[3] = in[3];\n\n// Define out_different\nassign out_different[0] = in[0] ^ in[3];\nassign out_different[1] = in[1] ^ in[0];\nassign out_different[2] = in[2] ^ in[1];\nassign out_different[3] = in[3] ^ in[2];\n\nendmodule"}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*) begin\n    case(a)\n        0: q <= 16'h1232;\n        1: q <= 16'haee0;\n        2: q <= 16'h27d4;\n        3: q <= 16'h5a0e;\n        4: q <= 16'h2066;\n        5: q <= 16'h64ce;\n        6: q <= 16'hc526;\n        7: q <= 16'h2f19;\n        default: q <= 16'h0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] count;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tcount <= 4'd0;\n\telseif (slowena) begin\n\t\tif (count == 4'd9) begin\n\t\t\tcount <= 4'd0;\n\t\tend\n\t\telse begin\n\t\t\tcount <= count + 4'd1;\n\t\tend\n\tend\nend\n\nassign q = count;\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "and gate_inst (\n    .in1(in1),\n    .in2(~in2),\n    .out(out)\n);\n\nendmodule"}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter B = 2'b00;\nparameter A = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= B;\n\tend else begin \n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tB: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tA: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = A;\n\t\t\tend else begin\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign out = (state == A);\n\nendmodule"}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk)\n\tbegin\n\t\tif (~q)\n\t\t\tq <= d;\n\tend\n\nalways @(negedge clk)\n\tbegin\n\t\tif (q)\n\t\t\tq <= d;\n\tend\nendmodule"}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "\nassign out = ~(a ^ b);\nendmodule\n"}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": ""}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load) begin\n\t\tq <= data;\n\tend else begin\n\t\tcase(ena)\n\t\t\t2'b01: q <= {q[0], q[99:1]}; // right rotate\n\t\t\t2'b10: q <= {q[1:99], q[0]}; // left rotate\n\t\t\tdefault: q <= q; // do not rotate\n\t\tendcase\n\tend\nend\nendmodule"}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tq <= 10'b0;\n\tend else begin\n\t\tif (q == 10'd999) begin\n\t\t\tq <= 10'd0;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "assign out = ~in;\n\nendmodule"}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "always_comb begin\n    case(state)\n        10'b1_000_000_000: begin // S0\n            next_state = 10'b1_000_000_000;\n            out1 = 1'b0;\n            out2 = 1'b0;\n            if(in == 1)\n                next_state = 10'b0_000_000_001; // S1\n        end\n        10'b0_000_000_001: begin // S1\n            next_state = 10'b1_000_000_000; // S0\n            out1 = 1'b0;\n            out2 = 1'b0;\n            if(in == 1)\n                next_state = 10'b0_000_000_010; // S2\n        end\n        10'b0_000_000_010: begin // S2\n            next_state = 10'b1_000_000_000; // S0\n            out1 = 1'b0;\n            out2 = 1'b0;\n            if(in == 1)\n                next_state = 10'b0_000_000_011; // S3\n        end\n        10'b0_000_000_011: begin // S3\n            next_state = 10'b1_000_000_000; // S0\n            out1 = 1'b0;\n            out2 = 1'b0;\n            if(in == 1)\n                next_state = 10'b0_000_000_100; // S4\n        end\n        10'b0_000_000_100: begin // S4\n            next_state = 10'b1_000_000_000; // S0\n            out1 = 1'b0;\n            out2 = 1'b0;\n            if(in == 1)\n                next_state = 10'b0_000_001_000; // S5\n        end\n        10'b0_000_001_000: begin // S5\n            out1 = 1'b0; // default (0)\n            out2 = 1'b0; // default (0)\n            if(in == 1)\n                next_state = 10'b0_000_010_000; // S6\n            else\n                next_state = 10'b1_000_000_000; // S0\n        end\n        10'b0_000_010_000: begin // S6\n            out1 = 1'b0; // default (0)\n            out2 = 1'b0; // default (0)\n            if(in == 1)\n                next_state = 10'b0_000_100_000; // S7\n            else\n                next_state = 10'b1_000_000_000; // S0\n        end\n        10'b0_000_100_000: begin // S7\n            out1 = 1'b0; // default (0)\n            out2 = 1'b1; // 1\n            if(in == 1)\n                next_state = 10'b0_001_000_000; // S7\n            else\n                next_state = 10'b1_000_000_000; // S0\n        end\n        10'b1_000_000_100: begin // S8\n            out1 = 1'b0; // default (0)\n            out2 = 1'b0; // default (0)\n            if(in == 1)\n                next_state = 10'b0_000_000_001; // S1\n            else\n                next_state = 10'b1_000_000_000; // S0\n        end\n        10'b1_000_000_101: begin // S9\n            out1 = 1'b0; // default (0)\n            out2 = 1'b0; // default (0)\n            if(in == 1)\n                next_state = 10'b0_000_000_001; // S1\n            else\n                next_state = 10'b1_000_000_000; // S0\n        end\n    endcase\nend\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n    if (j & ~k) begin\n        Q <= 1;\n    end else if (~j & k) begin\n        Q <= 0;\n    end else if (j & k) begin\n        Q <= ~Q;\n    end\nend\nendmodule"}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "\n  assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "\n    assign out[24] = ~a ^ a;\n\tassign out[23] = ~a ^ b;\n\tassign out[22] = ~a ^ c;\n\tassign out[21] = ~a ^ d;\n\tassign out[20] = ~a ^ e;\n\tassign out[19] = ~b ^ a;\n\tassign out[18] = ~b ^ b;\n\tassign out[17] = ~b ^ c;\n\tassign out[16] = ~b ^ d;\n\tassign out[15] = ~b ^ e;\n\tassign out[14] = ~c ^ a;\n\tassign out[13] = ~c ^ b;\n\tassign out[12] = ~c ^ c;\n\tassign out[11] = ~c ^ d;\n\tassign out[10] = ~c ^ e;\n\tassign out[9]  = ~d ^ a;\n\tassign out[8]  = ~d ^ b;\n\tassign out[7]  = ~d ^ c;\n\tassign out[6]  = ~d ^ d;\n\tassign out[5]  = ~d ^ e;\n\tassign out[4]  = ~e ^ a;\n\tassign out[3]  = ~e ^ b;\n\tassign out[2]  = ~e ^ c;\n\tassign out[1]  = ~e ^ d;\n\tassign out[0]  = ~e ^ e;\nendmodule"}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= 2'b01; // walk_left state\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t2'b01: begin // walk_left state\n\t\t\tif (bump_left && !bump_right) begin\n\t\t\t\tnext_state = 2'b10; // walk_right state\n\t\t\tend else if (bump_right && !bump_left) begin\n\t\t\t\tnext_state = 2'b01; // walk_left state\n\t\t\tend\n\t\tend\n\t\t2'b10: begin // walk_right state\n\t\t\tif (bump_right && !bump_left) begin\n\t\t\t\tnext_state = 2'b01; // walk_left state\n\t\t\tend else if (bump_left && !bump_right) begin\n\t\t\t\tnext_state = 2'b10; // walk_right state\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = 2'b01; // Default to walk_left state\n\tendcase\nend\n\nassign walk_left = (state == 2'b01) ? 1'b1 : 1'b0;\nassign walk_right = (state == 2'b10) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "\nassign q = a & ~b;\nendmodule\n"}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "assign p1y = (p1a & p1b & p1c) | (p1d & p1e & p1f);\nassign p2y = (p2a & p2b) | (p2c & p2d);\n\nendmodule"}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "always @(posedge clk) begin\n    case({x, y})\n        3'b000: begin\n            Y0 <= 1'b0;\n            z <= 1'b0;\n        end\n        3'b001: begin\n            Y0 <= x ? 3'b100 : 3'b001;\n            z <= 1'b0;\n        end\n        3'b010: begin\n            Y0 <= x ? 3'b001 : 3'b001;\n            z <= 1'b0;\n        end\n        3'b011: begin\n            Y0 <= x ? 3'b100 : 3'b010;\n            z <= 1'b1;\n        end\n        3'b100: begin\n            Y0 <= x ? 3'b100 : 3'b011;\n            z <= 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "assign out = ~(in1 | in2);\n\nendmodule"}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "assign w = a;\nassign x = b;\nassign y = b;\nassign z = c;\n\nendmodule"}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or posedge ar)\nbegin\n\tif (ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\nendmodule"}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @(*) begin\n    case (sel)\n        3'd0: out = data0;\n        3'd1: out = data1;\n        3'd2: out = data2;\n        3'd3: out = data3;\n        3'd4: out = data4;\n        3'd5: out = data5;\n        default: out = 4'b0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\n\nalways @(posedge clk) begin\n\tif (load == 1) begin\n\t\tcounter <= data;\n\tend else begin\n\t\tif (counter > 0) begin\n\t\t\tcounter <= counter - 1;\n\t\tend\n\tend\nend\n\nassign tc = (counter == 0);\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\nreg [3:0] state;\nreg start_shifting;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= 4'b0000;\n        start_shifting <= 0;\n    end else begin\n        case(state)\n            4'b0000: begin\n                if(data) state <= 4'b0001;\n            end\n            4'b0001: begin\n                if(data) state <= 4'b0011;\n                else state <= 4'b0000;\n            end\n            4'b0011: begin\n                if(data) state <= 4'b0011;\n                else state <= 4'b0010;\n            end\n            4'b0010: begin\n                if(data) begin\n                    state <= 4'b0001;\n                    start_shifting <= 1;\n                end\n                else state <= 4'b0000;\n            end\n        endcase\n    end\nend\n\nendmodule\n"}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk)\nbegin\n\tif (reset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\nendmodule"}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "always @(posedge clk) begin\n\tfor (int i=0; i<8; i=i+1) begin\n\t\tif (in[i] & !in_prev[i])\n\t\t\tanyedge[i] <= 1;\n\t\telse\n\t\t\tanyedge[i] <= 0;\n\tend\n\tin_prev <= in;\nend\n\nendmodule"}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset == 1) begin\n\t\tq <= 4'b0001;\n\tend else begin\n\t\tif (q == 4'b1010) begin\n\t\t\tq <= 4'b0001;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1) begin\n        q <= q + 3;\n    end else begin\n        q <= 0;\n    end\nend\nendmodule"}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        q <= 5'b1;\n    end else begin\n        q <= {q[3] ^ q[0], q[4:1]};\n    end\nend\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "always @(*) begin\n\tcase (do_sub)\n\t\t0: out = a + b;\n\t\t1: out = a - b;\n\tendcase\n\n\tif (out == 8'b0)\n\t\tresult_is_zero = 1;\n    else\n        result_is_zero = 0;\nend\n\nendmodule"}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "assign f = !(x[4] & x[3] & x[2]) | (x[3] & x[1]) | (x[4] & x[3] & !x[1]) | (x[4] & x[2] & !x[1]); \n\nendmodule"}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case (code)\n        8'h45: begin\n            out <= 4'b0000;\n            valid <= 1;\n        end\n        8'h16: begin\n            out <= 4'b0001;\n            valid <= 1;\n        end\n        8'h1e: begin\n            out <= 4'b0010;\n            valid <= 1;\n        end\n        8'h26: begin\n            out <= 4'b0011;\n            valid <= 1;\n        end\n        8'h25: begin\n            out <= 4'b0100;\n            valid <= 1;\n        end\n        8'h2e: begin\n            out <= 4'b0101;\n            valid <= 1;\n        end\n        8'h36: begin\n            out <= 4'b0110;\n            valid <= 1;\n        end\n        8'h3d: begin\n            out <= 4'b0111;\n            valid <= 1;\n        end\n        8'h3e: begin\n            out <= 4'b1000;\n            valid <= 1;\n        end\n        8'h46: begin\n            out <= 4'b1001;\n            valid <= 1;\n        end\n        default: begin\n            out <= 4'b0000;\n            valid <= 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "\n  assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\n\nendmodule"}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @(*) begin\n\tif (c == 0) begin\n\t\tif (a == 0 && b == 0) out = 1;\n\t\telse if (a == 0 && b == 1) out = 0;\n\t\telse if (a == 1 && b == 0) out = 1;\n\t\telse if (a == 1 && b == 1) out = 1;\n\tend\n\telse if (c == 1) begin\n\t\tif (a == 0 && b == 0) out = 0;\n\t\telse if (a == 0 && b == 1) out = d;\n\t\telse if (a == 1 && b == 0) out = 1;\n\t\telse if (a == 1 && b == 1) out = 1;\n\tend\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] q_reg;\n\nalways @(posedge clk) begin\n    if (shift_ena) begin\n        q_reg <= {q_reg[2:0], data};\n    end\n    if (count_ena) begin\n        q_reg <= q_reg - 1;\n    end\nend\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "\nassign out = in;\n\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "reg [3:0] counter;\n\nalways @(posedge clk or posedge reset)begin\n\tif(reset)begin\n\t\tshift_ena <= 1;\n\t\tcounter <= 4'b1111;\n\tend\n\telse begin\n\t\tif(counter > 0)\n\t\t\tcounter <= counter - 1;\n\t\tif(counter == 0)\n\t\t\tshift_ena <= 0;\n\tend\nend\n\nendmodule"}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 4'b0000;\n\tend else begin\n\t\tif (q == 4'b1111) begin\n\t\t\tq <= 4'b0000;\n\t\tend else begin\n\t\t\tq <= q + 4'b0001;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2) begin\n\t\tout_always = b;\n\tend\n\telse begin\n\t\tout_always = a;\n\tend\nend\n\nendmodule"}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "\n    assign out = (a & ~b) | (b & c);\nendmodule"}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "    reg [1:0] state, next_state;\n\n    // State register\n    always @(posedge clk or negedge resetn) begin\n        if (~resetn) begin\n            state <= 2'b00; // State A\n        end else begin\n            state <= next_state;\n        end\n    end\n\n    // Next state and output logic\n    always @(*) begin\n        case (state)\n            2'b00: begin // State A\n                if (r[1] == 1) begin\n                    next_state = 2'b01; // Transition to state B\n                    g = 3'b001; // Device 1 granted access\n                end else if (r[2] == 1) begin\n                    next_state = 2'b10; // Transition to state C\n                    g = 3'b010; // Device 2 granted access\n                end else if (r[3] == 1) begin\n                    next_state = 2'b11; // Transition to state D\n                    g = 3'b100; // Device 3 granted access\n                end else begin\n                    next_state = 2'b00; // Stay in state A\n                    g = 3'b000; // No device granted access\n                end\n            end\n            2'b01: begin // State B\n                if (r[1] == 1) begin\n                    next_state = 2'b01; // Stay in state B\n                    g = 3'b001; // Device 1 granted access\n                end else begin\n                    next_state = 2'b00; // Transition to state A\n                    g = 3'b000; // No device granted access\n                end\n            end\n            2'b10: begin // State C\n                if (r[2] == 1) begin\n                    next_state = 2'b10; // Stay in state C\n                    g = 3'b010; // Device 2 granted access\n                end else begin\n                    next_state = 2'b00; // Transition to state A\n                    g = 3'b000; // No device granted access\n                end\n            end\n            2'b11: begin // State D\n                next_state = 2'b00; // Transition to state A\n                g = 3'b000; // No device granted access\n            end\n        endcase\n    end\n\nendmodule"}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] count;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tcount <= 4'b0;\n\tend else begin\n\t\tif (count == 4'b1001) begin\n\t\t\tcount <= 4'b0;\n\t\tend else begin\n\t\t\tcount <= count + 4'b1;\n\t\tend\n\tend\nend\n\nassign q = count;\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "reg [1:0] state;\nreg done;\nreg [7:0] byte_counter;\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\t\tbyte_counter <= 0;\n\t\tdone <= 0;\n\tend else begin\n\t\tcase (state)\n\t\t\t2'b00: begin\n\t\t\t\tif (in[3] == 1'b1) begin\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\t\tbyte_counter <= 1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b01: begin\n\t\t\t\tif (byte_counter == 2) begin\n\t\t\t\t\tstate <= 2'b10;\n\t\t\t\t\tdone <= 1;\n\t\t\t\tend else begin\n\t\t\t\t\tbyte_counter <= byte_counter + 1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b10: begin\n\t\t\t\tstate <= 2'b00;\n\t\t\tend\n\t\tendcase\n\tend\nend\nendmodule"}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "\n  assign out = (sel == 1) ? b : a;\nendmodule"}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = in[0] & in[1] & in[2] & in[3];\nassign out_or = in[0] | in[1] | in[2] | in[3];\nassign out_xor = in[0] ^ in[1] ^ in[2] ^ in[3];\n\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 3'b000;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t3'b000: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b000;\n\t\t\tend\n\t\tend\n\t\t3'b001: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b100;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\tend\n\t\tend\n\t\t3'b010: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b010;\n\t\t\tend\n\t\tend\n\t\t3'b011: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b010;\n\t\t\t\tz = 1'b1;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\tend\n\t\tend\n\t\t3'b100: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b100;\n\t\t\t\tz = 1'b1;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @ (posedge clk or negedge resetn) begin\n    if (~resetn) begin\n        state <= 2'b00; // State A\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @ * begin\n    next_state = state;\n    f = 1'b0;\n    g = 1'b0;\n\n    case (state)\n        2'b00: begin // State A\n            if (resetn == 1'b0) begin\n                next_state = 2'b00; // State A\n            end else begin\n                next_state = 2'b01; // Move to next state\n            end\n        end\n        2'b01: begin // State B\n            f = 1'b1;\n            next_state = 2'b10; // Transition to State C\n        end\n        2'b10: begin // State C\n            if ((x == 1'b1) && ($rose(clk))) begin\n                next_state = 2'b11; // Move to next state\n            end\n        end\n        2'b11: begin // State D\n            if (g == 1'b0) begin\n                if ($rose(x)) begin\n                    next_state = 2'b10; // Reset back to State C\n                end\n            end else begin\n                if ($rose(clk)) begin\n                    if (y == 1'b1) begin\n                        g = 1'b1;\n                    end\n                    next_state = 2'b11; // Remain in State D\n                end\n            end\n        end\n        default: begin\n            next_state = 2'b00; // Default to State A\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(negedge clk) begin\n\tif (reset == 1) begin\n\t\tq <= 8'b00110100;\n\telse begin\n\t\tq <= d;\n\tend\nend\n\nendmodule"}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "assign parity = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7]; \n\nendmodule"}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case (state)\n        2'b00: begin\n            next_state = in ? 2'b01 : 2'b00;\n            out = 1'b0;\n        end\n        2'b01: begin\n            next_state = in ? 2'b10 : 2'b01;\n            out = 1'b0;\n        end\n        2'b10: begin\n            next_state = in ? 2'b00 : 2'b11;\n            out = 1'b0;\n        end\n        2'b11: begin\n            next_state = in ? 2'b10 : 2'b01;\n            out = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\n  // Define the logic of the module based on the given simulation waveform\n  reg z;\n\n  always @* begin\n    if (x & y)\n      z = 1;\n    else\n      z = 0;\n  end\n\nendmodule\n"}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\n// State register\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= 3'b000; // State A\n\telse\n\t\tstate <= next_state;\nend\n\n// State table\nalways @(*)\nbegin\n\tcase(state)\n\t\t3'b000: // State A\n\t\t\tbegin\n\t\t\t\tif (w)\n\t\t\t\t\tnext_state = 3'b001; // Transition to state B\n\t\t\t\telse\n\t\t\t\t\tnext_state = 3'b000; // Stay in state A\n\t\t\tend\n\t\t3'b001: // State B\n\t\t\tbegin\n\t\t\t\tif (w)\n\t\t\t\t\tnext_state = 3'b010; // Transition to state C\n\t\t\t\telse\n\t\t\t\t\tnext_state = 3'b011; // Transition to state D\n\t\t\tend\n\t\t3'b010: // State C\n\t\t\tbegin\n\t\t\t\tif (w)\n\t\t\t\t\tnext_state = 3'b100; // Transition to state E\n\t\t\t\telse\n\t\t\t\t\tnext_state = 3'b011; // Transition to state D\n\t\t\tend\n\t\t3'b011: // State D\n\t\t\tbegin\n\t\t\t\tif (w)\n\t\t\t\t\tnext_state = 3'b110; // Transition to state F\n\t\t\t\telse\n\t\t\t\t\tnext_state = 3'b000; // Transition to state A\n\t\t\tend\n\t\t3'b100: // State E\n\t\t\tbegin\n\t\t\t\tif (w)\n\t\t\t\t\tnext_state = 3'b100; // Stay in state E\n\t\t\t\telse\n\t\t\t\t\tnext_state = 3'b011; // Transition to state D\n\t\t\tend\n\t\t3'b110: // State F\n\t\t\tbegin\n\t\t\t\tif (w)\n\t\t\t\t\tnext_state = 3'b010; // Transition to state C\n\t\t\t\telse\n\t\t\t\t\tnext_state = 3'b011; // Transition to state D\n\t\t\tend\n\tendcase\nend\n\n// Assigning output z based on state\nalways @(*)\nbegin\n\tcase(state)\n\t\t3'b100: z = 1;\n\t\tdefault: z = 0;\n\tendcase\nend\n\nendmodule"}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk) begin\n    if (!resetn) begin\n        q <= 16'b0;\n    end else begin\n        if (byteena[0]) begin\n            q[7:0] <= d[7:0];\n        end\n        if (byteena[1]) begin\n            q[15:8] <= d[15:8];\n        end\n    end\nend\n\nendmodule"}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "always @(posedge clk) begin\n    pedge <= pedge & ~in | (pedge ^ in);\nend\nendmodule"}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "\n    reg state;\n\n    always @ (posedge clock) begin\n        if (state == 2'b00 && a) begin\n            p <= 1;\n        end else begin\n            p <= 0;\n        end\n        \n        if (state == 2'b00 && a) begin\n            state <= 1;\n        end else if (state == 2'b01) begin\n            state <= 2;\n        end else if (state == 2'b10) begin\n            state <= 3;\n        end else begin\n            state <= 0;\n        end\n    end\n\n    always @ (posedge clock) begin\n        if (state == 2'b11) begin\n            q <= 1;\n        end else begin\n            q <= 0;\n        end\n    end\nendmodule\n"}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "reg [511:0] next_state;\n\nalways @ (posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        next_state[0] = q[1] ^ q[0];\n        next_state[511] = q[510] ^ q[511];\n        generate\n            genvar i;\n            for (i = 1; i < 511; i = i+1) begin : cell_loop\n                next_state[i] = q[i-1] ^ q[i+1];\n            end\n        endgenerate\n        q <= next_state;\n    end\nend\n\nendmodule"}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "\nassign z = (A == B) ? 1 : 0;\nendmodule\n"}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "// Implementing out_both\nalways @* begin\n    for (int i = 0; i < 99; i = i + 1) begin\n        out_both[i] = (in[i] & in[i+1]);\n    end\nend\n\n// Implementing out_any\nalways @* begin\n    for (int i = 1; i < 100; i = i + 1) begin\n        out_any[i] = (in[i] | in[i-1]);\n    end\nend\n\n// Implementing out_different\nalways @* begin\n    out_different[0] = (in[0] ^ in[99]);\n    for (int i = 1; i < 100; i = i + 1) begin\n        out_different[i] = (in[i] ^ in[i-1]);\n    end\nend\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "always @ (posedge ena) begin\n\tif (ena) begin\n\t\tq <= d;\n\tend\nend\n\nendmodule"}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "reg [255:0] selected_input;\nalways @(*) begin\n\tcase(sel)\n\t\t0: selected_input = in[3:0];\n\t\t1: selected_input = in[7:4];\n\t\t2: selected_input = in[11:8];\n\t\t3: selected_input = in[15:12];\n\t\t4: selected_input = in[19:16];\n\t\t5: selected_input = in[23:20];\n\t\t6: selected_input = in[27:24];\n\t\t7: selected_input = in[31:28];\n\t\t8: selected_input = in[35:32];\n\t\t9: selected_input = in[39:36];\n\t\t10: selected_input = in[43:40];\n\t\t11: selected_input = in[47:44];\n\t\t12: selected_input = in[51:48];\n\t\t13: selected_input = in[55:52];\n\t\t14: selected_input = in[59:56];\n\t\t15: selected_input = in[63:60];\n\t\t16: selected_input = in[67:64];\n\t\t17: selected_input = in[71:68];\n\t\t18: selected_input = in[75:72];\n\t\t19: selected_input = in[79:76];\n\t\t20: selected_input = in[83:80];\n\t\t21: selected_input = in[87:84];\n\t\t22: selected_input = in[91:88];\n\t\t23: selected_input = in[95:92];\n\t\t24: selected_input = in[99:96];\n\t\t25: selected_input = in[103:100];\n\t\t26: selected_input = in[107:104];\n\t\t27: selected_input = in[111:108];\n\t\t28: selected_input = in[115:112];\n\t\t29: selected_input = in[119:116];\n\t\t30: selected_input = in[123:120];\n\t\t31: selected_input = in[127:124];\n\t\t32: selected_input = in[131:128];\n\t\t33: selected_input = in[135:132];\n\t\t34: selected_input = in[139:136];\n\t\t35: selected_input = in[143:140];\n\t\t36: selected_input = in[147:144];\n\t\t37: selected_input = in[151:148];\n\t\t38: selected_input = in[155:152];\n\t\t39: selected_input = in[159:156];\n\t\t40: selected_input = in[163:160];\n\t\t41: selected_input = in[167:164];\n\t\t42: selected_input = in[171:168];\n\t\t43: selected_input = in[175:172];\n\t\t44: selected_input = in[179:176];\n\t\t45: selected_input = in[183:180];\n\t\t46: selected_input = in[187:184];\n\t\t47: selected_input = in[191:188];\n\t\t48: selected_input = in[195:192];\n\t\t49: selected_input = in[199:196];\n\t\t50: selected_input = in[203:200];\n\t\t51: selected_input = in[207:204];\n\t\t52: selected_input = in[211:208];\n\t\t53: selected_input = in[215:212];\n\t\t54: selected_input = in[219:216];\n\t\t55: selected_input = in[223:220];\n\t\t56: selected_input = in[227:224];\n\t\t57: selected_input = in[231:228];\n\t\t58: selected_input = in[235:232];\n\t\t59: selected_input = in[239:236];\n\t\t60: selected_input = in[243:240];\n\t\t61: selected_input = in[247:244];\n\t\t62: selected_input = in[251:248];\n\t\t63: selected_input = in[255:252];\n\t\t64: selected_input = in[259:256];\n\t\t65: selected_input = in[263:260];\n\t\t66: selected_input = in[267:264];\n\t\t67: selected_input = in[271:268];\n\t\t68: selected_input = in[275:272];\n\t\t69: selected_input = in[279:276];\n\t\t70: selected_input = in[283:280];\n\t\t71: selected_input = in[287:284];\n\t\t72: selected_input = in[291:288];\n\t\t73: selected_input = in[295:292];\n\t\t74: selected_input = in[299:296];\n\t\t75: selected_input = in[303:300];\n\t\t76: selected_input = in[307:304];\n\t\t77: selected_input = in[311:308];\n\t\t78: selected_input = in[315:312];\n\t\t79: selected_input = in[319:316];\n\t\t80: selected_input = in[323:320];\n\t\t81: selected_input = in[327:324];\n\t\t82: selected_input = in[331:328];\n\t\t83: selected_input = in[335:332];\n\t\t84: selected_input = in[339:336];\n\t\t85: selected_input = in[343:340];\n\t\t86: selected_input = in[347:344];\n\t\t87: selected_input = in[351:348];\n\t\t88: selected_input = in[355:352];\n\t\t89: selected_input = in[359:356];\n\t\t90: selected_input = in[363:360];\n\t\t91: selected_input = in[367:364];\n\t\t92: selected_input = in[371:368];\n\t\t93: selected_input = in[375:372];\n\t\t94: selected_input = in[379:376];\n\t\t95: selected_input = in[383:380];\n\t\t96: selected_input = in[387:384];\n\t\t97: selected_input = in[391:388];\n\t\t"}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "assign out = (sel == 0) ? a :\n               (sel == 1) ? b :\n               (sel == 2) ? c :\n               (sel == 3) ? d :\n               (sel == 4) ? e :\n               (sel == 5) ? f :\n               (sel == 6) ? g : \n               (sel == 7) ? h :\n               (sel == 8) ? i : 16'b1; \n\nendmodule"}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "assign out_or_bitwise = a | b;\nassign out_or_logical = a || b;\nassign out_not = ~{~b, ~a};\n\nendmodule"}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        4'b0001: begin\n            next_state = in ? 4'b0010 : 4'b0001;\n            out = 1'b0;\n        end\n        4'b0010: begin\n            next_state = in ? 4'b0100 : 4'b0010;\n            out = 1'b0;\n        end\n        4'b0100: begin\n            next_state = in ? 4'b0001 : 4'b1000;\n            out = 1'b0;\n        end\n        4'b1000: begin\n            next_state = in ? 4'b0100 : 4'b0010;\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 4'b0000;\n            out = 1'b0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "always @(a, b, c, d) begin\n\tif (a <= b && a <= c && a <= d) begin\n\t\tmin <= a;\n\tend\n\telse if (b <= c && b <= d) begin\n\t\tmin <= b;\n\tend\n\telse if (c <= d) begin\n\t\tmin <= c;\n\tend\n\telse begin\n\t\tmin <= d;\n\tend\nend\n\nendmodule"}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "and gate and1 (out_and, a, b);\nor gate or1 (out_or, a, b);\nxor gate xor1 (out_xor, a, b);\nnand gate nand1 (out_nand, a, b);\nnor gate nor1 (out_nor, a, b);\nxnor gate xnor1 (out_xnor, a, b);\nand notb_gate (out_notb, a, ~b);\n\nendmodule"}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (~a & ~b & c) | (a & ~b & ~c) | (~a & b & d) | (a & b & ~d); \n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 2'b00;\n    end \n    else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    next_state = state;\n\n    case (state)\n        2'b00: begin  // State A\n            if (s == 1) begin\n                next_state = 2'b01; // Move to state B\n            end \n            else begin\n                next_state = 2'b00; // Stay in state A\n            end\n        end\n\n        2'b01: begin  // State B\n            if (w == 1) begin\n                next_state = 2'b10; // Move to state C\n            end \n            else begin\n                next_state = 2'b01; // Stay in state B\n            end\n        end\n\n        2'b10: begin  // State C\n            if (w == 1) begin\n                next_state = 2'b11; // Move to state D\n            end \n            else begin\n                next_state = 2'b01; // Go back to state B\n            end\n        end\n\n        2'b11: begin  // State D\n            if (w == 1) begin\n                z = 1; // Set output z to 1\n                next_state = 2'b01; // Go back to state B\n            end \n            else begin\n                z = 0; // Set output z to 0\n                next_state = 2'b01; // Go back to state B\n            end\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "// Sign-extension module\nmodule sign_extension_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n\t\n\tassign out = {{24{in[7]}}, in};\n\nendmodule"}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "reg [3:0] d_flops;\nreg out;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\td_flops <= 4'b0;\n\tend\n\telse begin\n\t\td_flops <= {d_flops[2:0], in};\n\tend\nend\n\nassign out = d_flops[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @(*) begin\n    case(in)\n        4'b0000: pos = 2'b00;\n        4'b0001: pos = 2'b01;\n        4'b0010: pos = 2'b10;\n        4'b0011: pos = 2'b01;\n        4'b0100: pos = 2'b11;\n        4'b0101: pos = 2'b00;\n        4'b0110: pos = 2'b01;\n        4'b0111: pos = 2'b00;\n        4'b1000: pos = 2'b10;\n        4'b1001: pos = 2'b11;\n        4'b1010: pos = 2'b00;\n        4'b1011: pos = 2'b01;\n        4'b1100: pos = 2'b10;\n        4'b1101: pos = 2'b11;\n        4'b1110: pos = 2'b00;\n        4'b1111: pos = 2'b01;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= OFF;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case (state)\n        OFF: begin\n            if (j) begin\n                next_state = ON;\n            end else begin\n                next_state = OFF;\n            end\n        end\n        ON: begin\n            if (k) begin\n                next_state = OFF;\n            end else begin\n                next_state = ON;\n            end\n        end\n        default: next_state = OFF;\n    endcase\nend\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": ""}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "assign one = 1;    // Drive logic high to the output\nendmodule"}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "always @(*) begin\n\tfor (int i = 0; i < 100; i = i + 1) begin\n\t\tout[i] = in[99 - i];\n\tend\nend\n\nendmodule"}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "always @(posedge clk) begin\n    out <= in ^ out;\nend\n\nendmodule"}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (areset) begin\n\t\tq <= 4'b0;\n\tend else begin\n\t\tif (load) begin\n\t\t\tq <= data;\n\t\tend else begin\n\t\t\tif (ena) begin\n\t\t\t\tq <= {q[2:0], 1'b0};\n\t\t\tend\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = (x3 & ~x2 & x1) | (~x3 & x2 & x1); \n\nendmodule"}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "reg [7:0] dff [7:0];\n\nalways @ (posedge clk or areset)\nbegin\n\tif (areset)\n\t\tq <= 8'b0;\n\telse\n\tbegin\n\t\tq <= {dff[7], dff[6], dff[5], dff[4], dff[3], dff[2], dff[1], dff[0]};\n\t\tdff[0] <= d[0];\n\t\tdff[1] <= d[1];\n\t\tdff[2] <= d[2];\n\t\tdff[3] <= d[3];\n\t\tdff[4] <= d[4];\n\t\tdff[5] <= d[5];\n\t\tdff[6] <= d[6];\n\t\tdff[7] <= d[7];\n\tend\nend\n\nendmodule"}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\n\tassign out_or = |in;\n\tassign out_xor = ^in;\n\nendmodule"}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "\n\tassign sum = a ^ b;\n\tassign cout = a & b;\nendmodule"}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "always @(*) begin\n\tif (cpu_overheated)\n\t\tshut_off_computer = 1;\n\telse\n\t\tshut_off_computer = 0;\nend\n\nalways @(*) begin\n\tif (!arrived)\n\t\tkeep_driving = !gas_tank_empty;\n\telse\n\t\tkeep_driving = 0;\nend\n\nendmodule"}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= OFF;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tOFF: begin\n\t\t\tif (j) begin\n\t\t\t\tnext_state = ON;\n\t\t\tend else begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend\n\t\tend\n\t\tON: begin\n\t\t\tif (k) begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend else begin\n\t\t\t\tnext_state = ON;\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = OFF;\n\tendcase\nend\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "assign {a,b,c,d,e,f,2'b11} = {w,x,y,z}; \nendmodule"}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": " q = ~(~a & b & ~c & d);\nendmodule\n"}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = a & b;\n\nendmodule"}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg state, next_state;\n\nparameter B = 1'b0;\nparameter A = 1'b1;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= B;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tB: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\t\tout = 1;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\t\tout = 1;\n\t\t\tend\n\t\tend\n\t\tA: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = A;\n\t\t\t\tout = 0;\n\t\t\tend else begin\n\t\t\t\tnext_state = B;\n\t\t\t\tout = 0;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "\n\tassign {cout, sum} = a + b + cin;\nendmodule"}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\n\tassign out = ~(in1 ^ in2) ^ in3;\nendmodule\n"}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "assign mux_in[0] = (~c & ~d);\nassign mux_in[1] = (c & ~d);\nassign mux_in[2] = (c & ~d) | (c & d) | (~c & d);\nassign mux_in[3] = (c & ~d) | (~c & d) | (c & d); \n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @ (posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= A;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @ *\nbegin\n\tcase(state)\n\t\tA: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\t\tz = 1'b0;\n\t\tend\n\t\tB: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = B;\n\t\t\tz = 1'b1;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "\nreg q, state;\n\nalways @(posedge clk) begin\n    if (a & ~b & state)\n        q <= 1;\n    else if (a & ~b & ~state)\n        q <= 1;\n    else if (~a & b & q)\n        q <= 0;\n    else if (~a & b & ~q)\n        q <= 0;\n    state <= a & b;\nend\n\nassign state = q & ~a & ~b; // Output state\n\n"}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "always_comb begin\n    case (x)\n        4'b0000: f = 1'b1;\n        4'b0001: f = 1'b0;\n        4'b0011: f = 1'b1;\n        4'b0010: f = 1'b1;\n        4'b0110: f = 1'b0;\n        4'b0111: f = 1'b1;\n        4'b1111: f = 1'b1;\n        4'b1110: f = 1'b0;\n        4'b1010: f = 1'b1;\n        default: f = 1'b0;\n    endcase\nend\nendmodule"}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "reg [2:0] state, next_state;\n\nparameter IDLE = 3'b000;\nparameter ONE = 3'b001;\nparameter TWO = 3'b010;\nparameter ERR = 3'b011;\n\nalways @ (posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @ (*) begin\n\tdisc = 1'b0;\n\tflag = 1'b0;\n\terr = 1'b0;\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = ONE;\n\t\t\tend else begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tONE: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = TWO;\n\t\t\tend else begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tTWO: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = ERR;\n\t\t\tend else begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tERR: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = ERR;\n\t\t\tend else begin\n\t\t\t\tflag = 1'b1;\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        counting <= 0;\n        done <= 0;\n    end else begin\n        if (!counting) begin\n            done <= 0;\n            // Logic to detect input pattern (1101) and shift in next 4 bits for delay calculation\n            // State transition to counting state\n            counting <= 1;\n        end else begin\n            if (count == 0) begin\n                counting <= 0;\n                done <= 1;\n            end else begin\n                // Countdown for delay calculation\n                count <= count - 1;\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        fr3 <= 1'b1;\n        fr2 <= 1'b1;\n        fr1 <= 1'b1;\n        dfr <= 1'b1;\n    end else begin\n        case(s)\n            3'b111: begin // Above s[3]\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b0;\n                dfr <= 1'b0;\n            end\n            3'b110: begin // Between s[3] and s[2]\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            3'b100: begin // Between s[2] and s[1]\n                fr3 <= 1'b0;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            3'b000: begin // Below s[1]\n                fr3 <= 1'b1;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            default: begin\n                fr3 <= 1'b1;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b1;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "\nreg [3:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 4'b0000;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case (state)\n        4'b0000: begin // Idle state\n            if (in == 1'b0) begin\n                next_state = 4'b0001; // Move to start bit detection state\n            end else begin\n                next_state = 4'b0000; // Stay in idle state\n            end\n        end\n        4'b0001: begin // Start bit detection state\n            next_state = 4'b0010; // Move to data reception state\n        end\n        4'b0010: begin // Data reception state\n            next_state = state + 1; // Transition to next data bit reception state\n        end\n        4'b1010: begin // Stop bit detection state\n            if (in == 1'b1) begin\n                next_state = 4'b0000; // Move back to idle state\n            end else begin\n                next_state = 4'b1010; // Stay in stop bit detection state\n            end\n        end\n        default: begin\n            next_state = 4'b0000; // Default to idle state\n        end\n    endcase\nend\n\nassign done = (state == 4'b1011);\n\nendmodule\n"}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "\nreg [3:0] state;\nreg [7:0] data_out;\nreg [2:0] bit_count;\nreg done;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 4'b0000;\n\t\tbit_count <= 3'b000;\n\t\tdata_out <= 8'b0;\n\t\tdone <= 1'b0;\n\tend else begin\n\t\tcase(state)\n\t\t\t4'b0000: begin // IDLE state\n\t\t\t\tif (in == 1'b0) begin\n\t\t\t\t\tstate <= 4'b0001; // Transition to START_BIT state\n\t\t\t\t\tbit_count <= 3'b000; // Reset bit_count\n\t\t\t\tend\n\t\t\tend\n\t\t\t4'b0001: begin // START_BIT state\n\t\t\t\tif (in == 1'b0) begin\n\t\t\t\t\tstate <= 4'b0010; // Transition to DATA state\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= 4'b0000; // Incorrect start bit, go back to IDLE\n\t\t\t\tend\n\t\t\tend\n\t\t\t4'b0010: begin // DATA state\n\t\t\t\tdata_out[bit_count] <= in;\n\t\t\t\tbit_count <= bit_count + 1;\n\n\t\t\t\tif (bit_count == 3'b111) begin // All data bits received\n\t\t\t\t\tstate <= 4'b0011; // Transition to STOP_BIT state\n\t\t\t\t\tbit_count <= 3'b000; // Reset bit_count\n\t\t\t\tend\n\t\t\tend\n\t\t\t4'b0011: begin // STOP_BIT state\n\t\t\t\tif (in == 1'b1) begin\n\t\t\t\t\tstate <= 4'b0000; // Transition to IDLE state\n\t\t\t\t\tdone <= 1'b1; // Output byte is ready\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign out_byte = data_out;\n\nendmodule"}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "reg [6:0] global_history = 7'b0;\nreg [6:0] pht_index;\nreg [1:0] pht[127:0] = 128'h0;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tglobal_history <= 7'b0;\n\t\tpht <= 128'h0;\n\tend else begin\n\t\tif (train_valid) begin\n\t\t\tpht_index = {global_history[6] ^ train_pc[6:0]};\n\t\t\tif (train_mispredicted) begin\n\t\t\t\tglobal_history <= train_history;\n\t\t\tend else begin\n\t\t\t\tpht[pht_index] <= (train_taken) ? (pht[pht_index] == 2'b11 ? 2'b11 : pht[pht_index] + 1) : (pht[pht_index] == 2'b00 ? 2'b00 : pht[pht_index] - 1);\n\t\t\t\tglobal_history <= {global_history[5:0], train_taken};\n\t\t\tend\n\t\tend\n\tend\nend\n\nalways @(*) begin\n\tif (predict_valid) begin\n\t\tpht_index = {global_history[6] ^ predict_pc[6:0]};\n\t\tpredict_taken = (pht[pht_index] == 2'b11 || pht[pht_index] == 2'b10) ? 1 : 0;\n\t\tpredict_history = global_history;\n\tend\nend\n\nendmodule"}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [4:0] state, next_state;\n\nparameter WALK_LEFT = 5'b00001;\nparameter WALK_RIGHT = 5'b00010;\nparameter FALLING_AAAH = 5'b00100;\nparameter DIGGING = 5'b01000;\nparameter SPLATTER = 5'b10000;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\taaah = 0;\n\tdigging = 0;\n\twalk_left = 0;\n\twalk_right = 0;\n\t\n\tcase(state)\n\t\tWALK_LEFT: begin\n\t\t\tif (dig && ground) begin\n\t\t\t\tnext_state = DIGGING;\n\t\t\t\tdigging = 1;\n\t\t\tend\n\t\t\telse if (bump_left) begin\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\t\twalk_right = 1;\n\t\t\tend\n\t\t\telse if (ground == 0) begin\n\t\t\t\tnext_state = FALLING_AAAH;\n\t\t\t\taaah = 1;\n\t\t\tend\n\t\tend\n\t\t\t\n\t\tWALK_RIGHT: begin\n\t\t\tif (dig && ground) begin\n\t\t\t\tnext_state = DIGGING;\n\t\t\t\tdigging = 1;\n\t\t\tend\n\t\t\telse if (bump_right) begin\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\twalk_left = 1;\n\t\t\tend\n\t\t\telse if (ground == 0) begin\n\t\t\t\tnext_state = FALLING_AAAH;\n\t\t\t\taaah = 1;\n\t\t\tend\n\t\tend\n\t\t\t\n\t\tFALLING_AAAH: begin\n\t\t\tif (ground) begin\n\t\t\t\tif (state == DIGGING)\n\t\t\t\t\tnext_state = WALK_RIGHT; // Resuming previous direction after digging\n\t\t\t\telse\n\t\t\t\t\tnext_state = state; // Resuming previous walking direction after fall\n\t\t\tend\n\t\t\telse if (dig && ground)\n\t\t\t\tnext_state = DIGGING;\n\t\t\tif (next_state == FALLING_AAAH)\n\t\t\t\tif (state == WALK_LEFT)\n\t\t\t\t\twalk_left = 1;\n\t\t\t\telse\n\t\t\t\t\twalk_right = 1;\n\t\tend\n\t\t\t\n\t\tDIGGING: begin\n\t\t\tif (ground == 0) begin\n\t\t\t\tnext_state = FALLING_AAAH;\n\t\t\t\taaah = 1;\n\t\t\tend\n\t\t\telse if (!dig || !ground) begin\n\t\t\t\tif (state == WALK_LEFT)\n\t\t\t\t\twalk_left = 1;\n\t\t\t\telse\n\t\t\t\t\twalk_right = 1;\n\t\t\tend\n\t\tend\n\t\t\n\t\tSPLATTER: begin\n\t\t\t// All outputs stay 0\n\t\tend\n\tendcase\n\t\n\tif (state != SPLATTER) begin\n\t\tif (state != FALLING_AAAH)\n\t\t\tif (state != SPLATTER)\n\t\t\t\tif (state != DIGGING)\n\t\t\t\t\tif (aaah)\n\t\t\t\t\t\tif (ground)\n\t\t\t\t\t\t\tif (state == WALK_LEFT)\n\t\t\t\t\t\t\t\twalk_left = 1;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\twalk_right = 1;\n\t\t\t\t\t\t\t\t\t\n\t\tif (state != DIGGING)\n\t\t\tif (digging)\n\t\t\t\tif (!dig || !ground)\n\t\t\t\t\tif (state == WALK_LEFT)\n\t\t\t\t\t\twalk_left = 1;\n\t\t\t\t\telse\n\t\t\t\t\t\twalk_right = 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "  reg [3:0] state;\n\n  always @(posedge clk or posedge reset) begin\n    if (reset) begin\n      state <= 4'b0000;\n      shift_ena <= 1'b0;\n      counting <= 1'b0;\n      done <= 1'b0;\n    end else begin\n      case (state)\n        4'b0000: begin // Waiting for start sequence\n          if (data == 4'b1101)\n            state <= 4'b0001;\n        end\n        4'b0001: begin // Detected start sequence, enable shift\n          shift_ena <= 1'b1;\n          state <= 4'b0010;\n        end\n        4'b0010: begin // Shift in 4 more bits\n          if (shift_ena == 1'b1)\n            state <= 4'b0011;\n          else\n            state <= 4'b0000;\n        end\n        4'b0011: begin // Wait for counters to finish counting\n          counting <= 1'b1;\n          if (done_counting)\n            state <= 4'b0100;\n        end\n        4'b0100: begin // Counting done, notify user\n          done <= 1'b1;\n          if (ack)\n            state <= 4'b0000;\n        end\n      endcase\n    end\n  end\n\nendmodule"}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        // Implement Game of Life rules\n        integer i, j, sum;\n        reg [255:0] next_q;\n\n        for (i = 0; i < 16; i = i + 1) begin\n            for (j = 0; j < 16; j = j + 1) begin\n                sum = q[((i+15)%16)*16 + ((j+15)%16)] + q[((i+15)%16)*16 + j] + q[((i+15)%16)*16 + ((j+1)%16)] +\n                      q[i*16 + ((j+15)%16)] + q[i*16 + ((j+1)%16)] +\n                      q[((i+1)%16)*16 + ((j+15)%16)] + q[((i+1)%16)*16 + j] + q[((i+1)%16)*16 + ((j+1)%16)];\n\n                if (sum <= 1) begin\n                    next_q[i*16 + j] <= 0;\n                end else if (sum == 2) begin\n                    next_q[i*16 + j] <= q[i*16 + j];\n                end else if (sum == 3) begin\n                    next_q[i*16 + j] <= 1;\n                end else begin\n                    next_q[i*16 + j] <= 0;\n                end\n            end\n        end\n\n        q <= next_q;\n    end\nend\n\nendmodule"}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [2:0] state, next_state;\n\nparameter IDLE = 3'b000;\nparameter FALLING = 3'b001;\nparameter DIGGING = 3'b010;\n\nalways @ (posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= IDLE;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tIDLE: begin\n\t\t\twalk_left = 1;\n\t\t\twalk_right = 0;\n\t\t\taaah = 0;\n\t\t\tdigging = 0;\n\t\t\t\n\t\t\tif (bump_left && !bump_right)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse if (!bump_left && bump_right)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse if (dig && ground)\n\t\t\t\tnext_state = DIGGING;\n\t\t\telse\n\t\t\t\tnext_state = IDLE;\n\t\tend\n\t\t\n\t\tFALLING: begin\n\t\t\twalk_left = 0;\n\t\t\twalk_right = 0;\n\t\t\taaah = 1;\n\t\t\tdigging = 0;\n\t\t\t\n\t\t\tif (ground)\n\t\t\t\tnext_state = IDLE;\n\t\t\telse\n\t\t\t\tnext_state = FALLING;\n\t\tend\n\t\t\n\t\tDIGGING: begin\n\t\t\twalk_left = (walk_right) ? 0 : 1;\n\t\t\twalk_right = (walk_left) ? 0 : 1;\n\t\t\taaah = 0;\n\t\t\tdigging = 1;\n\t\t\t\n\t\t\tif (!ground)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse if (dig && ground)\n\t\t\t\tnext_state = DIGGING;\n\t\t\telse\n\t\t\t\tnext_state = IDLE;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        pm <= 0;\n        hh <= 8'd0; // \"12\" in BCD\n        mm <= 8'd0; // \"00\" in BCD\n        ss <= 8'd0; // \"00\" in BCD\n    end else if (ena) begin\n        ss <= ss + 1;\n        if (ss == 8'd60) begin // 60 seconds\n            ss <= 8'd0;\n            mm <= mm + 1;\n            if (mm == 8'd60) begin // 60 minutes\n                mm <= 8'd0;\n                hh <= hh + 1;\n                if (hh[3:2] == 2'd3 && hh[1:0] == 2'd2) begin // 23 hours\n                    hh <= 8'd0; // reset to 00 hours\n                    pm <= ~pm; // toggle AM/PM\n                end else if (hh[1:0] == 2'd1 && hh[3:2] != 2'd0) begin\n                    hh <= hh + 8'd6; // increment 10 hours digits\n                end\n            end\n        end\n    end\nend\nendmodule"}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter WALK_LEFT = 2'b00;\nparameter WALK_RIGHT = 2'b01;\nparameter FALLING = 2'b10;\n\nalways @ (posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= WALK_LEFT;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case(state)\n        WALK_LEFT: begin\n            if (bump_left && !bump_right)\n                next_state = WALK_RIGHT;\n            else if (!bump_left && bump_right)\n                next_state = WALK_LEFT;\n            else if (ground)\n                next_state = WALK_LEFT;\n            else\n                next_state = FALLING;\n        end\n        WALK_RIGHT: begin\n            if (bump_left && !bump_right)\n                next_state = WALK_RIGHT;\n            else if (!bump_left && bump_right)\n                next_state = WALK_LEFT;\n            else if (ground)\n                next_state = WALK_RIGHT;\n            else\n                next_state = FALLING;\n        end\n        FALLING: begin\n            if (ground)\n                next_state = state;\n            else\n                next_state = FALLING;\n        end\n    endcase\nend\n\nalways @* begin\n    walk_left = (state == WALK_LEFT) ? 1'b1 : 1'b0;\n    walk_right = (state == WALK_RIGHT) ? 1'b1 : 1'b0;\n    aaah = (state == FALLING) ? 1'b1 : 1'b0;\nend\n\nendmodule"}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            q <= 4'b0000;\n        end else begin\n            if (ena[2]) begin\n                if (q[3] == 4'b1001) begin\n                    q[3] <= 4'b0000;\n                    if (q[7] == 4'b1001) begin\n                        q[7] <= 4'b0000;\n                        if (q[11] == 4'b1001) begin\n                            q[11] <= 4'b0000;\n                            if (q[15] == 4'b1001) begin\n                                q[15] <= 4'b0000;\n                            end else begin\n                                q[15] <= q[15] + 1;\n                            end\n                        end else begin\n                            q[11] <= q[11] + 1;\n                        end\n                    end else begin\n                        q[7] <= q[7] + 1;\n                    end\n                end else begin\n                    q[3] <= q[3] + 1;\n                end\n            end\n        end\n    end\n\nendmodule"}
{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "\n\tassign out = (sel == 0) ? a : b;\nendmodule"}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(y, w)\nbegin\n    case(y)\n        3'b000: Y2 <= (w == 1) ? 1 : 0;\n        3'b001: Y2 <= (w == 1) ? 0 : 1;\n        3'b010: Y2 <= (w == 1) ? 1 : 0;\n        3'b011: Y2 <= (w == 1) ? 1 : 0;\n        3'b100: Y2 <= (w == 1) ? 0 : 0;\n        3'b101: Y2 <= (w == 1) ? 1 : 0;\n        default: Y2 <= 0;\n    endcase\nend\nendmodule"}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "always @*\nbegin\n    if (vibrate_mode == 1)\n    begin\n        ringer <= 0;\n        motor <= 1;\n    end\n    else\n    begin\n        ringer <= 1;\n        motor <= 0;\n    end\nend\n\nendmodule"}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @* begin\n    out_alwaysblock = a & b;\nend\n\nendmodule"}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": ""}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1'b1)\n        q <= 1'b0;\n    else\n        q <= a;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [1:0] state;\nreg [7:0] num;\nreg [7:0] two_comp;\n\nparameter S0 = 2'b00, S1 = 2'b01;\n\nalways @ (posedge clk or negedge areset) begin\n\tif (~areset) begin\n\t\tstate <= S0;\n\t\tnum <= 8'b0;\n\t\ttwo_comp <= 8'b0;\n\tend else begin\n\t\tcase (state)\n\t\t\tS0: begin\n\t\t\t\tif (~x) begin\n\t\t\t\t\tstate <= S1;\n\t\t\t\t\tnum <= {7'b0, x};\n\t\t\t\tend\n\t\t\tend\n\t\t\tS1: begin\n\t\t\t\tif (x) begin\n\t\t\t\t\tstate <= S1;\n\t\t\t\t\tnum <= num + 1;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= S0;\n\t\t\t\t\ttwo_comp <= ~num + 1;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign z = two_comp;\n\nendmodule"}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or areset)\nbegin\n\tif (areset)\n\t\tstate <= 2'b00; // State A\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*)\nbegin\n\tcase (state)\n\t\t2'b00: // State A\n\t\tbegin\n\t\t\tif (in == 1)\n\t\t\t\tnext_state = 2'b10; // State D\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // State B\n\t\t\tout = 1'b0;\n\t\tend\n\n\t\t2'b01: // State B\n\t\tbegin\n\t\t\tif (in == 1)\n\t\t\t\tnext_state = 2'b01; // State B\n\t\t\telse\n\t\t\t\tnext_state = 2'b11; // State C\n\t\t\tout = 1'b0;\n\t\tend\n\n\t\t2'b10: // State C\n\t\tbegin\n\t\t\tif (in == 1)\n\t\t\t\tnext_state = 2'b11; // State C\n\t\t\telse\n\t\t\t\tnext_state = 2'b00; // State A\n\t\t\tout = 1'b0;\n\t\tend\n\n\t\t2'b11: // State D\n\t\tbegin\n\t\t\tif (in == 1)\n\t\t\t\tnext_state = 2'b01; // State B\n\t\t\telse\n\t\t\t\tnext_state = 2'b10; // State D\n\t\t\tout = 1'b1;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": ""}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "always @(posedge clk)\nbegin\n    if (r)\n        q <= 0;\n    else\n        q <= d;\nend\n\nendmodule"}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "reg [63:0] q_reg;\n\nalways @(posedge clk) begin\n    if (load)\n        q_reg <= data;\n    else if (ena) begin\n        case (amount)\n            2'b00: q_reg <= {q_reg[62:0], q_reg[63]};\n            2'b01: q_reg <= {q_reg[55:0], q_reg[63:56]};\n            2'b10: q_reg <= {q_reg[0], q_reg[63:1]};\n            2'b11: q_reg <= {q_reg[7:0], q_reg[63:8]};\n        endcase\n    end\nend\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn) begin\n\tif (~aresetn) begin\n\t\tstate <= S0;\n\t\tz <= 0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tz <= (state == S2) ? 1'b1 : 1'b0;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tS0: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tend\n\t\tS1: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tend\n\t\tS2: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = S1;\n\t\t\telse\n\t\t\t\tnext_state = S0;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 3'b000;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\t3'b000: begin // A\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b000;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\tend\n\t\tend\n\t\t3'b001: begin // B\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011;\n\t\t\tend\n\t\tend\n\t\t3'b010: begin // C\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b100;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011;\n\t\t\tend\n\t\tend\n\t\t3'b011: begin // D\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b110;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\tend\n\t\tend\n\t\t3'b100: begin // E\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b100;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\tend\n\t\tend\n\t\t3'b101: begin // F\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = 3'b000; // default state is A\n\tendcase\nend\n\nassign z = (state == 3'b101);\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "reg [1:0] state;\nreg [7:0] byte1, byte2, byte3;\nreg [23:0] out_bytes_reg;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\t\tout_bytes_reg <= 24'b0;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\t2'b00: begin // State 0: Wait for in[3] = 1\n\t\t\t\tif (in[3] == 1) begin\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\t\tbyte1 <= in;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b01: begin // State 1: Receive bytes 1 and 2\n\t\t\t\tbyte2 <= in;\n\t\t\t\tstate <= 2'b10;\n\t\t\tend\n\t\t\t2'b10: begin // State 2: Receive byte 3 and assert done\n\t\t\t\tbyte3 <= in;\n\t\t\t\tstate <= 2'b11;\n\t\t\tend\n\t\t\t2'b11: begin // State 3: Output message\n\t\t\t\tstate <= 2'b00;\n\t\t\t\tout_bytes_reg <= {byte3, byte2, byte1};\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign done = (state == 2'b11);\nassign out_bytes = (done) ? out_bytes_reg : 24'b0;\n\nendmodule"}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = y[0] ^ y[1] ^ y[2] ^ y[5] ^ w;\nassign Y3 = y[1] ^ y[5] ^ w;\n\nendmodule"}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "\nassign {o2, o1, o0} = vec;\nassign outv = vec;\nendmodule\n"}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case({c, d, a, b})\n        4'b0000: out = 1'b0;\n        4'b0001: out = 1'b1;\n        4'b0011: out = 1'b0;\n        4'b0010: out = 1'b1;\n        4'b0110: out = 1'b0;\n        4'b0111: out = 1'b1;\n        4'b0101: out = 1'b0;\n        4'b0100: out = 1'b1;\n        4'b1100: out = 1'b0;\n        4'b1101: out = 1'b1;\n        4'b1111: out = 1'b0;\n        4'b1110: out = 1'b1;\n        4'b1010: out = 1'b0;\n        4'b1011: out = 1'b1;\n        4'b1001: out = 1'b0;\n        4'b1000: out = 1'b1;\n        default: out = 1'bx;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "reg [7:0] out_lo;\nreg [7:0] out_hi;\n\nassign out_lo = in[7:0];\nassign out_hi = in[15:8];\n\nendmodule"}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a | b);\n\nendmodule"}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "\nassign out_assign = a ^ b;\n\nalways @(*)\nbegin\n    out_always_comb = a ^ b;\nend\n\nalways @(posedge clk)\nbegin\n    out_always_ff <= a ^ b;\nend\nendmodule\n"}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "always @(*) begin\n\tY2 = (y[3] & ~w) | (y[1] & w);\n\tY4 = (y[4] & ~w) | (y[3] & w);\nend\n\nendmodule"}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "assign out = in[sel];  // 1-bit wide 256-to-1 multiplexer\n\nendmodule"}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tif (L) begin\n\t\tQ <= R;\n\tend else if (E) begin\n\t\tQ <= w;\n\tend\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "\nreg [2:0] flip_flops;\nreg z;\n\nalways @(posedge clk) begin\n    flip_flops <= {flip_flops[1:0], x};\nend\n\nassign z = ~(^flip_flops);\nendmodule\n"}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & ~b & c) | (b & ~c & ~d);\nendmodule\n"}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        q[0] = (q[1] & q[0] & !q[2]) | (q[1] & q[0] & q[2]) | (q[1] & !q[0] & !q[2]) | (!q[1] & q[0] & q[2]);\n        q[511] = (q[510] & q[511] & !q[0]) | (q[510] & q[511] & q[0]) | (q[510] & !q[511] & !q[0]) | (!q[510] & q[511] & q[0]);\n        for (i = 1; i < 511; i = i + 1) begin\n            q[i] = (q[i-1] & q[i] & q[i+1]) | (q[i-1] & q[i] & !q[i+1]) | (q[i-1] & !q[i] & q[i+1]) | (!q[i-1] & q[i] & q[i+1]);\n        end\n    end\nend\nendmodule"}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\nreg out;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tA: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\t\tout = 1'b0;\n\t\tend\n\t\tB: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = C;\n\t\t\tout = 1'b0;\n\t\tend\n\t\tC: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\t\tout = 1'b0;\n\t\tend\n\t\tD: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = C;\n\t\t\tout = 1'b1;\n\t\tend\n\t\tdefault: next_state = A;\n\tendcase\nend\n\nendmodule"}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @* begin\n    case({a,b,c,d,e})\n        4'b0000: q <= b;\n        4'b0001: q <= e;\n        4'b0010: q <= a;\n        4'b0011: q <= d;\n        4'b0100: q <= 4'b1111;\n        4'b0101: q <= 4'b1111;\n        4'b0110: q <= 4'b1111;\n        4'b0111: q <= 4'b1111;\n        4'b1000: q <= 4'b1111;\n        4'b1001: q <= 4'b1111;\n        4'b1010: q <= 4'b1111;\n        4'b1011: q <= 4'b1111;\n        4'b1100: q <= 4'b1111;\n        4'b1101: q <= 4'b1111;\n        4'b1110: q <= 4'b1111;\n        default: q <= 4'b1111;\n    endcase\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "assign out = (~sel & a) | (sel & b);\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "always @(posedge clk) begin\n    if (L) begin\n        Q <= r_in;\n    end else begin\n        Q <= {q_in[1] ^ q_in[2], q_in[0], q_in[2]};\n    end\nend\n\nendmodule"}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        out <= 32'b0;\n    end else begin\n        for (int i = 0; i < 32; i = i + 1) begin\n            if (in[i] && ~in[i]) begin\n                out[i] <= 1;\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "reg [7:0] q_output;\nreg [7:0] q_tmp;\n\nalways @(posedge clk) begin\n    q_tmp <= d;\nend\n\nassign q = q_output;\n\nalways @* begin\n    q_output = q_tmp;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "reg [8:0] temp;\n\nalways @(a, b) begin\n\ttemp = a + b;\n\ts = temp[7:0];\n\toverflow = (temp[8] == 1);\nend\n\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = (state == 10'b0000000010) ? 1'b1 : 1'b0;\nassign S_next = (state == 10'b0000000001 & d) ? 1'b1 : 1'b0;\nassign S1_next = (state == 10'b0000000010 & !d) ? 1'b1 : 1'b0;\nassign Count_next = (state == 10'b1000000000 & counting & !done_counting) ? 1'b1 : 1'b0;\nassign Wait_next = (state == 10'b0100000000 & done) ? 1'b1 : 1'b0;\nassign done = (state == 10'b0100000000 & done & !ack) ? 1'b1 : 1'b0;\nassign counting = (state == 10'b1000000000 | state == 10'b0100000000) ? 1'b1 : 1'b0;\nassign shift_ena = (state == 10'b1100000000 | state == 10'b1110000000 | state == 10'b1111000000 | state == 10'b1111100000) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "    logic [1:0] state_reg;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            state_reg <= 2'b01;\n        end else begin\n            if (train_valid) begin\n                if ((train_taken == 1) && (state_reg < 2'b11)) begin\n                    state_reg <= state_reg + 2'b01;\n                end else if ((train_taken == 0) && (state_reg > 2'b00)) begin\n                    state_reg <= state_reg - 2'b01;\n                end\n            end\n        end\n    end\n\n    assign state = state_reg;\n\nendmodule"}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "always @(*) begin\n    case(in)\n        8'b00000001: pos = 3'd0;\n        8'b00000010: pos = 3'd1;\n        8'b00000100: pos = 3'd2;\n        8'b00001000: pos = 3'd3;\n        8'b00010000: pos = 3'd4;\n        8'b00100000: pos = 3'd5;\n        8'b01000000: pos = 3'd6;\n        8'b10000000: pos = 3'd7;\n        default: pos = 3'd0;\n    endcase\nend\n\nendmodule"}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    case(scancode)\n        16'he06b: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'he072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'he074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'he075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "wire [3:0] carry;\nassign carry[0] = 1'b0;\ngenvar i;\ngenerate\n  for (i = 0; i < 4; i = i+1) begin : full_adders\n    full_adder full_adder_inst (\n      .a(x[i]),\n      .b(y[i]),\n      .cin(carry[i]),\n      .sum(sum[i]),\n      .cout(carry[i+1])\n    );\n  end\nendgenerate\n\nassign sum[4] = carry[4];\n\nendmodule"}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "\nlogic [31:0] history_register;\n\nalways_ff @(posedge clk or posedge areset) begin\n    if (areset) begin\n        history_register <= 0;\n    end else begin\n        if (train_mispredicted == 1) begin\n            history_register <= {train_history[30:0], train_taken};\n        end else if (predict_valid == 1) begin\n            history_register <= {history_register[30:0], predict_taken};\n        end\n    end\nend\n\nassign predict_history = history_register;\n\nendmodule\n"}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "wire inter1;\nwire inter2;\n\nand gate1 (inter1, a, b);\nand gate2 (inter2, c, d);\nor gate3 (out, inter1, inter2);\nnot gate4 (out_n, out);\n\nendmodule"}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk)\nbegin\n    q <= d;\nend\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] Q;\n\nalways @(posedge clk) begin\n\tif (enable) begin\n\t\tQ <= {Q[6:0], S};\n\tend\n\n\tcase({A, B, C})\n\t\t3'b000: Z <= Q[0];\n\t\t3'b001: Z <= Q[1];\n\t\t3'b010: Z <= Q[2];\n\t\t3'b011: Z <= Q[3];\n\t\t3'b100: Z <= Q[4];\n\t\t3'b101: Z <= Q[5];\n\t\t3'b110: Z <= Q[6];\n\t\t3'b111: Z <= Q[7];\n\tendcase\nend\n\nendmodule"}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "reg fan_req;\n\nalways @ (mode, too_cold, too_hot, fan_on) begin\n    fan_req = fan_on | (mode & too_cold) | (~mode & too_hot);\nend\n\nassign heater = mode & too_cold & ~fan_req;\nassign aircon = ~mode & too_hot & ~fan_req;\nassign fan = fan_req; \n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "assign out_sop = (~a & ~b & ~c & d) | (a & ~b & ~c & ~d) | (a & a & a & a);\nassign out_pos = (a + b + c + d) * (~a + b + c + ~d) * (~a + ~b + ~c + d);\n\nendmodule"}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "\nreg [31:0] state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 32'h1;\n    end else begin\n        state <= {state[30] ^ state[20] ^ state[0] ^ state[31], state[31:1]};\n    end\nend\n\nassign q = state;\nendmodule\n"}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "assign q = (~a & ~b & ~c & d) | (~a & b & c) | (a & ~b & c) | (a & b & c); \n\nendmodule"}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "\tnand nand_gate_1 (p1a, p1b, p1c, p1d, temp1);\n\tnand nand_gate_2 (p2a, p2b, p2c, p2d, temp2);\n\t\n\tassign p1y = temp1;\n\tassign p2y = temp2;\n\nendmodule"}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "always @(*) begin\n    out = 0;\n    for (int i = 0; i < 255; i = i + 1) begin\n        out = out + in[i];\n    end\nend\nendmodule"}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "assign out_both[0] = in[0] & in[3];\nassign out_both[1] = in[1] & in[0];\nassign out_both[2] = in[2] & in[1];\n\nassign out_any[1] = in[1] | in[2];\nassign out_any[2] = in[2] | in[3];\nassign out_any[3] = in[3] | in[0];\n\nassign out_different[0] = in[0] ^ in[3];\nassign out_different[1] = in[1] ^ in[0];\nassign out_different[2] = in[2] ^ in[1];\nassign out_different[3] = in[3] ^ in[2];\n\nendmodule"}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*)\nbegin\n    case(a)\n        3'b000: q <= 16'h1232;\n        3'b001: q <= 16'haee0;\n        3'b010: q <= 16'h27d4;\n        3'b011: q <= 16'h5a0e;\n        3'b100: q <= 16'h2066;\n        3'b101: q <= 16'h64ce;\n        3'b110: q <= 16'hc526;\n        3'b111: q <= 16'h2f19;\n        default: q <= 16'h0000;  // Default output if input is not one of the specified values\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 4'b0000;\n\tend else if (slowena) begin\n\t\tif (q == 4'b1001) begin\n\t\t\tq <= 4'b0000;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\nassign out = in1 & ~in2;\nendmodule"}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\n\nendmodule"}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter B = 2'b00;\nparameter A = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= B;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tB: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tA: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = A;\n\t\t\tend else begin\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = B;\n\tendcase\nend\n\nassign out = (state == A) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk) begin\n\tq <= d;\nend\n\nalways @(negedge clk) begin\n\tq <= d;\nend\n\nendmodule"}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a ^ b);\n\nendmodule"}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": ""}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        case (ena)\n            2'b01: q <= {q[0], q[99:1]}; // Rotate right by one bit\n            2'b10: q <= {q[1:99], q[0]}; // Rotate left by one bit\n            default: q <= q; // Do not rotate\n        endcase\n    end\nend\nendmodule"}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "reg [9:0] count;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        count <= 10'b0;\n    end else begin\n        if (count == 10'b1111101001) begin\n            count <= 10'b0;\n        end else begin\n            count <= count + 1;\n        end\n    end\nend\n\nassign q = count;\n\nendmodule"}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "\nassign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "always_comb begin\n\tif (state[0] && in)\n\t\tbegin\n\t\t\tnext_state = 10'b0000000010;\n\t\t\tout1 = 0;\n\t\t\tout2 = 0;\n\t\tend\n\telse if (state[0] && !in)\n\t\tbegin\n\t\t\tnext_state = 10'b0000000001;\n\t\t\tout1 = 0;\n\t\t\tout2 = 0;\n\t\tend\n\telse if (state[1] && in)\n\t\tbegin\n\t\t\tnext_state = 10'b0000000100;\n\t\t\tout1 = 0;\n\t\t\tout2 = 0;\n\t\tend\n\telse if (state[1] && !in)\n\t\tbegin\n\t\t\tnext_state = 10'b0000000010;\n\t\t\tout1 = 0;\n\t\t\tout2 = 0;\n\t\tend\n\t// Continue adding conditions for each state transition as per the state machine description\nend\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n    if (j & k) begin\n        Q <= ~Q;\n    end else if (j) begin\n        Q <= 1;\n    end else if (k) begin\n        Q <= 0;\n    end\nend\n\nendmodule"}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "\nalways @(*) begin\n    out = in[0] + in[1] + in[2];\nend\nendmodule"}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "assign out[24] = ~a ^ a;\nassign out[23] = ~a ^ b;\nassign out[22] = ~a ^ c;\nassign out[21] = ~a ^ d;\nassign out[20] = ~a ^ e;\nassign out[19] = ~b ^ a;\nassign out[18] = ~b ^ b;\nassign out[17] = ~b ^ c;\nassign out[16] = ~b ^ d;\nassign out[15] = ~b ^ e;\nassign out[14] = ~c ^ a;\nassign out[13] = ~c ^ b;\nassign out[12] = ~c ^ c;\nassign out[11] = ~c ^ d;\nassign out[10] = ~c ^ e;\nassign out[9] = ~d ^ a;\nassign out[8] = ~d ^ b;\nassign out[7] = ~d ^ c;\nassign out[6] = ~d ^ d;\nassign out[5] = ~d ^ e;\nassign out[4] = ~e ^ a;\nassign out[3] = ~e ^ b;\nassign out[2] = ~e ^ c;\nassign out[1] = ~e ^ d;\nassign out[0] = ~e ^ e;\nendmodule"}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "reg [1:0] state;\nparameter WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01;\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tcase (state)\n\t\t\tWALK_LEFT: begin\n\t\t\t\tif (bump_left)\n\t\t\t\t\tstate <= WALK_RIGHT;\n\t\t\t\telse if (bump_right)\n\t\t\t\t\tstate <= WALK_LEFT;\n\t\t\tend\n\t\t\tWALK_RIGHT: begin\n\t\t\t\tif (bump_left)\n\t\t\t\t\tstate <= WALK_RIGHT;\n\t\t\t\telse if (bump_right)\n\t\t\t\t\tstate <= WALK_LEFT;\n\t\t\tend\n\t\t\tdefault: state <= WALK_LEFT;\n\t\tendcase\n\tend\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\n\nendmodule"}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "\nassign q = a & b;\nendmodule"}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "\nassign p1y = (p1a & p1b & p1c) | (p1d & p1e & p1f);\nassign p2y = (p2a & p2b) | (p2c & p2d);\nendmodule\n"}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "always @(posedge clk) begin\n    case({y, x})\n        3'b0000: begin Y0 <= 0; z <= 0; end\n        3'b0001: begin Y0 <= 0; z <= 0; end\n        3'b0010: begin Y0 <= 0; z <= 0; end\n        3'b0011: begin Y0 <= 0; z <= 1; end\n        3'b0100: begin Y0 <= 1; z <= 1; end\n        default: begin Y0 <= 0; z <= 0; end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "assign out = ~(in1 | in2);\n\nendmodule"}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "w = a;\nx = b;\ny = b;\nz = c;\n\nendmodule"}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or posedge ar) begin\n\tif (ar)\n\t\tq <= 0;\n\telse\n\t\tq <= d;\nend\nendmodule"}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @* begin\n\tif (sel == 0)\n\t\tout = data0;\n\telse if (sel == 1)\n\t\tout = data1;\n\telse if (sel == 2)\n\t\tout = data2;\n\telse if (sel == 3)\n\t\tout = data3;\n\telse if (sel == 4)\n\t\tout = data4;\n\telse if (sel == 5)\n\t\tout = data5;\n\telse\n\t\tout = 4'b0000;\nend\n\nendmodule"}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\n\nalways @(posedge clk) begin\n    if (load == 1) begin\n        counter <= data;\n    end else begin\n        if (counter != 0) begin\n            counter <= counter - 1;\n        end\n    end\nend\n\nassign tc = (counter == 0);\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\nreg [3:0] state;\nreg start_shifting;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 4'b0000;\n        start_shifting <= 1'b0;\n    end\n    else begin\n        case (state)\n            4'b0000: begin // Initial state\n                if (data) begin\n                    state <= 4'b0001;\n                end\n            end\n            4'b0001: begin\n                if (data) begin\n                    state <= 4'b0010;\n                end\n                else begin\n                    state <= 4'b0000;\n                end\n            end\n            4'b0010: begin\n                if (~data) begin\n                    state <= 4'b0011;\n                end\n                else begin\n                    state <= 4'b0000;\n                end\n            end\n            4'b0011: begin\n                if (data) begin\n                    state <= 4'b0100;\n                    start_shifting <= 1'b1;\n                end\n                else begin\n                    state <= 4'b0000;\n                end\n            end\n            4'b0100: begin // Sequence found, start shifting\n                start_shifting <= 1'b1;\n            end\n            default: begin\n                state <= 4'b0000;\n                start_shifting <= 1'b0;\n            end\n        endcase\n    end\nend\n\nendmodule\n"}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "\nreg [7:0] q_reg;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        q_reg <= 8'b0;\n    end else begin\n        q_reg <= d;\n    end\nend\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "always @(posedge clk) begin\n\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\tif (in[i] & !prev_in[i]) begin\n\t\t\tanyedge[i] <= 1;\n\t\tend\n\t\telse begin\n\t\t\tanyedge[i] <= 0;\n\t\tend\n\tend\n\tprev_in <= in;\nend\nendmodule"}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] count;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        count <= 4'b0001;\n    end \n    else begin\n        if (count == 4'b1010) begin\n            count <= 4'b0001;\n        end \n        else begin\n            count <= count + 1;\n        end\n    end\nend\n\nassign q = count;\n\nendmodule"}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk)\nbegin\n    if (a == 1)\n        q <= q + 1;\n    else\n        q <= 0;\nend\nendmodule"}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "\nreg [4:0] state;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= 5'b1;\n    end else begin\n        state <= {state[3]^state[4], state[0:3]};\n    end\nend\n\nassign q = state;\nendmodule\n"}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "    always @(*) begin\n        case (do_sub)\n          0: out = a + b;\n          1: out = a - b;\n        endcase\n\n        if (out == 8'h00)\n            result_is_zero = 1;\n        else\n            result_is_zero = 0;\n    end\n\nendmodule"}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "assign f = (~x[1] & ~x[2] & ~x[3] & x[4]) | (~x[1] & x[2] & x[3]) | (x[1] & x[2] & x[3]) | (x[1] & x[2] & ~x[3] & ~x[4]); \n\nendmodule"}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case(code)\n        8'h45: begin\n            out <= 4'b0000;\n            valid <= 1;\n        end\n        8'h16: begin\n            out <= 4'b0001;\n            valid <= 1;\n        end\n        8'h1e: begin\n            out <= 4'b0010;\n            valid <= 1;\n        end\n        8'h26: begin\n            out <= 4'b0011;\n            valid <= 1;\n        end\n        8'h25: begin\n            out <= 4'b0100;\n            valid <= 1;\n        end\n        8'h2e: begin\n            out <= 4'b0101;\n            valid <= 1;\n        end\n        8'h36: begin\n            out <= 4'b0110;\n            valid <= 1;\n        end\n        8'h3d: begin\n            out <= 4'b0111;\n            valid <= 1;\n        end\n        8'h3e: begin\n            out <= 4'b1000;\n            valid <= 1;\n        end\n        8'h46: begin\n            out <= 4'b1001;\n            valid <= 1;\n        end\n        default: begin\n            out <= 4'b0000;\n            valid <= 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": ""}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n\tif (c == 0) begin\n\t\tif (b == 0 && a == 0) begin\n\t\t\tout = 1;\n\t\tend\n\t\telse if (b == 0 && a == 1) begin\n\t\t\tout = 0;\n\t\tend\n\t\telse if (b == 1 && a == 0) begin\n\t\t\tout = 1;\n\t\tend\n\t\telse begin // (b == 1 && a == 1)\n\t\t\tout = 1;\n\t\tend\n\tend\n\telse begin // (c == 1)\n\t\tif (b == 0 && a == 0) begin\n\t\t\tout = 0;\n\t\tend\n\t\telse if (b == 0 && a == 1) begin\n\t\t\tout = d; // Don't care\n\t\tend\n\t\telse if (b == 1 && a == 0) begin\n\t\t\tout = 1;\n\t\tend\n\t\telse begin // (b == 1 && a == 1)\n\t\t\tout = 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] shift_reg;\n\nalways @(posedge clk) begin\n\tif (shift_ena)\n\t\tshift_reg <= {data, shift_reg[3:1]};\n\telse if (count_ena)\n\t\tshift_reg <= shift_reg - 1;\nend\n\nassign q = shift_reg;\n\nendmodule"}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "reg [3:0] counter;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tshift_ena <= 4'b1111;\n\t\tcounter <= 4'b0;\n\tend else begin\n\t\tif (counter < 4)\n\t\t\tshift_ena <= 1;\n\t\telse\n\t\t\tshift_ena <= 0;\n\t\t\n\t\tif (counter < 4)\n\t\t\tcounter <= counter + 1;\n\t\telse\n\t\t\tcounter <= 4'b0;\n\tend\nend\n\nendmodule"}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 4'b0000;\n\tend else begin\n\t\tif (q == 4'b1111) begin\n\t\t\tq <= 4'b0000;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2) begin\n\t\tout_always = b;\n\tend else begin\n\t\tout_always = a;\n\tend\nend\n\nendmodule"}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "\n\tassign out = (a & b) | (b & c) | (a & c);\nendmodule"}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "reg [3:1] state, next_state;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\tstate <= 3'b000;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase(state)\n\t\t3'b000: begin // State A\n\t\t\tif (r[1]) begin\n\t\t\t\tnext_state = 3'b010; // Transition to state B\n\t\t\tend else if (r[2]) begin\n\t\t\t\tnext_state = 3'b011; // Transition to state C\n\t\t\tend else if (r[3]) begin\n\t\t\t\tnext_state = 3'b100; // Transition to state D\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b000; // Remain in state A\n\t\t\tend\n\t\tend\n\t\t\n\t\t3'b001: begin // State B\n\t\t\tif (r[1] && g[1]) begin\n\t\t\t\tnext_state = 3'b001; // Remain in state B\n\t\t\tend else if (r[1]) begin\n\t\t\t\tnext_state = 3'b010; // Transition to state B\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b000; // Transition to state A\n\t\t\tend\n\t\tend\n\t\t\n\t\t3'b010: begin // State C\n\t\t\tif (r[2] && g[2]) begin\n\t\t\t\tnext_state = 3'b010; // Remain in state C\n\t\t\tend else if (r[2]) begin\n\t\t\t\tnext_state = 3'b011; // Transition to state C\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b000; // Transition to state A\n\t\t\tend\n\t\tend\n\t\t\n\t\t3'b011: begin // State D\n\t\t\tif (r[3]) begin\n\t\t\t\tnext_state = 3'b100; // Transition to state D\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b000; // Transition to state A\n\t\t\tend\n\t\tend\n\t\t\n\t\tdefault: next_state = 3'b000;\n\t\t\n\tendcase\nend\n\nassign g[1] = (state == 3'b001) ? 1'b1 : 1'b0; // Device 1 grant conditioned on being in state B\nassign g[2] = (state == 3'b010) ? 1'b1 : 1'b0; // Device 2 grant conditioned on being in state C\nassign g[3] = (state == 3'b100) ? 1'b1 : 1'b0; // Device 3 grant conditioned on being in state D\n\nendmodule"}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset == 1'b1) begin\n\t\tq <= 4'b0000;\n\tend else begin\n\t\tif (q == 4'b1001) begin\n\t\t\tq <= 4'b0000;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "reg [1:0] state;\nreg done;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= 2'b00;\n        done <= 0;\n    end else begin\n        case (state)\n            2'b00: begin // Idle state\n                if (in[3] == 1) begin\n                    state <= 2'b01; // Move to state 01 to receive next byte\n                end\n            end\n                \n            2'b01: begin // Receive first byte\n                state <= 2'b10; // Move to state 10 to receive second byte\n            end\n                \n            2'b10: begin // Receive second byte\n                state <= 2'b11; // Move to state 11 to receive third byte\n            end\n                \n            2'b11: begin // Receive third byte\n                state <= 2'b00; // Move back to idle state\n                done <= 1; // Signal that message reception is complete\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "\nassign out = (sel == 1) ? b : a;\nendmodule\n"}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = in[0] & in[1] & in[2] & in[3];\nassign out_or = in[0] | in[1] | in[2] | in[3];\nassign out_xor = in[0] ^ in[1] ^ in[2] ^ in[3];\n\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @ (posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= 3'b000;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @ *\nbegin\n\tcase (state)\n\t\t3'b000: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = 3'b001;\n\t\t\telse\n\t\t\t\tnext_state = 3'b000;\n\t\t\tz = 1'b0;\n\t\tend\n\t\t3'b001: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = 3'b100;\n\t\t\telse\n\t\t\t\tnext_state = 3'b001;\n\t\t\tz = 1'b0;\n\t\tend\n\t\t3'b010: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = 3'b001;\n\t\t\telse\n\t\t\t\tnext_state = 3'b010;\n\t\t\tz = 1'b0;\n\t\tend\n\t\t3'b011: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = 3'b010;\n\t\t\telse\n\t\t\t\tnext_state = 3'b001;\n\t\t\tz = 1'b1;\n\t\tend\n\t\t3'b100: begin\n\t\t\tif (x)\n\t\t\t\tnext_state = 3'b100;\n\t\t\telse\n\t\t\t\tnext_state = 3'b011;\n\t\t\tz = 1'b1;\n\t\tend\n\t\tdefault: next_state = 3'b000;\n\tendcase\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\tstate <= 2'b00; // State A\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\tf = 1'b0;\n\tg = 1'b0;\n\n\tcase (state)\n\t\t2'b00: begin // State A\n\t\t\tif (resetn == 1'b0) begin\n\t\t\t\tnext_state = 2'b00;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b01;\n\t\t\t\tf = 1'b1;\n\t\t\tend\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tif ((x == 1'b1) && ($past(x) == 1'b0) && ($past($past(x)) == 1'b1)) begin\n\t\t\t\tnext_state = 2'b10;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b01;\n\t\t\t\tf = 1'b0;\n\t\t\tend\n\t\tend\n\t\t2'b10: begin // State C\n\t\t\tif (y == 1'b1) begin\n\t\t\t\tnext_state = 2'b11;\n\t\t\t\tg = 1'b1;\n\t\t\tend else if ((y == 1'b0) && ($past(y) == 1'b1) && ($past(y, 2) == 1'b1)) begin\n\t\t\t\tnext_state = 2'b01;\n\t\t\t\tg = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b10;\n\t\t\t\tg = 1'b1;\n\t\t\tend\n\t\tend\n\t\t2'b11: begin // State D\n\t\t\tif ((y == 1'b1) || ((y == 1'b0) && ($past(y) == 1'b1))) begin\n\t\t\t\tnext_state = 2'b11;\n\t\t\t\tg = 1'b1;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b01;\n\t\t\t\tg = 1'b0;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "reg [7:0] q_reg;\n\t\nalways @(negedge clk) begin\n\tif (reset == 1'b1) begin\n\t\tq_reg <= 8'h34;\n\tend else begin\n\t\tq_reg <= d;\n\tend\nend\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "\n\tassign parity = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7];\t\nendmodule\n"}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case (state)\n        2'b00: begin // A\n            if (in) begin\n                next_state = 2'b01; // B\n            end else begin\n                next_state = 2'b00; // A\n            end\n            out = 1'b0;\n        end\n        2'b01: begin // B\n            if (in) begin\n                next_state = 2'b01; // B\n            end else begin\n                next_state = 2'b10; // C\n            end\n            out = 1'b0;\n        end\n        2'b10: begin // C\n            if (in) begin\n                next_state = 2'b11; // D\n            end else begin\n                next_state = 2'b00; // A\n            end\n            out = 1'b0;\n        end\n        2'b11: begin // D\n            if (in) begin\n                next_state = 2'b01; // B\n            end else begin\n                next_state = 2'b10; // C\n            end\n            out = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\nreg z;\n\nalways @(*) begin\n    case ({x, y})\n        2'b00: z = 1;\n        2'b01: z = 0;\n        2'b10: z = 0;\n        2'b11: z = 1;\n        default: z = 0;\n    endcase\nend\n\nendmodule\n"}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= 3'b000;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case (state)\n        3'b000: begin // State A\n            case (w)\n                1: next_state = 3'b001; // A --1--> B\n                0: next_state = 3'b000; // A --0--> A\n            endcase\n        end\n        3'b001: begin // State B\n            case (w)\n                1: next_state = 3'b010; // B --1--> C\n                0: next_state = 3'b011; // B --0--> D\n            endcase\n        end\n        3'b010: begin // State C\n            case (w)\n                1: next_state = 3'b100; // C --1--> E\n                0: next_state = 3'b011; // C --0--> D\n            endcase\n        end\n        3'b011: begin // State D\n            case (w)\n                1: next_state = 3'b101; // D --1--> F\n                0: next_state = 3'b000; // D --0--> A\n            endcase\n        end\n        3'b100: begin // State E\n            case (w)\n                1: next_state = 3'b100; // E --1--> E\n                0: next_state = 3'b011; // E --0--> D\n            endcase\n        end\n        3'b101: begin // State F\n            case (w)\n                1: next_state = 3'b010; // F --1--> C\n                0: next_state = 3'b011; // F --0--> D\n            endcase\n        end\n        default: next_state = 3'b000; // Default to State A\n    endcase\nend\n\nassign z = (state == 3'b100) ? 1'b1 : 1'b0;\nendmodule"}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\tq <= 16'd0;\n\tend else begin\n\t\tif (byteena[0])\n\t\t\tq[7:0] <= d[7:0];\n\t\tif (byteena[1])\n\t\t\tq[15:8] <= d[15:8];\n\tend\nend\n\nendmodule"}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "always @(posedge clk)\nbegin\n    for (int i=0; i<8; i=i+1)\n    begin\n        if (in[i] == 0 && $fell(in[i]))\n            pedge[i] <= 1;\n        else\n            pedge[i] <= 0;\n    end\nend\n\nendmodule"}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "always @(posedge clock) begin\n    if (a == 1'b1) begin\n        p <= 1'b1;\n    end else begin\n        p <= 1'b0;\n    end\n    \n    if (p == 1'b1) begin\n        q <= 1'b1;\n    end else begin\n        q <= 1'b0;\n    end\nend\n\nendmodule"}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load) begin\n\t\tq <= data;\n\tend else begin\n\t\tq[0] = (q[1] ^ q[511]);\n\t\tq[511] = (q[0] ^ q[510]);\n\t\tfor (i = 1; i < 511; i = i + 1) begin\n\t\t\tq[i] = (q[i-1] ^ q[i+1]);\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "always @(*) begin\n\tif (A == B)\n\t\tz = 1;\n\telse\n\t\tz = 0;\nend\nendmodule"}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "// Define out_both\nreg [98:0] out_both;\ninteger i;\nalways @* begin\n    for (i = 98; i > 0; i = i - 1) begin\n        out_both[i] = (in[i] & in[i+1]);\n    end\n    out_both[0] = 1'b0; // no neighbour to the left of in[0]\nend\n\n// Define out_any\nreg [99:1] out_any;\nalways @* begin\n    out_any[99] = in[99]; // no neighbour to the right of in[99]\n    for (i = 98; i > 0; i = i - 1) begin\n        out_any[i] = (in[i] | in[i+1]);\n    end\nend\n\n// Define out_different\nreg [99:0] out_different;\nalways @* begin\n    out_different[0] = (in[0] ^ in[99]); // wrap-around from in[99] to in[0]\n    for (i = 1; i < 100; i = i + 1) begin\n        out_different[i] = (in[i] ^ in[i-1]);\n    end\nend\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "always @(posedge ena)\nbegin\n\tif (ena)\n\t\tq <= d;\nend\nendmodule"}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "reg [255:0] select;\n\nalways @(*) begin\n\tif(sel == 0)  out = in[3:0];\n\telse if(sel == 1) out = in[7:4];\n\telse if(sel == 2) out = in[11:8];\n\t// Continue this pattern for all 256 cases\nend\n\nendmodule"}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "assign out = (sel == 0) ? a :\n               (sel == 1) ? b :\n               (sel == 2) ? c :\n               (sel == 3) ? d :\n               (sel == 4) ? e :\n               (sel == 5) ? f :\n               (sel == 6) ? g :\n               (sel == 7) ? h :\n               (sel == 8) ? i : 16'hFFFF; \n\nendmodule"}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "assign out_or_bitwise = a | b;\nassign out_or_logical = a || b;\nassign out_not = ~{~b, ~a};\n\nendmodule"}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "always @*\nbegin\n    case(state)\n        4'b0001: begin\n            next_state = in ? 4'b0010 : 4'b0001;\n            out = 1'b0;\n        end\n        4'b0010: begin\n            next_state = in ? 4'b0100 : 4'b0010;\n            out = 1'b0;\n        end\n        4'b0100: begin\n            next_state = in ? 4'b0001 : 4'b1000;\n            out = 1'b0;\n        end\n        4'b1000: begin\n            next_state = in ? 4'b0100 : 4'b0010;\n            out = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "always @(*) begin\n\tmin = a;\n\tif (b < min) min = b;\n\tif (c < min) min = c;\n\tif (d < min) min = d;\nend\n\nendmodule"}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "and_gate and_inst (\n\t.a(a),\n\t.b(b),\n\t.y(out_and)\n);\n\nor_gate or_inst (\n\t.a(a),\n\t.b(b),\n\t.y(out_or)\n);\n\nxor_gate xor_inst (\n\t.a(a),\n\t.b(b),\n\t.y(out_xor)\n);\n\nnand_gate nand_inst (\n\t.a(a),\n\t.b(b),\n\t.y(out_nand)\n);\n\nnor_gate nor_inst (\n\t.a(a),\n\t.b(b),\n\t.y(out_nor)\n);\n\nxnor_gate xnor_inst (\n\t.a(a),\n\t.b(b),\n\t.y(out_xnor)\n);\n\nandnot_gate andnot_inst (\n\t.a(a),\n\t.b(b),\n\t.y(out_anotb)\n);\n\nendmodule"}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (~a & ~b & c & ~d) | (~a & b & c) | (a & ~b & c & d) | (a & b & ~d); \n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 2'b00; // Reset state A\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case (state)\n        2'b00: begin // State A\n            if (s == 1) begin\n                next_state = 2'b01; // Transition to state B\n            end else begin\n                next_state = 2'b00; // Remain in state A\n            end\n        end\n        2'b01: begin // State B\n            next_state = (w == 1) ? 2'b10 : 2'b11; // Transition based on w value\n        end\n        2'b10: begin // Output state\n            next_state = 2'b00; // Transition back to state A\n        end\n        2'b11: begin // No output state\n            next_state = 2'b00; // Transition back to state A\n        end\n        default: next_state = 2'b00;\n    endcase\nend\n\nalways @(posedge clk) begin\n    if (state == 2'b11 && (w == 1) && (w == 1)) begin\n        z <= 1;\n    end else begin\n        z <= 0;\n    end\nend\n\nendmodule"}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "assign out = {24{in[7]}, in};\n\nendmodule"}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "reg [3:0] d_flops;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\td_flops <= 4'b0;\n\tend else begin\n\t\td_flops <= {in, d_flops[3:1]};\n\tend\nend\n\nassign out = d_flops[0];\n\nendmodule"}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @(*) begin\n    case(in)\n        4'b0000: pos = 2'b00;\n        4'b0001: pos = 2'b01;\n        4'b0010: pos = 2'b10;\n        4'b0011: pos = 2'b01;\n        4'b0100: pos = 2'b11;\n        4'b0101: pos = 2'b00;\n        4'b0110: pos = 2'b01;\n        4'b0111: pos = 2'b00;\n        4'b1000: pos = 2'b10;\n        4'b1001: pos = 2'b11;\n        4'b1010: pos = 2'b00;\n        4'b1011: pos = 2'b01;\n        4'b1100: pos = 2'b10;\n        4'b1101: pos = 2'b11;\n        4'b1110: pos = 2'b00;\n        4'b1111: pos = 2'b01;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= OFF;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase(state)\n\t\tOFF: begin\n\t\t\tif (j) begin\n\t\t\t\tnext_state = ON;\n\t\t\tend else begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend\n\t\tend\n\t\tON: begin\n\t\t\tif (k) begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend else begin\n\t\t\t\tnext_state = ON;\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = OFF;\n\tendcase\nend\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": ""}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": ""}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "always @(*) begin\n  for (int i = 0; i < 100; i = i + 1) begin\n    out[i] = in[99 - i];\n  end\nend\n\nendmodule"}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "reg flip_flop;\n\nalways @(posedge clk) begin\n    flip_flop <= ^({out, in});\nend\n\nassign out = flip_flop;\n\nendmodule"}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset) begin\n    if (areset) begin\n        q <= 4'b0;\n    end else begin\n        if (load) begin\n            q <= data;\n        end else if (ena) begin\n            q <= {1'b0, q[3:1]};\n        end\n    end\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = (x3 & ~x2) | (~x3 & x2 & x1); \n\nendmodule"}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule"}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "\nwire out_and;\nwire out_or;\nwire out_xor;\n\nassign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule\n"}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "\n\tassign sum = a ^ b;\n\tassign cout = a & b;\nendmodule\n"}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "always @(*) begin\n    if (cpu_overheated)\n        shut_off_computer = 1;\nend\n\nalways @(*) begin\n    if (!arrived)\n        keep_driving = !gas_tank_empty;\nend\n\nendmodule"}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= OFF;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tOFF: begin\n\t\t\tif (j) begin\n\t\t\t\tnext_state = ON;\n\t\t\tend else begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend\n\t\tend\n\t\tON: begin\n\t\t\tif (k) begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend else begin\n\t\t\t\tnext_state = ON;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "concatenate #(.WIDTHA(5), .WIDTHB(5), .WIDTHC(5), .WIDTHD(5), .WIDE(5), .WIDTHF(5), .OUT_WIDTH(32)) concat_inst (.in_a(a), .in_b(b), .in_c(c), .in_d(d), .in_e(e), .in_f(f), .out_data({w, x, y, z}));\n\nendmodule"}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (a & ~b & c & ~d) | (a & b & ~c & d);\nendmodule\n"}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "and_gate and_gate_inst(\n\t.input_a(a),\n\t.input_b(b),\n\t.output(out)\n);\n\nendmodule"}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg state, next_state;\n\nparameter B = 1'b0;\nparameter A = 1'b1;\n\nalways @ (posedge clk) begin\n\tif (reset) begin\n\t\tstate <= B;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @ (*) begin\n\tcase (state)\n\t\tB: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tA: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = A;\n\t\t\telse\n\t\t\t\tnext_state = B;\n\t\tend\n\t\tdefault: next_state = B;\n\tendcase\nend\n\nassign out = state;\nendmodule"}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "\nassign {cout, sum} = a + b + cin;\nendmodule\n"}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": ""}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "assign mux_in[0] = (~c & ~d) | (c & ~d) | (c & d);\nassign mux_in[1] = (c & ~d) | (c & d);\nassign mux_in[2] = (c & d);\nassign mux_in[3] = (~c & d) | (c & d); \n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= A;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @(*) begin\n    case(state)\n        A: begin\n            if (x) begin\n                next_state = B;\n                z = 1'b1;\n            end else begin\n                next_state = A;\n                z = 1'b0;\n            end\n        end\n        B: begin\n            if (x) begin\n                next_state = B;\n                z = 1'b0;\n            end else begin\n                next_state = B;\n                z = 1'b1;\n            end\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "\nreg state, q;\n\nalways @(posedge clk) begin\n    state <= a & ~b;\n    q <= state;\nend\n\nassign state = 1'b0;\n\nendmodule\n"}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "always_comb begin\n\tif (x == 4'b0000) f = 1'b1;\n\telse if (x == 4'b0001) f = 1'b0;\n\telse if (x == 4'b0011) f = 1'b1;\n\telse if (x == 4'b0010) f = 1'b1;\n\telse if (x == 4'b0110) f = 1'b1;\n\telse if (x == 4'b0111) f = 1'b1;\n\telse if (x == 4'b1111) f = 1'b1;\n\telse if (x == 4'b1110) f = 1'b0;\n\telse f = 1'b0;\nend\nendmodule"}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "reg [2:0] state, next_state;\n\nparameter IDLE = 3'b000;\nparameter GOT_01111 = 3'b001;\nparameter GOT_011110 = 3'b010;\nparameter GOT_ERROR = 3'b011;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= IDLE;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @(*) begin\n    disc = 0;\n    flag = 0;\n    err = 0;\n    \n    case(state)\n        IDLE: begin\n            if (in) begin\n                next_state = GOT_01111;\n            end else begin\n                next_state = IDLE;\n            end\n        end\n        \n        GOT_01111: begin\n            if (in) begin\n                next_state = GOT_ERROR;\n            end else begin\n                next_state = GOT_011110;\n            end\n        end\n        \n        GOT_011110: begin\n            if (in) begin\n                next_state = GOT_ERROR;\n                flag = 1;\n            end else begin\n                next_state = IDLE;\n                disc = 1;\n            end\n        end\n        \n        GOT_ERROR: begin\n            next_state = IDLE;\n            err = 1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        counting <= 0;\n        done <= 0;\n    end else begin\n        if (!counting) begin\n            if (data == 4'b1101) begin\n                count <= 4'b0;\n                counting <= 1;\n            end\n        end else begin\n            if (counting) begin\n                if (count == 4'b0) begin\n                    counting <= 0;\n                    done <= 1;\n                end else begin\n                    if (count == 4'b1111) begin\n                        count <= 4'b1111;\n                    end else begin\n                        count <= count - 1;\n                    end\n                end\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        fr3 <= 1'b1;\n        fr2 <= 1'b1;\n        fr1 <= 1'b1;\n        dfr <= 1'b1;\n    end else begin\n        case(s)\n            3'b100: begin // Above s[3]\n                dfr <= 1'b0;\n            end\n            3'b011: begin // Between s[3] and s[2]\n                dfr <= (s[3] < s[3]);\n                fr1 <= 1'b1;\n            end\n            3'b010: begin // Between s[2] and s[1]\n                dfr <= (s[3] < s[3]);\n                fr1 <= 1'b1;\n                fr2 <= 1'b1;\n            end\n            3'b001: begin // Below s[1]\n                dfr <= (s[3] < s[3]);\n                fr1 <= 1'b1;\n                fr2 <= 1'b1;\n                fr3 <= 1'b1;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "\nreg [3:0] state;\nreg [7:0] data_bits;\nreg start_bit_detected, stop_bit_detected;\n\nparameter IDLE = 4'b0000;\nparameter WAIT_START_BIT = 4'b0001;\nparameter RECEIVE_DATA_BITS = 4'b0010;\nparameter WAIT_STOP_BIT = 4'b0011;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\t\tstart_bit_detected <= 0;\n\t\tstop_bit_detected <= 0;\n\t\tdata_bits <= 8'b0;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\tIDLE: begin\n\t\t\t\tif (in == 1'b0)\n\t\t\t\t\tstate <= WAIT_START_BIT;\n\t\t\tend\n\t\t\tWAIT_START_BIT: begin\n\t\t\t\tif (in == 1'b0)\n\t\t\t\t\tstate <= RECEIVE_DATA_BITS;\n\t\t\t\telse\n\t\t\t\t\tstate <= IDLE;\n\t\t\tend\n\t\t\tRECEIVE_DATA_BITS: begin\n\t\t\t\tdata_bits <= {data_bits[6:0], in};\n\t\t\t\tstate <= (data_bits == 8'b11111111) ? WAIT_STOP_BIT : RECEIVE_DATA_BITS;\n\t\t\tend\n\t\t\tWAIT_STOP_BIT: begin\n\t\t\t\tif (in == 1'b1)\n\t\t\t\t\tstate <= IDLE;\n\t\t\t\telse\n\t\t\t\t\tstate <= WAIT_STOP_BIT;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign done = (state == IDLE) ? 1'b1 : 1'b0;\n\nendmodule\n"}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "reg [3:0] state;\nreg [2:0] data;\nreg [7:0] shift_reg;\nreg valid_data;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 4'd0;\n\t\tdata <= 3'd0;\n\t\tshift_reg <= 8'd0;\n\t\tvalid_data <= 1'b0;\n\tend else begin\n\t\tcase(state)\n\t\t\t4'd0: begin\n\t\t\t\tif (in == 1'b0) begin\n\t\t\t\t\tstate <= 4'd1;\n\t\t\t\t\tdata <= 3'd0;\n\t\t\t\t\tshift_reg <= {shift_reg[6:0], in};\n\t\t\t\t\tvalid_data <= 1'b0;\n\t\t\t\tend\n\t\t\tend\n\t\t\t4'd1: begin\n\t\t\t\tif (data < 3'd7) begin\n\t\t\t\t\tstate <= 4'd1;\n\t\t\t\t\tdata <= data + 1;\n\t\t\t\t\tshift_reg <= {shift_reg[6:0], in};\n\t\t\t\t\tvalid_data <= 1'b0;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= 4'd2;\n\t\t\t\t\tshift_reg <= {shift_reg[6:0], in};\n\t\t\t\tend\n\t\t\tend\n\t\t\t4'd2: begin\n\t\t\t\tif (in == 1'b1) begin\n\t\t\t\t\tstate <= 4'd3;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= 4'd0;\n\t\t\t\tend\n\t\t\tend\n\t\t\t4'd3: begin\n\t\t\t\tstate <= 4'd0;\n\t\t\t\tshift_reg <= {shift_reg[6:0], in};\n\t\t\t\tvalid_data <= 1'b1;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign out_byte = shift_reg;\nassign done = valid_data;\n\nendmodule"}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "reg [127:0] pattern_history_table;\nreg [6:0] global_branch_history;\n\nalways @ (posedge clk or posedge areset)\nbegin\n\tif (areset)\n\tbegin\n\t\tglobal_branch_history <= 0;\n\t\tpattern_history_table <= 128'h0;\n\tend\n\telse\n\tbegin\n\t\tif (train_valid)\n\t\tbegin\n\t\t\tif (train_mispredicted)\n\t\t\t\tglobal_branch_history <= train_history;\n\t\t\tpattern_history_table[train_pc ^ train_history] <= train_taken ? \n\t\t\t\t(pattern_history_table[train_pc ^ train_history] == 3 ? 3 : pattern_history_table[train_pc ^ train_history] + 1) : \n\t\t\t\t(pattern_history_table[train_pc ^ train_history] == 0 ? 0 : pattern_history_table[train_pc ^ train_history] - 1);\n\t\tend\n\tend\nend\n\nassign predict_taken = pattern_history_table[predict_pc ^ global_branch_history] > 1 ? 1 : 0;\nassign predict_history = global_branch_history;\n\nendmodule"}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [4:0] state;\nreg [4:0] next_state;\n\nparameter WALK_LEFT = 5'b00001;\nparameter WALK_RIGHT = 5'b00010;\nparameter FALLING = 5'b00100;\nparameter DIGGING = 5'b01000;\nparameter SPLATTER = 5'b10000;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\taaah = 1'b0;\n\twalk_left = 1'b0;\n\twalk_right = 1'b0;\n\tdigging = 1'b0;\n\n\tcase(state)\n\t\tWALK_LEFT:\n\t\t\tif (bump_right)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIGGING;\n\t\tWALK_RIGHT:\n\t\t\tif (bump_left)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse if (dig)\n\t\t\t\tnext_state = DIGGING;\n\t\tFALLING:\n\t\t\tif (ground)\n\t\t\t\tnext_state = state == WALK_LEFT ? WALK_LEFT : WALK_RIGHT;\n\t\t\telse if (state == SPLATTER)\n\t\t\t\tnext_state = SPLATTER;\n\t\tDIGGING:\n\t\t\tif (ground)\n\t\t\t\tnext_state = state == WALK_LEFT ? WALK_LEFT : WALK_RIGHT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALLING;\n\t\tSPLATTER:\n\t\t\tnext_state = SPLATTER;\n\tendcase\n\n\tcase(next_state)\n\t\tWALK_LEFT:\n\t\t\twalk_left = 1'b1;\n\t\tWALK_RIGHT:\n\t\t\twalk_right = 1'b1;\n\t\tFALLING:\n\t\t\taaah = 1'b1;\n\t\tDIGGING:\n\t\t\tdigging = 1'b1;\n\t\tSPLATTER:\n\t\t\twalk_left = 1'b0;\n\t\t\twalk_right = 1'b0;\n\t\t\taaah = 1'b0;\n\t\t\tdigging = 1'b0;\n\tendcase\nend\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [2:0] state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 3'b000;\n        shift_ena <= 0;\n        counting <= 0;\n        done <= 0;\n    end else begin\n        case(state)\n            3'b000: begin // wait for 1101\n                if (data == 4'b1101) begin\n                    state <= 3'b001;\n                    shift_ena <= 1;\n                end else begin\n                    state <= 3'b000;\n                    shift_ena <= 0;\n                end\n            end\n            3'b001: begin // shift in 4 more bits\n                state <= 3'b010;\n            end\n            3'b010: begin // assert counting output\n                counting <= 1;\n                state <= 3'b011;\n            end\n            3'b011: begin // wait for done_counting\n                if (done_counting) begin\n                    done <= 1;\n                    state <= 3'b100;\n                end else begin\n                    counting <= 1;\n                    state <= 3'b011;\n                end\n            end\n            3'b100: begin // wait for ack\n                if (ack) begin\n                    done <= 0;\n                    state <= 3'b000;\n                end else begin\n                    state <= 3'b100;\n                end\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load) begin\n\t\tq <= data;\n\tend else begin\n\t\tfor (int i = 0; i < 16; i = i + 1) begin\n\t\t\tfor (int j = 0; j < 16; j = j + 1) begin\n\t\t\t\tint count = q[i*16 + (j + 15)%16] + q[i*16 + (j + 1)%16] + q[((i + 15)%16)*16 + j] + q[((i + 1)%16)*16 + j] + q[((i + 15)%16)*16 + (j + 15)%16] + q[((i + 15)%16)*16 + (j + 1)%16] + q[((i + 1)%16)*16 + (j + 15)%16] + q[((i + 1)%16)*16 + (j + 1)%16];\n\t\t\t\tif (count == 0 || count >= 4) begin\n\t\t\t\t\tq[i*16 + j] <= 0;\n\t\t\t\tend else if (count == 3) begin\n\t\t\t\t\tq[i*16 + j] <= 1;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter WALK_LEFT = 2'b00;\nparameter WALK_RIGHT = 2'b01;\nparameter FALLING = 2'b10;\nparameter DIGGING = 2'b11;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\twalk_left = 1'b0;\n\twalk_right  = 1'b0;\n\taaah = 1'b0;\n\tdigging = 1'b0;\n\t\n\tcase (state)\n\t\tWALK_LEFT: begin\n\t\t\tif (bump_right) begin\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\tend else if (!ground) begin\n\t\t\t\tnext_state = FALLING;\n\t\t\t\taaah = 1'b1;\n\t\t\tend else if (dig) begin\n\t\t\t\tnext_state = DIGGING;\n\t\t\t\tdigging = 1'b1;\n\t\t\tend else begin\n\t\t\t\twalk_left = 1'b1;\n\t\t\tend\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\tif (bump_left) begin\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\tend else if (!ground) begin\n\t\t\t\tnext_state = FALLING;\n\t\t\t\taaah = 1'b1;\n\t\t\tend else if (dig) begin\n\t\t\t\tnext_state = DIGGING;\n\t\t\t\tdigging = 1'b1;\n\t\t\tend else begin\n\t\t\t\twalk_right = 1'b1;\n\t\t\tend\n\t\tend\n\t\tFALLING: begin\n\t\t\tif (ground) begin\n\t\t\t\tif (state == WALK_LEFT) begin\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tDIGGING: begin\n\t\t\tif (!ground) begin\n\t\t\t\tnext_state = FALLING;\n\t\t\t\taaah = 1'b1;\n\t\t\tend else if (dig) begin\n\t\t\t\tnext_state = DIGGING;\n\t\t\t\tdigging = 1'b1;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        hh <= 8'b0001_0010; // 12 in BCD\n        mm <= 8'b0000_0000; // 00 in BCD\n        ss <= 8'b0000_0000; // 00 in BCD\n        pm <= 1'b0; // AM\n    end else begin\n        if (ena) begin\n            ss <= ss + 1;\n            if (ss == 8'b0110_0000) begin // 60 in BCD\n                ss <= 8'b0000_0000;\n                mm <= mm + 1;\n                if (mm == 8'b0110_0000) begin // 60 in BCD\n                    mm <= 8'b0000_0000;\n                    hh <= hh + 1;\n                    if (hh == 8'b0001_0011) begin // 13 in BCD\n                        hh <= 8'b0001_0001; // 01 in BCD\n                        pm <= ~pm; // Toggle AM/PM\n                    end else if (hh == 8'b0001_0100) begin // 20 in BCD\n                        hh <= 8'b0000_0001; // 12 in BCD\n                    end\n                end\n            end\n        end\n    end\nend\nendmodule"}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "reg [1:0] state;\nparameter WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01, FALLING = 2'b10;\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tcase(state)\n\t\t\tWALK_LEFT: begin\n\t\t\t\tif (bump_left)\n\t\t\t\t\tstate <= WALK_RIGHT;\n\t\t\t\telse if (bump_right || (ground == 0 && !bump_left && !bump_right))\n\t\t\t\t\tstate <= FALLING;\n\t\t\tend\n\t\t\tWALK_RIGHT: begin\n\t\t\t\tif (bump_right)\n\t\t\t\t\tstate <= WALK_LEFT;\n\t\t\t\telse if (bump_left || (ground == 0 && !bump_left && !bump_right))\n\t\t\t\t\tstate <= FALLING;\n\t\t\tend\n\t\t\tFALLING: begin\n\t\t\t\tif (ground == 1)\n\t\t\t\t\tstate <= (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign walk_left = (state == WALK_LEFT) ? 1'b1 : 1'b0;\nassign walk_right = (state == WALK_RIGHT) ? 1'b1 : 1'b0;\nassign aaah = (state == FALLING) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tq <= 4'b0000;\n\tend else begin\n\t\tif (ena[2]) begin\n\t\t\tif (q[3] == 4'b1001)\n\t\t\t\tq[3] <= 4'b0000;\n\t\t\telse\n\t\t\t\tq[3] <= q[3] + 1;\n\t\tend\n\t\tif (ena[1]) begin\n\t\t\tif (q[7:4] == 4'b1001)\n\t\t\t\tq[7:4] <= 4'b0000;\n\t\t\telse\n\t\t\t\tq[7:4] <= q[7:4] + 1;\n\t\tend\n\t\tif (ena[0]) begin\n\t\t\tif (q[11:8] == 4'b1001)\n\t\t\t\tq[11:8] <= 4'b0000;\n\t\t\telse\n\t\t\t\tq[11:8] <= q[11:8] + 1;\n\t\tend\n\t\tif (q[15:12] == 4'b1001)\n\t\t\tq[15:12] <= 4'b0000;\n\t\telse\n\t\t\tq[15:12] <= q[15:12] + 1;\n\tend\nend\n\nendmodule\n"}
{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "\nassign out = (sel == 1'b0) ? a : b;\n\nendmodule"}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(*) begin\n    case({y, w})\n        3'b000_0: Y2 = 0;   // A (0) --0--> B\n        3'b000_1: Y2 = 0;   // A (0) --1--> A\n        3'b001_0: Y2 = 0;   // B (0) --0--> C\n        3'b001_1: Y2 = 1;   // B (0) --1--> D\n        3'b010_0: Y2 = 0;   // C (0) --0--> E\n        3'b010_1: Y2 = 1;   // C (0) --1--> D\n        3'b011_0: Y2 = 1;   // D (0) --0--> F\n        3'b011_1: Y2 = 0;   // D (0) --1--> A\n        3'b100_0: Y2 = 1;   // E (1) --0--> E\n        3'b100_1: Y2 = 1;   // E (1) --1--> D\n        3'b101_0: Y2 = 1;   // F (1) --0--> C\n        3'b101_1: Y2 = 1;   // F (1) --1--> D\n        default: Y2 = 0;\n    endcase\nend\nendmodule"}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "assign ringer = ~vibrate_mode & ring;\nassign motor = vibrate_mode & ring; \n\nendmodule"}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*) begin\n\tout_alwaysblock = a & b;\nend\n\nendmodule"}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": ""}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "\nreg q;\n\nalways @(posedge clk) begin\n    if (a == 1'b1)\n        q <= 1'b0;\n    else\n        q <= 1'b1;\nend\n\nendmodule\n"}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [2:0] state;\nreg [7:0] result;\n\nalways @ (posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= 3'b000;\n\t\tresult <= 8'b0;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\t3'b000: begin\n\t\t\t\tif (~areset) begin\n\t\t\t\t\tstate <= 3'b001;\n\t\t\t\t\tresult <= x;\n\t\t\t\tend\n\t\t\tend\n\t\t\t3'b001: begin\n\t\t\t\tresult <= result + 1;\n\t\t\t\tstate <= 3'b001;\n\t\t\t\tif (result[7] == 1)\n\t\t\t\t\tstate <= 3'b010;\n\t\t\tend\n\t\t\t3'b010: begin\n\t\t\t\tresult <= result - 1;\n\t\t\t\tstate <= 3'b010;\n\t\t\t\tif (result[7] == 0)\n\t\t\t\t\tstate <= 3'b011;\n\t\t\tend\n\t\t\t3'b011: begin\n\t\t\t\tz <= result;\n\t\t\t\tstate <= 3'b011;\n\t\t\t\tif (areset)\n\t\t\t\t\tstate <= 3'b000;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule"}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\nreg out_reg;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tA: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\t\tout_reg = 1'b0;\n\t\tend\n\t\tB: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = C;\n\t\t\tout_reg = 1'b0;\n\t\tend\n\t\tC: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\t\tout_reg = 1'b0;\n\t\tend\n\t\tD: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = C;\n\t\t\tout_reg = 1'b1;\n\t\tend\n\tendcase\nend\n\nassign out = out_reg;\n\nendmodule"}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": ""}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk)\nbegin\n\tif (r)\n\t\tq <= 0;\n\telse\n\t\tq <= d;\nend\nendmodule"}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else if (ena) begin\n        case(amount)\n            2'b00: q <= q << 1;\n            2'b01: q <= q << 8;\n            2'b10: q <= q >>> 1; // arithmetic right shift\n            2'b11: q <= q >>> 8; // arithmetic right shift\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10;\n\nalways @ (posedge clk or negedge aresetn) begin\n\tif (~aresetn) begin\n\t\tstate <= S0;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @ (*) begin\n\tcase (state)\n\t\tS0: begin // Initial state\n\t\t\tif (x) begin\n\t\t\t\tnext_state = S1;\n\t\t\tend else begin\n\t\t\t\tnext_state = S0;\n\t\t\tend\n\t\tend\n\t\tS1: begin // State after detecting '1'\n\t\t\tif (x) begin\n\t\t\t\tnext_state = S1;\n\t\t\tend else begin\n\t\t\t\tnext_state = S2;\n\t\t\tend\n\t\tend\n\t\tS2: begin // State after detecting '10'\n\t\t\tif (x) begin\n\t\t\t\tnext_state = S0;\n\t\t\tend else begin\n\t\t\t\tnext_state = S0;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nalways @ (*) begin\n\tif (state == S2 && !x) begin\n\t\tz = 1;\n\tend else begin\n\t\tz = 0;\n\tend\nend\n\nendmodule"}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 3'b000; // A\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase(state)\n\t\t3'b000: begin // A\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b000; // A\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001; // B\n\t\t\tend\n\t\tend\n\t\t3'b001: begin // B\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010; // D\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011; // C\n\t\t\tend\n\t\tend\n\t\t3'b010: begin // C\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010; // D\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b100; // E\n\t\t\tend\n\t\tend\n\t\t3'b011: begin // D\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b000; // A\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b101; // F\n\t\t\tend\n\t\tend\n\t\t3'b100: begin // E\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010; // D\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b100; // E\n\t\t\tend\n\t\tend\n\t\t3'b101: begin // F\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b011; // C\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b010; // D\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = 3'b000; // A\n\tendcase\nend\n\nassign z = (state == 3'b100) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "reg [1:0] state;\nreg [7:0] buffer [0:2];\nreg [23:0] out_bytes_reg;\nreg done_reg;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\t\tbuffer[0] <= 8'h00;\n\t\tbuffer[1] <= 8'h00;\n\t\tbuffer[2] <= 8'h00;\n\t\tout_bytes_reg <= 24'h000000;\n\t\tdone_reg <= 1'b0;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\t2'b00: begin\n\t\t\t\tif (in[3] == 1) begin\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\t\tbuffer[0] <= in;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b01: begin\n\t\t\t\tstate <= 2'b10;\n\t\t\t\tbuffer[1] <= in;\n\t\t\tend\n\t\t\t2'b10: begin\n\t\t\t\tstate <= 2'b11;\n\t\t\t\tbuffer[2] <= in;\n\t\t\t\tout_bytes_reg <= {buffer[0], buffer[1], buffer[2]};\n\t\t\t\tdone_reg <= 1'b1;\n\t\t\tend\n\t\t\t2'b11: begin\n\t\t\t\tstate <= 2'b00;\n\t\t\t\tbuffer[0] <= in;\n\t\t\t\tbuffer[1] <= 8'h00;\n\t\t\t\tbuffer[2] <= 8'h00;\n\t\t\t\tout_bytes_reg <= 24'h000000;\n\t\t\t\tdone_reg <= 1'b0;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign out_bytes = done_reg ? out_bytes_reg : 24'hxxxxxx;\nassign done = done_reg;\n\nendmodule"}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = y[0];\nassign Y3 = y[2];\n\nendmodule"}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "assign {o2, o1, o0} = vec;\nassign outv = vec;\n\nendmodule"}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case({c, d, a, b})\n        4'b0000: out = 1'b0;\n        4'b0001: out = 1'b1;\n        4'b0011: out = 1'b0;\n        4'b0010: out = 1'b1;\n        4'b0110: out = 1'b1;\n        4'b0111: out = 1'b0;\n        4'b0101: out = 1'b1;\n        4'b0100: out = 1'b0;\n        4'b1100: out = 1'b0;\n        4'b1101: out = 1'b1;\n        4'b1111: out = 1'b0;\n        4'b1110: out = 1'b1;\n        4'b1010: out = 1'b1;\n        4'b1011: out = 1'b0;\n        4'b1001: out = 1'b1;\n        4'b1000: out = 1'b0;\n        default: out = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "assign out_lo = in[7:0];\nassign out_hi = in[15:8];\n\nendmodule"}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "nand #( ) nand_gate (\n\t.a(a),\n\t.b(b),\n\t.out(temp_out)\n);\n\nassign out = ~temp_out; \n\nendmodule"}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @(*) begin\n    out_always_comb = a ^ b;\nend\n\nalways @(posedge clk) begin\n    out_always_ff <= out_always_ff ^ (a ^ b);\nend\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "assign Y2 = (y[1] & ~y[2] & ~y[3] & ~y[4] & ~y[5] & ~y[6] & ~w) | (~y[1] & ~y[2] & ~y[3] & y[4] & ~y[5] & ~y[6] & w);\nassign Y4 = (~y[1] & ~y[2] & ~y[3] & y[4] & ~y[5] & ~y[6] & ~w) | (~y[1] & y[2] & ~y[3] & ~y[4] & ~y[5] & ~y[6] & w);\nendmodule"}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "\nassign out = in[sel];\nendmodule\n"}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tif (L) begin\n\t\tQ <= R;\n\tend else if (E) begin\n\t\tQ <= w;\n\tend\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "always @(posedge clk) begin\n    flipflop1 <= x ^ flipflop1;\n    flipflop2 <= x & ~flipflop2;\n    flipflop3 <= x | ~flipflop3;\n\n    z <= ~(flipflop1 ^ flipflop2 ^ flipflop3);\nend\n\nendmodule"}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & ~b & c) | (~b & c & d);\nendmodule\n"}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        for (int i = 0; i < 512; i = i + 1) begin\n            if (i == 0) begin\n                q[i] = data[0] ^ data[1] ^ 0;\n            end else if (i == 511) begin\n                q[i] = data[510] ^ data[511] ^ 1;\n            end else begin\n                q[i] = data[i-1] ^ data[i] ^ data[i+1];\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\nreg out_reg;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tA: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\t\tout_reg = 1'b0;\n\t\tend\n\t\tB: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else begin\n\t\t\t\tnext_state = C;\n\t\t\tend\n\t\t\tout_reg = 1'b0;\n\t\tend\n\t\tC: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = D;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\t\tout_reg = 1'b0;\n\t\tend\n\t\tD: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else begin\n\t\t\t\tnext_state = C;\n\t\t\tend\n\t\t\tout_reg = 1'b1;\n\t\tend\n\tendcase\nend\n\nassign out = out_reg;\nendmodule"}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @* begin\n    case ({a, b, c, d, e})\n        20'b00010: q = b;\n        20'b00101: q = e;\n        20'b01010: q = a;\n        20'b01101: q = d;\n        default: q = 4'b1111; // Default value f\n    endcase\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "assign out = (~sel & a) | (sel & b);\n\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "\n\nalways @(posedge clk) begin\n    if (L) begin\n        q <= r;\n    end else begin\n        q <= {q[1] ^ q[2], q[0], q[2]};\n    end\nend\n\nendmodule\n\nmodule top_module(\n    input clk,\n    input L,\n    input q_in,\n    input r_in,\n    output reg Q);\n\nreg [2:0] q1, q2, q3;\nreg [2:0] r1, r2, r3;\n\nfull_module inst1(.r(r1), .L(L), .clk(clk), .q(q1));\nfull_module inst2(.r(r2), .L(L), .clk(clk), .q(q2));\nfull_module inst3(.r(r3), .L(L), .clk(clk), .q(q3));\n\nassign r1 = r_in;\nassign r2 = q1;\nassign r3 = q2;\n\nassign Q = q3;\n\nendmodule"}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        out <= 32'b0;\n    end else begin\n        for (int i = 0; i < 32; i = i + 1) begin\n            if (in[i] & !in_reg[i]) begin\n                out[i] <= 1;\n            end else begin\n                out[i] <= 0;\n            end\n            in_reg[i] <= in[i];\n        end\n    end\nend\n\nendmodule"}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n    q <= d;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "reg signed [7:0] a_signed, b_signed;\nwire signed [8:0] sum;\n\nalways @* begin\n    a_signed = a;\n    b_signed = b;\n    sum = a_signed + b_signed;\n    s = sum[7:0];\n    overflow = sum[8];\nend\n\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = (state == 10'b1000000000) ? 1'b1 : 1'b0;\nassign S_next = ((state == 10'b0000000001) && (d == 1'b0)) ? 1'b1 : 1'b0;\nassign S1_next = ((state == 10'b0000000010) && (d == 1'b0)) ? 1'b1 : ((state == 10'b0000000010) && (d == 1'b1)) ? 1'b1 : 1'b0;\nassign Count_next = ((state == 10'b1000000000) && (counting == 1'b1) && (done_counting == 1'b0)) ? 1'b1 : ((state == 10'b1000000000) && (counting == 1'b1) && (done_counting == 1'b1)) ? 1'b1 : 1'b0;\nassign Wait_next = ((state == 10'b0100000000) && (done == 1'b1) && (ack == 1'b1)) ? 1'b1 : ((state == 10'b0100000000) && (done == 1'b1) && (ack == 1'b0)) ? 1'b1 : 1'b0;\nassign done = (state == 10'b0100000000) ? 1'b1 : 1'b0;\nassign counting = (state == 10'b1000000000) ? 1'b1 : 1'b0;\nassign shift_ena = (state >= 10'b0000001100 && state <= 10'b0000001111) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "    logic [1:0] counter;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset) begin\n            counter <= 2'b01;\n        end else begin\n            if (train_valid) begin\n                if (train_taken && (counter < 2'b11)) begin\n                    counter <= counter + 2'b01;\n                end else if (!train_taken && (counter > 2'b00)) begin\n                    counter <= counter - 2'b01;\n                end\n            end\n        end\n    end\n\n    assign state = counter;\n\nendmodule"}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "always @(*) begin\n    case(in)\n        8'b00000001: pos = 3'b0;\n        8'b00000010: pos = 3'b1;\n        8'b00000100: pos = 3'b2;\n        8'b00001000: pos = 3'b3;\n        8'b00010000: pos = 3'b4;\n        8'b00100000: pos = 3'b5;\n        8'b01000000: pos = 3'b6;\n        8'b10000000: pos = 3'b7;\n        default: pos = 3'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    case(scancode)\n        16'he06b: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'he072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'he074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'he075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "wire carry1, carry2, carry3;\nfull_adder fa0(x[0], y[0], 1'b0, sum[0], carry1);\nfull_adder fa1(x[1], y[1], carry1, sum[1], carry2);\nfull_adder fa2(x[2], y[2], carry2, sum[2], carry3);\nfull_adder fa3(x[3], y[3], carry3, sum[3], sum[4]);\nendmodule"}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "reg [31:0] global_history;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        global_history <= 0;\n    end else begin\n        if (train_mispredicted) begin\n            global_history <= {train_history, train_taken};\n        end else if (predict_valid) begin\n            global_history <= {global_history[30:0], predict_taken};\n        end\n    end\nend\n\nassign predict_history = global_history;\n\nendmodule"}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "wire intermediate_wire_1;\nwire intermediate_wire_2;\n\nand gate_1 (Intermediate_wire_1, a, b);\nand gate_2 (Intermediate_wire_2, c, d);\nor gate_3 (out, Intermediate_wire_1, Intermediate_wire_2);\nassign out_n = ~out;\n\nendmodule"}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk)\nbegin\n\tq <= d;\nend\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] Q;\n\nalways @(posedge clk) begin\n\tif (enable) begin\n\t\tQ <= {Q[6:0], S};\n\tend\n\n\tcase ({A, B, C})\n\t\t3'b000: Z <= Q[0];\n\t\t3'b001: Z <= Q[1];\n\t\t3'b010: Z <= Q[2];\n\t\t3'b011: Z <= Q[3];\n\t\t3'b100: Z <= Q[4];\n\t\t3'b101: Z <= Q[5];\n\t\t3'b110: Z <= Q[6];\n\t\t3'b111: Z <= Q[7];\n\tendcase\nend\n\nendmodule"}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "reg fan, heater, aircon;\n\nalways @(*)\nbegin\n    if (mode == 1) begin\n        if (too_cold == 1) begin\n            heater = 1;\n            aircon = 0;\n            fan = 1;\n        end\n        else begin\n            heater = 0;\n            fan = fan_on;\n        end\n    end\n    else begin\n        if (too_hot == 1) begin\n            aircon = 1;\n            heater = 0;\n            fan = 1;\n        end\n        else begin\n            aircon = 0;\n            fan = fan_on;\n        end\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "assign out_sop = (~a & ~b & c & d) | (a & ~b & ~c & d) | (a & ~b & c & d);\nassign out_pos = (a + b + c + d) * (~a + b + ~c + d) * (~a + ~b + c + d);\n\nendmodule"}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": ""}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (a & b & !c) | (!b & c & d);\nendmodule\n"}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "\n\tnand nand_gate1 (p1a, p1b, p1c, p1d, p1y);\n\tnand nand_gate2 (p2a, p2b, p2c, p2d, p2y);\nendmodule"}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "reg [7:0] count;\n\nalways @(*) begin\n\tcount = 0;\n\tfor (int i = 0; i < 255; i=i+1) begin\n\t\tcount = count + in[i];\n\tend\nend\n\nassign out = count;\n\nendmodule"}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "\n  // (1) out_both\n  assign out_both[0] = in[0] & in[1];\n  assign out_both[1] = in[1] & in[2];\n  assign out_both[2] = in[2] & in[3];\n  \n  // (2) out_any\n  assign out_any[1] = in[1] | in[0];\n  assign out_any[2] = in[2] | in[1];\n  assign out_any[3] = in[3] | in[2];\n  \n  // (3) out_different\n  assign out_different[0] = in[0] ^ in[3];\n  assign out_different[1] = in[1] ^ in[0];\n  assign out_different[2] = in[2] ^ in[1];\n  assign out_different[3] = in[3] ^ in[2];\nendmodule"}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*) begin\n    case (a)\n        3'b000: q = 16'h1232;\n        3'b001: q = 16'haee0;\n        3'b010: q = 16'h27d4;\n        3'b011: q = 16'h5a0e;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64ce;\n        3'b110: q = 16'hc526;\n        3'b111: q = 16'h2f19;\n        default: q = 16'h0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n    if(reset) begin\n        q <= 4'b0000;\n    end else begin\n        if(slowena) begin\n            if(q == 4'd9) begin\n                q <= 4'b0000;\n            end else begin\n                q <= q + 1;\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\nassign out = in1 & ~in2;\nendmodule"}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg state, next_state;\n\nparameter A = 1'b1;\nparameter B = 1'b0;\n\nalways @ (posedge clk or areset) begin\n    if (areset) begin\n        state <= B;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @ (*) begin\n\tcase(state)\n\t\tB: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tA: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = A;\n\t\t\telse\n\t\t\t\tnext_state = B;\n\t\tend\n\tendcase\nend\n\nassign out = state;\n\nendmodule"}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk) begin\n\tif (~q && d) begin\n\t\tq <= 1'b1;\n\tend\nend\n\nalways @(negedge clk) begin\n\tif (q && ~d) begin\n\t\tq <= 1'b0;\n\tend\nend\n\nendmodule"}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "\nassign out = ~(a ^ b);\nendmodule\n"}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\n\tassign z = (x ^ y) & x;\nendmodule\n\nmodule B(\n\tinput x,\n\tinput y,\n\toutput z\n);\n\treg z;\n\talways @(*)\n\tbegin\n\t\tcase({x, y})\n\t\t\t2'b00: z = 1;\n\t\t\t2'b01: z = 0;\n\t\t\t2'b10: z = 0;\n\t\t\t2'b11: z = 1;\n\t\tendcase\n\tend\nendmodule\n\nmodule top_module(\n\tinput x,\n\tinput y,\n\toutput z\n);\n\twire z1, z2;\n\tA instA1(.x(x), .y(y), .z(z1));\n\tA instA2(.x(x), .y(y), .z(z2));\n\tB instB1(.x(x), .y(y), .z(z1));\n\tB instB2(.x(x), .y(y), .z(z2));\n\n\tassign z = z1 ^ z2;\nendmodule"}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        case (ena)\n            2'b01: q <= {q[0], q[99:1]};\n            2'b10: q <= {q[1:99], q[0]};\n            default: q <= q;\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 10'b0;\n\tend else begin\n\t\tif (q == 10'd999) begin\n\t\t\tq <= 10'b0;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "\nassign out = ~in;\nendmodule"}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "always @(*) begin\n    case(state)\n        10'b0000000001: begin // S0\n            if(in == 1) begin\n                next_state = 10'b0000000010; // S1\n            end else begin\n                next_state = state;\n            end\n            out1 = 0;\n            out2 = 0;\n        end\n        10'b0000000010: begin // S1\n            if(in == 1) begin\n                next_state = 10'b0000000100; // S2\n            end else begin\n                next_state = 10'b0000000001; // S0\n            end\n            out1 = 0;\n            out2 = 0;\n        end\n        10'b0000000100: begin // S2\n            if(in == 1) begin\n                next_state = 10'b0000001000; // S3\n            end else begin\n                next_state = 10'b0000000001; // S0\n            end\n            out1 = 0;\n            out2 = 0;\n        end\n        10'b0000001000: begin // S3\n            if(in == 1) begin\n                next_state = 10'b0000010000; // S4\n            end else begin\n                next_state = 10'b0000000001; // S0\n            end\n            out1 = 0;\n            out2 = 0;\n        end\n        10'b0000010000: begin // S4\n            if(in == 1) begin\n                next_state = 10'b0000100000; // S5\n            end else begin\n                next_state = 10'b0000000001; // S0\n            end\n            out1 = 0;\n            out2 = 0;\n        end\n        10'b0000100000: begin // S5\n            if(in == 1) begin\n                next_state = 10'b0010000000; // S8\n            end else begin\n                next_state = 10'b0001000000; // S6\n            end\n            out1 = 0;\n            out2 = 0;\n        end\n        10'b0001000000: begin // S6\n            if(in == 1) begin\n                next_state = 10'b0100000000; // S7\n            end else begin\n                next_state = 10'b0000000001; // S0\n            end\n            out1 = 0;\n            out2 = 0;\n        end\n        10'b0010000000: begin // S8\n            if(in == 1) begin\n                next_state = 10'b0000000010; // S1\n            end else begin\n                next_state = 10'b0000000001; // S0\n            end\n            out1 = 1;\n            out2 = 0;\n        end\n        10'b0100000000: begin // S7\n            if(in == 1) begin\n                next_state = state; // S7, stay in the same state\n            end else begin\n                next_state = 10'b0000000001; // S0\n            end\n            out1 = 0;\n            out2 = 1;\n        end\n        10'b0110000000: begin // S9\n            if(in == 1) begin\n                next_state = 10'b0000000010; // S1\n            end else begin\n                next_state = 10'b0000000001; // S0\n            end\n            out1 = 1;\n            out2 = 1;\n        end\n        default: begin\n            next_state = 10'b0000000001; // S0\n            out1 = 0;\n            out2 = 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n    if (j & !k)\n        Q <= 1;\n    else if (!j & k)\n        Q <= 0;\n    else if (j & k)\n        Q <= ~Q;\nend\n\nendmodule"}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "reg [1:0] count;\n\nalways @* begin\n\tcount = in[0] + in[1] + in[2];\nend\n\nassign out = count;\n\nendmodule"}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "\nassign out[24] = ~a ^ a;\nassign out[23] = ~a ^ b;\nassign out[22] = ~a ^ c;\nassign out[21] = ~a ^ d;\nassign out[20] = ~a ^ e;\nassign out[19] = ~b ^ a;\nassign out[18] = ~b ^ b;\nassign out[17] = ~b ^ c;\nassign out[16] = ~b ^ d;\nassign out[15] = ~b ^ e;\nassign out[14] = ~c ^ a;\nassign out[13] = ~c ^ b;\nassign out[12] = ~c ^ c;\nassign out[11] = ~c ^ d;\nassign out[10] = ~c ^ e;\nassign out[9] = ~d ^ a;\nassign out[8] = ~d ^ b;\nassign out[7] = ~d ^ c;\nassign out[6] = ~d ^ d;\nassign out[5] = ~d ^ e;\nassign out[4] = ~e ^ a;\nassign out[3] = ~e ^ b;\nassign out[2] = ~e ^ c;\nassign out[1] = ~e ^ d;\nassign out[0] = ~e ^ e;\nendmodule\n"}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "reg [1:0] state;\nreg walk_left, walk_right;\n\nalways @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= 2'b10; // walk_left\n\telse\n\t\tbegin\n\t\t\tcase (state)\n\t\t\t\t2'b00: // walking right\n\t\t\t\t\tif (bump_left || (bump_left && bump_right))\n\t\t\t\t\t\tstate <= 2'b10; // walk_left\n\t\t\t\t\telse\n\t\t\t\t\t\tstate <= 2'b01; // walk_right\n\t\t\t\t2'b01: // walking right\n\t\t\t\t\tif (bump_left && bump_right)\n\t\t\t\t\t\tstate <= 2'b10; // walk_left\n\t\t\t\t\telse\n\t\t\t\t\t\tstate <= 2'b01; // walk_right\n\t\t\t\t2'b10: // walking left\n\t\t\t\t\tif (bump_right || (bump_left && bump_right))\n\t\t\t\t\t\tstate <= 2'b01; // walk_right\n\t\t\t\t\telse\n\t\t\t\t\t\tstate <= 2'b10; // walk_left\n\t\t\t\tdefault: // should not happen\n\t\t\t\t\tstate <= 2'b10; // walk_left\n\t\t\tendcase\n\t\tend\nend\n\nassign walk_left = (state == 2'b10) ? 1'b1 : 1'b0;\nassign walk_right = (state == 2'b01) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "\nassign q = a & b;\nendmodule"}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "assign p1y = (p1a & p1b & p1c) | (p1d & p1e & p1f);\nassign p2y = (p2a & p2b) | (p2c & p2d);\n\nendmodule"}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "always @(posedge clk) begin\n\tcase({y[2], y[1], y[0]})\n\t\t3'b000: begin\n\t\t\tY0 <= x ? 3'b001 : 3'b000;\n\t\t\tz <= 1'b0;\n\t\tend\n\t\t3'b001: begin\n\t\t\tY0 <= x ? 3'b100 : 3'b001;\n\t\t\tz <= 1'b0;\n\t\tend\n\t\t3'b010: begin\n\t\t\tY0 <= x ? 3'b001 : 3'b010;\n\t\t\tz <= 1'b0;\n\t\tend\n\t\t3'b011: begin\n\t\t\tY0 <= x ? 3'b010 : 3'b001;\n\t\t\tz <= 1'b1;\n\t\tend\n\t\t3'b100: begin\n\t\t\tY0 <= x ? 3'b100 : 3'b011;\n\t\t\tz <= 1'b1;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "assign out = ~(in1 | in2);\n\nendmodule"}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "assign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always @(posedge clk or posedge ar) begin\n\tif (ar) begin\n\t\tq <= 0;\n\tend else begin\n\t\tq <= d;\n\tend\nend\n\nendmodule"}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @(*) begin\n\tif (sel == 0) begin\n\t\tout = data0;\n\tend else if (sel == 1) begin\n\t\tout = data1;\n\tend else if (sel == 2) begin\n\t\tout = data2;\n\tend else if (sel == 3) begin\n\t\tout = data3;\n\tend else if (sel == 4) begin\n\t\tout = data4;\n\tend else if (sel == 5) begin\n\t\tout = data5;\n\tend else begin\n\t\tout = 4'b0000;\n\tend\nend\n\nendmodule"}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\n\nalways @(posedge clk) begin\n\tif (load == 1)\n\t\tcounter <= data;\n\telse\n\t\tcounter <= counter - 1;\nend\n\nassign tc = (counter == 0);\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "reg [3:0] state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 4'b00;\n        start_shifting <= 1'b0;\n    end\n    else begin\n        case(state)\n            4'b00: begin\n                if (data) begin\n                    state <= 4'b01;\n                end\n                else begin\n                    state <= 4'b00;\n                end\n            end\n            4'b01: begin\n                if (data) begin\n                    state <= 4'b10;\n                end\n                else begin\n                    state <= 4'b00;\n                end\n            end\n            4'b10: begin\n                if (data) begin\n                    state <= 4'b11;\n                end\n                else begin\n                    state <= 4'b00;\n                end\n            end\n            4'b11: begin\n                if (data) begin\n                    state <= 4'b11;\n                    start_shifting <= 1'b1;\n                end\n                else begin\n                    state <= 4'b00;\n                end\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "reg [7:0] q_next;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 8'd0;\n\tend else begin\n\t\tq <= q_next;\n\tend\nend\n\nalways @* begin\n\tq_next = reset ? 8'd0 : d;\nend\n\nendmodule"}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "always @(posedge clk) begin\n    for (int i = 0; i < 8; i = i + 1) begin\n        if (in[i] != in_prev[i] && in[i] == 1'b1) begin\n            anyedge[i] <= 1'b1;\n        end\n    end\nin_prev <= in;\nend\nendmodule"}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 4'b0001;\n\tend else begin\n\t\tif (q == 4'b1010) begin\n\t\t\tq <= 4'b0001;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1) begin\n        q <= q + 3;\n    end else begin\n        q <= q;\n    end\nend\nendmodule"}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 5'b1;\n\tend else begin\n\t\tq <= {q[3] ^ q[4], q[0:3]};\n\tend\nend\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "    always @(*) begin\n        case (do_sub)\n          0: out = a + b;\n          1: out = a - b;\n        endcase\n\n        if (out == 8'h00)\n            result_is_zero = 1;\n        else\n            result_is_zero = 0;\n    end\n\nendmodule"}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "always_comb begin\n    case (x)\n        4'b0000: f = 1'b0;\n        4'b0001: f = 1'bx;\n        4'b0010: f = 1'b1;\n        4'b0011: f = 1'b0;\n        4'b0100: f = 1'b1;\n        4'b0101: f = 1'b1;\n        4'b0110: f = 1'bx;\n        4'b0111: f = 1'bx;\n        4'b1000: f = 1'bx;\n        4'b1001: f = 1'bx;\n        4'b1010: f = 1'b0;\n        4'b1011: f = 1'bx;\n        4'b1100: f = 1'b1;\n        4'b1101: f = 1'b1;\n        4'b1110: f = 1'bx;\n        4'b1111: f = 1'bx;\n        default: f = 1'bx;\n    endcase\nend\nendmodule"}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n\tif (code == 8'h45)\n\t\t{ out <= 4'b0000; valid <= 1; }\n\telse if (code == 8'h16)\n\t\t{ out <= 4'b0001; valid <= 1; }\n\telse if (code == 8'h1e)\n\t\t{ out <= 4'b0010; valid <= 1; }\n\telse if (code == 8'h26)\n\t\t{ out <= 4'b0011; valid <= 1; }\n\telse if (code == 8'h25)\n\t\t{ out <= 4'b0100; valid <= 1; }\n\telse if (code == 8'h2e)\n\t\t{ out <= 4'b0101; valid <= 1; }\n\telse if (code == 8'h36)\n\t\t{ out <= 4'b0110; valid <= 1; }\n\telse if (code == 8'h3d)\n\t\t{ out <= 4'b0111; valid <= 1; }\n\telse if (code == 8'h3e)\n\t\t{ out <= 4'b1000; valid <= 1; }\n\telse if (code == 8'h46)\n\t\t{ out <= 4'b1001; valid <= 1; }\n\telse\n\t\t{ out <= 4'b0000; valid <= 0; }\nend\n\nendmodule"}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\n\nendmodule"}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n\tif (c == 0 && d == 0) begin\n\t\tif (a == 0 && b == 1)\n\t\t\tout = 0;\n\t\telse if (a == 0 && b == 0)\n\t\t\tout = 1;\n\t\telse\n\t\t\tout = 1;\n\tend\n\telse if (c == 0 && d == 1) begin\n\t\tif (a == 1 && b == 0)\n\t\t\tout = d;\n\t\telse\n\t\t\tout = d;\n\tend\n\telse if (c == 1) begin\n\t\tif (a == 0 && b == 0)\n\t\t\tout = 0;\n\t\telse\n\t\t\tout = 1;\n\tend\n\telse begin\n\t\tout = 1;\n\tend\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "\nreg [3:0] shift_reg;\n\nalways @(posedge clk) begin\n    if (shift_ena == 1) begin\n        shift_reg <= {shift_reg[2:0], data};\n    end\n    if (count_ena == 1) begin\n        shift_reg <= shift_reg - 1;\n    end\nend\n\nassign q = shift_reg;\n\nendmodule\n"}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "\nassign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "reg [2:0] counter;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tshift_ena <= 1;\n\t\tcounter <= 3'b000;\n\tend\n\telse begin\n\t\tif (counter < 3'b100) begin\n\t\t\tshift_ena <= 1;\n\t\t\tcounter <= counter + 1;\n\t\tend\n\t\telse begin\n\t\t\tshift_ena <= 0;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] count;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        count <= 4'b0000;\n    end else begin\n        count <= count + 4'b0001;\n    end\nend\n\nassign q = count;\n\nendmodule"}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2) begin\n\t\tout_always = b;\n\tend else begin\n\t\tout_always = a;\n\tend\nend\n\nendmodule"}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "// Implementing the circuit based on the provided Karnaugh map\n// F = \u03a3(1, 3, 5, 7)\n\nassign out = (a & !b & c) | (!a & b & c) | (!a & b & !c) | (!a & !b & c);\n\nendmodule"}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "reg [1:0] state, next_state;\n\n// State encoding\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\n\n// Outputs\nassign g = state == C ? 4'b001 : state == B ? 4'b010 : 4'b000;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tnext_state = state;\n\tcase (state)\n\t\tA: begin\n\t\t\tif (r[1]) next_state = B;\n\t\t\telse if (r[2]) next_state = C;\n\t\t\telse if (r[3]) next_state = D;\n\t\tend\n\t\tB: begin\n\t\t\tif (r[1]) next_state = B;\n\t\t\telse next_state = A;\n\t\tend\n\t\tC: begin\n\t\t\tif (r[2]) next_state = C;\n\t\t\telse next_state = A;\n\t\tend\n\t\tD: begin\n\t\t\tnext_state = A;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 4'b0000;\n\tend else begin\n\t\tif (q == 4'b1001) begin\n\t\t\tq <= 4'b0000;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "reg [1:0] state;\nreg [1:0] next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\tdone = 0;\n\n\tcase (state)\n\t\t2'b00: begin\n\t\t\tif (in[3] == 1'b1) begin\n\t\t\t\tnext_state = 2'b01;\n\t\t\tend\n\t\tend\n\t\t2'b01: begin\n\t\t\tnext_state = 2'b10;\n\t\tend\n\t\t2'b10: begin\n\t\t\tif (in[3] == 1'b1) begin\n\t\t\t\tnext_state = 2'b11;\n\t\t\tend\n\t\tend\n\t\t2'b11: begin\n\t\t\tdone = 1;\n\t\t\tnext_state = 2'b00;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "assign out = (sel == 0) ? a : b;\n\nendmodule"}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = in[0] & in[1] & in[2] & in[3];\nassign out_or = in[0] | in[1] | in[2] | in[3];\nassign out_xor = in[0] ^ in[1] ^ in[2] ^ in[3];\n\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 3'b000;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase(state)\n\t\t3'b000: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b000;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t3'b001: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b100;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t3'b010: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b010;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t3'b011: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b010;\n\t\t\t\tz = 1'b1;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b001;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t3'b100: begin\n\t\t\tif (x) begin\n\t\t\t\tnext_state = 3'b100;\n\t\t\t\tz = 1'b1;\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011;\n\t\t\t\tz = 1'b1;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "reg [2:0] state;\nreg next_f, next_g;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\tstate <= 3'd0; // State A\n\t\tf <= 1'b0;\n\t\tg <= 1'b0;\n\tend else begin\n\t\tcase(state)\n\t\t\t0: begin // State A\n\t\t\t\tf <= 1'b1;\n\t\t\t\tstate <= 3'd1;\n\t\t\tend\n\t\t\t1: begin // Waiting for x = 1\n\t\t\t\tif (x == 1'b1) begin\n\t\t\t\t\tstate <= 3'd2;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2: begin // Waiting for x = 0\n\t\t\t\tif (x == 1'b0) begin\n\t\t\t\t\tstate <= 3'd3;\n\t\t\t\tend\n\t\t\tend\n\t\t\t3: begin // Waiting for x = 1\n\t\t\t\tif (x == 1'b1) begin\n\t\t\t\t\tnext_g <= 1'b1;\n\t\t\t\t\tstate <= 3'd4;\n\t\t\t\tend\n\t\t\tend\n\t\t\t4: begin // Monitoring y for g = 1\n\t\t\t\tif (y == 1'b1) begin\n\t\t\t\t\tg <= 1'b1;\n\t\t\t\tend else begin\n\t\t\t\t\tg <= 1'b0;\n\t\t\t\tend\n\t\t\t\tstate <= 3'd4;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign g = next_g;\n\nendmodule"}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "\nreg [7:0] d_ff [7:0];\nalways @(negedge clk) begin\n    if (reset) begin\n        for (int i = 0; i < 8; i = i + 1) begin\n            d_ff[i] <= 8'b00110100;\n        end\n    end else begin\n        for (int i = 0; i < 8; i = i + 1) begin\n            d_ff[i] <= d[i];\n        end\n    end\nend\n\nalways @* begin\n    for (int i = 0; i < 8; i = i + 1) begin\n        q[i] = d_ff[i];\n    end\nend\nendmodule\n"}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": ""}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        2'b00: begin\n            next_state = (in) ? 2'b01 : 2'b00;\n            out = 1'b0;\n        end\n        2'b01: begin\n            next_state = (in) ? 2'b01 : 2'b10;\n            out = 1'b0;\n        end\n        2'b10: begin\n            next_state = (in) ? 2'b11 : 2'b00;\n            out = 1'b0;\n        end\n        2'b11: begin\n            next_state = (in) ? 2'b01 : 2'b10;\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00;\n            out = 1'b0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\nreg z;\n\nalways @(*) begin\n    case({x, y})\n        2'b00: z = 1;\n        2'b01: z = 0;\n        2'b10: z = 0;\n        2'b11: z = 1;\n        default: z = 0;\n    endcase\nend\n\nendmodule\n"}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= 3'b000; // State A\n\tend\n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\tcase (state)\n\t\t3'b000: begin // State A\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b001; // Transition to state B\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 3'b000; // Remain in state A\n\t\t\tend\n\t\tend\n\t\t3'b001: begin // State B\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010; // Transition to state C\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 3'b011; // Transition to state D\n\t\t\tend\n\t\tend\n\t\t3'b010: begin // State C\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b100; // Transition to state E\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 3'b011; // Transition to state D\n\t\t\tend\n\t\tend\n\t\t3'b011: begin // State D\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b101; // Transition to state F\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 3'b000; // Transition to state A\n\t\t\tend\n\t\tend\n\t\t3'b100: begin // State E\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b100; // Remain in state E\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 3'b011; // Transition to state D\n\t\t\tend\n\t\tend\n\t\t3'b101: begin // State F\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010; // Transition to state C\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 3'b011; // Transition to state D\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nalways @* begin\n\tcase (state)\n\t\t3'b000 : z = 1'b0; // Output z in state A\n\t\t3'b001 : z = 1'b0; // Output z in state B\n\t\t3'b010 : z = 1'b0; // Output z in state C\n\t\t3'b011 : z = 1'b0; // Output z in state D\n\t\t3'b100 : z = 1'b1; // Output z in state E\n\t\t3'b101 : z = 1'b0; // Output z in state F\n\tendcase\nend\n\nendmodule"}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "reg [15:0] q;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\tq <= 16'b0;\n\tend else begin\n\t\tif (byteena[0])\n\t\t\tq[7:0] <= d[7:0];\n\t\tif (byteena[1])\n\t\t\tq[15:8] <= d[15:8];\n\tend\nend\n\nendmodule"}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "always @(posedge clk) begin\n    pedge <= (in & ~{1'b0,in[7:1]}) & ~pedge;\nend\nendmodule"}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "\nreg state;\n\nalways @(posedge clock) begin\n    case (state)\n        0: begin\n            if (a == 1'b0)\n                state <= 1;\n        end\n        1: begin\n            if (a == 1'b1)\n                state <= 2;\n        end\n        2: begin\n            state <= 3;\n        end\n        3: begin\n            state <= 4;\n        end\n        4: begin\n            state <= 0;\n        end\n    endcase\nend\n\nalways @* begin\n    case (state)\n        0: begin\n            p = 1'b0;\n            q = 1'b0;\n        end\n        1: begin\n            p = 1'b0;\n            q = 1'b0;\n        end\n        2: begin\n            p = 1'b0;\n            q = 1'b0;\n        end\n        3: begin\n            p = 1'b1;\n            q = 1'b0;\n        end\n        4: begin\n            p = 1'b0;\n            q = 1'b1;\n        end\n        default: begin\n            p = 1'b0;\n            q = 1'b0;\n        end\n    endcase\nend\n\ninitial begin\n    state = 0;\n    p = 1'b0;\n    q = 1'b0;\nend\n\nendmodule\n"}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        q[0] = q[1] ^ q[512];\n        q[511] = q[510] ^ q[-1];\n        for (i = 1; i < 511; i = i + 1) begin\n            q[i] = q[i-1] ^ q[i+1];\n        end\n    end\nend\n\nendmodule"}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "  assign z = (A == B) ? 1'b1 : 1'b0;\nendmodule"}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "// Calculate out_both\nalways @* begin\n    for (int i = 0; i < 99; i++) begin\n        out_both[i] = (in[i] & in[i+1]);\n    end\nend\n\n// Calculate out_any\nalways @* begin\n    out_any[99] = in[99];\n    for (int i = 99; i > 1; i--) begin\n        out_any[i-1] = (in[i] | in[i-1]);\n    end\nend\n\n// Calculate out_different\nalways @* begin\n    for (int i = 0; i < 99; i++) begin\n        out_different[i] = (in[i] != in[(i+1)%100]);\n    end\nend\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "always @(posedge ena)\nbegin\n\tif (ena)\n\t\tq <= d;\nend\nendmodule"}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "reg [3:0] out;\n\nalways @ (*) begin\n    case (sel)\n        0: out = in[3:0];\n        1: out = in[7:4];\n        2: out = in[11:8];\n        // Add more cases for remaining selections\n        default: out = 4'h0; // Default case\n    endcase\nend\n\nendmodule"}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "assign out = (sel == 0) ? a : \n             (sel == 1) ? b :\n             (sel == 2) ? c :\n             (sel == 3) ? d :\n             (sel == 4) ? e :\n             (sel == 5) ? f :\n             (sel == 6) ? g :\n             (sel == 7) ? h :\n             (sel == 8) ? i :\n             16'b1; \n\nendmodule"}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "assign out_or_bitwise = a | b;\n\tassign out_or_logical = a || b;\n\tassign out_not = ~{~b, ~a};\n\nendmodule"}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "always @* begin\n    case(state)\n        4'b0001: begin\n            next_state = (in) ? 4'b0010 : 4'b0001;\n            out = 1'b0;\n        end\n        4'b0010: begin\n            next_state = (in) ? 4'b0100 : 4'b0010;\n            out = 1'b0;\n        end\n        4'b0100: begin\n            next_state = (in) ? 4'b0001 : 4'b1000;\n            out = 1'b0;\n        end\n        4'b1000: begin\n            next_state = (in) ? 4'b0100 : 4'b0010;\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 4'bxxxx;\n            out = 1'bx;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "always @(*) begin\n    min = a;\n    if (b < min) min = b;\n    if (c < min) min = c;\n    if (d < min) min = d;\nend\n\nendmodule"}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "and_gate and_gate_inst (.a(a), .b(b), .c(out_and));\nor_gate or_gate_inst (.a(a), .b(b), .c(out_or));\nxor_gate xor_gate_inst (.a(a), .b(b), .c(out_xor));\nnand_gate nand_gate_inst (.a(a), .b(b), .c(out_nand));\nnor_gate nor_gate_inst (.a(a), .b(b), .c(out_nor));\nxnor_gate xnor_gate_inst (.a(a), .b(b), .c(out_xnor));\nandnot_gate andnot_gate_inst (.a(a), .b(b), .c(out_anotb));\n\nendmodule"}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (~a & ~b & c & ~d) | (~a & b & c & ~d) | (a & ~b & ~c & d) | (a & b & ~c & ~d) | (a & ~b & c & ~d) | (a & b & ~c & d) | (a & b & c & d); \n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk) begin\n    if(reset) begin\n        state <= 2'b00; // State A\n    end\n    else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case(state)\n        2'b00: begin // State A\n            if(s == 1)\n                next_state = 2'b01; // Move to State B\n            else\n                next_state = 2'b00; // Remain in State A\n        end\n        \n        2'b01: begin // State B\n            if(w == 1) begin\n                next_state = 2'b10; // Transition to checking w\n            end\n            else begin\n                next_state = 2'b01; // Remain in State B\n                z <= 0;\n            end\n        end\n        \n        2'b10: begin // Check w\n            if(w == 2'b01) begin\n                next_state = 2'b11; // Set output z in next clock cycle\n            end\n            else if (w == 2'b10) begin\n                next_state = 2'b11; // Set output z in next clock cycle\n            end\n            else begin\n                next_state = 2'b01; // Reset and go back to State B\n                z <= 0;\n            end\n        end\n        \n        2'b11: begin // Set output z and transition back to State B\n            z <= 1;\n            next_state = 2'b01;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n  assign out = {24{in[7]}, in};\n\nendmodule"}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "reg [3:0] d_flops;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\td_flops <= 4'b0;\n\tend else begin\n\t\td_flops <= {d_flops[2:0], in};\n\tend\nend\n\nassign out = d_flops[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "// 4-bit Priority Encoder\nalways @(*) begin\n    case(in)\n        4'b0000: pos = 2'b00;\n        4'b0001: pos = 2'b01;\n        4'b0010: pos = 2'b10;\n        4'b0011: pos = 2'b01;\n        4'b0100: pos = 2'b11;\n        4'b0101: pos = 2'b01;\n        4'b0110: pos = 2'b10;\n        4'b0111: pos = 2'b01;\n        4'b1000: pos = 2'b00;\n        4'b1001: pos = 2'b01;\n        4'b1010: pos = 2'b10;\n        4'b1011: pos = 2'b01;\n        4'b1100: pos = 2'b11;\n        4'b1101: pos = 2'b01;\n        4'b1110: pos = 2'b10;\n        4'b1111: pos = 2'b01;\n        default: pos = 2'b00;\n    endcase\nend\n\nendmodule"}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg state, next_state;\n\nparameter OFF = 0, ON = 1;\n\nalways @ (posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= OFF;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tOFF: begin\n\t\t\tif (j) begin\n\t\t\t\tnext_state = ON;\n\t\t\tend else begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend\n\t\tend\n\t\tON: begin\n\t\t\tif (k) begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend else begin\n\t\t\t\tnext_state = ON;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign out = (state == ON);\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": ""}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "assign one = 1'b1;\n\nendmodule"}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "always @(*) begin\n    for (int i=0; i<100; i=i+1) begin\n        out[i] = in[99-i];\n    end\nend\n\nendmodule"}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "\nlogic flip_flop_out, xor_out;\n\nassign xor_out = in ^ flip_flop_out;\n\nalways @(posedge clk) begin\n    flip_flop_out <= xor_out;\nend\n\nassign out = flip_flop_out;\nendmodule\n"}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tq <= 4'b0;\n\tend else if (load) begin\n\t\tq <= data;\n\tend else if (ena) begin\n\t\tq <= {q[3], q[2:0]};\n\tend\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = x2 & ~x3 | x1 & ~x3;\n\nendmodule"}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "reg [7:0] q_reg;\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tq_reg <= 8'b0;\n\tend else begin\n\t\tq_reg <= d;\n\tend\nend\nassign q = q_reg;\n\nendmodule"}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "\nassign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule\n"}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "\n\tassign sum = a ^ b;\n\tassign cout = a & b;\nendmodule\n"}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1;\n    end\n\n    always @(*) begin\n        if (!arrived)\n            keep_driving = !gas_tank_empty;\n    end\nendmodule"}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge reset)\n    if (reset)\n        state <= OFF;\n    else \n        state <= next_state;\n\nalways @(*)\n    case (state)\n        OFF: \n            begin\n                if (j == 1)\n                    next_state = ON;\n                else\n                    next_state = OFF;\n                out = 1'b0;\n            end\n        ON: \n            begin\n                if (k == 1)\n                    next_state = OFF;\n                else\n                    next_state = ON;\n                out = 1'b1;\n            end\n    endcase\n\nendmodule"}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "\n  // Declare internal wire\n  wire [31:0] concatenated_input;\n\n  // Concatenate input vectors\n  assign concatenated_input = {f, e, d, c, b, a, 2'b11};\n\n  // Split the concatenated input into output vectors\n  assign {z, y, x, w} = concatenated_input;\n\nendmodule"}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & ~b & ~c & ~d) | (~a & ~b & c & ~d) | (~a & b & c & (d | ~d)) | (a & ~b & ~c & ~d) | (a & b & d);\nendmodule\n"}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = a & b;\n\nendmodule"}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter B = 2'b00;\nparameter A = 2'b01;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= B;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase(state)\n\t\tB: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = B;\n\t\t\telse\n\t\t\t\tnext_state = A;\n\t\tend\n\t\tA: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = A;\n\t\t\telse\n\t\t\t\tnext_state = B;\n\t\tend\n\tendcase\nend\n\nassign out = (state == A) ? 1'b0 : 1'b1;\n\nendmodule"}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "\n\tassign {cout, sum} = a + b + cin;\nendmodule"}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\n  assign out = ~(in1 ^ in2) ^ in3;\nendmodule\n"}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "assign mux_in[0] = (c & d') | (c' & d);\nassign mux_in[1] = (c | d);\nassign mux_in[2] = (c & d) | (c' & d);\nassign mux_in[3] = (c & d) | (c & d'); \n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\tcase(state)\n\t\tA: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tz = 1'b0;\n\t\t\t\tnext_state = A;\n\t\t\tend else begin\n\t\t\t\tz = 1'b1;\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\tend\n\t\tB: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tz = 1'b1;\n\t\t\t\tnext_state = B;\n\t\t\tend else begin\n\t\t\t\tz = 1'b0;\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "\nreg q, state;\nalways @(posedge clk)\nbegin\n    state <= (a & !b) | (state & !a);\n    q <= state;\nend\n"}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "assign f = x[1] & x[2] | ~x[3] & ~x[4] | x[1] & x[3] & x[4] | x[1] & ~x[2] & ~x[4]; \n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "reg [2:0] state, next_state;\n\nparameter IDLE = 3'b000;\nparameter CHECK_1S = 3'b001;\nparameter CHECK_6S = 3'b010;\nparameter ERROR = 3'b011;\nparameter FLAG = 3'b100;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tnext_state = state;\n\tdisc = 1'b0;\n\tflag = 1'b0;\n\terr = 1'b0;\n\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = CHECK_1S;\n\t\t\tend\n\t\tend\n\n\t\tCHECK_1S: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = CHECK_6S;\n\t\t\tend else begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\n\t\tCHECK_6S: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = ERROR;\n\t\t\tend else begin\n\t\t\t\tflag = 1'b1;\n\t\t\t\tnext_state = FLAG;\n\t\t\tend\n\t\tend\n\n\t\tERROR: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = ERROR;\n\t\t\tend else begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\n\t\tFLAG: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = ERROR;\n\t\t\tend else begin\n\t\t\t\tnext_state = CHECK_1S;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "always @ (posedge clk) begin\n    if (reset) begin\n        counting <= 0;\n        done <= 0;\n    end else begin\n        if (!counting) begin\n            if (data == 4'b1101) begin\n                counting <= 1;\n                count <= 4'b0000;\n            end\n        end else begin\n            if (count < delay) begin\n                count <= count + 1;\n            end else begin\n                if (ack) begin\n                    done <= 1;\n                    counting <= 0;\n                end\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        fr3 <= 1'b1;\n        fr2 <= 1'b1;\n        fr1 <= 1'b1;\n        dfr <= 1'b1;\n    end else begin\n        case (s)\n            3'b100: begin // Above s[3]\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b0;\n                dfr <= 1'b0;\n            end\n            3'b011: begin // Between s[3] and s[2]\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            3'b010: begin // Between s[2] and s[1]\n                fr3 <= 1'b0;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b0;\n            end\n            default: begin // Below s[1]\n                fr3 <= 1'b1;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b1;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "\nreg [3:0] state, next_state;\n\nparameter IDLE = 4'b0000;\nparameter START_BIT = 4'b0001;\nparameter DATA_BIT = 4'b0010;\nparameter STOP_BIT = 4'b0011;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= IDLE;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    next_state = state;\n    done = 0;\n    \n    case(state)\n        IDLE: begin\n            if (in == 1'b0) begin\n                next_state = START_BIT;\n            end\n        end\n        START_BIT: begin\n            if (in == 1'b0) begin\n                next_state = DATA_BIT;\n            end else begin\n                next_state = IDLE;\n            end\n        end\n        DATA_BIT: begin\n            next_state = (next_state == 8'd8) ? STOP_BIT : DATA_BIT + 1;\n        end\n        STOP_BIT: begin\n            if (in == 1'b1) begin\n                next_state = IDLE;\n                done = 1;\n            end\n        end\n    endcase\nend\n\nendmodule\n"}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "reg [3:0] state;\nreg [2:0] data_bits;\nreg [7:0] shift_reg;\nreg start_bit_detected;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 4'h0;\n    else begin\n        case(state)\n            4'h0: if (!in)\n                        state <= 4'h1;\n            4'h1: begin\n                        if (in) begin\n                            start_bit_detected <= 1;\n                            data_bits <= 3'b0;\n                            shift_reg <= 8'h0;\n                            state <= 4'h2;\n                        end\n                        else\n                            state <= 4'h0;\n                    end\n            4'h2: begin\n                        if (data_bits < 3'b100) begin\n                            shift_reg <= {shift_reg[6:0], in};\n                            data_bits <= data_bits + 1;\n                        end\n                        else\n                            state <= 4'h3;\n                    end\n            4'h3: if (data_bits == 3'b100)\n                        state <= 4'h4;\n                    else\n                        state <= 4'h2;\n            4'h4: if (in)\n                        state <= 4'h5;\n                    else if (data_bits == 3'b100)\n                        state <= 4'h3;\n                    else\n                        state <= 4'h0;\n            4'h5: begin\n                        done <= 1;\n                        out_byte <= shift_reg;\n                        state <= 4'h0;\n                    end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "reg [1:0] prediction_table [0:127];\nreg [6:0] global_history;\nreg [1:0] prediction;\nreg [6:0] prediction_index;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tglobal_history <= 7'b0;\n\t\tprediction_table <= 128'h0000_0000_0000_0000_0000_0000_0000_0000;\n\tend else begin\n\t\tif (predict_valid) begin\n\t\t\tprediction_index = predict_pc ^ global_history;\n\t\t\tprediction = prediction_table[prediction_index];\n\t\t\tpredict_taken = prediction[1];\n\t\t\tpredict_history = global_history;\n\t\tend\n\t\tif (train_valid) begin\n\t\t\tglobal_history <= {global_history[5:0], train_taken};\n\t\t\tprediction_table[train_pc ^ train_history] = train_mispredicted ? ((prediction_table[train_pc ^ train_history] == 2'b01) ? 2'b00 : ((prediction_table[train_pc ^ train_history] == 2'b00) ? 2'b00 : 2'b01)) : ((prediction_table[train_pc ^ train_history] == 2'b11) ? 2'b11 : ((prediction_table[train_pc ^ train_history] == 2'b10) ? 2'b11 : 2'b10));\n\t\tend\n\tend\nendmodule"}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [4:0] state;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= 0;\n\tend else begin\n\t\tcase (state)\n\t\t\t0: begin\n\t\t\t\twalk_left <= 1;\n\t\t\t\twalk_right <= 0;\n\t\t\t\tif (bump_left) begin\n\t\t\t\t\tstate <= 1;\n\t\t\t\tend else if (bump_right) begin\n\t\t\t\t\tstate <= 2;\n\t\t\t\tend else if (!ground) begin\n\t\t\t\t\tstate <= 3;\n\t\t\t\tend else if (dig) begin\n\t\t\t\t\tstate <= 4;\n\t\t\t\tend\n\t\t\tend\n\t\t\t1: begin\n\t\t\t\twalk_left <= 0;\n\t\t\t\twalk_right <= 1;\n\t\t\t\tstate <= 0;\n\t\t\tend\n\t\t\t2: begin\n\t\t\t\twalk_left <= 1;\n\t\t\t\twalk_right <= 0;\n\t\t\t\tstate <= 0;\n\t\t\tend\n\t\t\t3: begin\n\t\t\t\taaah <= 1;\n\t\t\t\tstate <= 0;\n\t\t\tend\n\t\t\t4: begin\n\t\t\t\tdigging <= 1;\n\t\t\t\tif (!ground) begin\n\t\t\t\t\tstate <= 3;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= 4;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nalways @(posedge clk) begin\n\tif (state != 3) begin\n\t\taaah <= 0;\n\tend\n\tif (state != 4) begin\n\t\tdigging <= 0;\n\tend\nend\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [2:0] state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 3'b000; // Initial state to search for the start sequence 1101\n        shift_ena <= 1'b0;\n        counting <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        case(state)\n            3'b000: begin\n                if (data == 1 && $past(data) == 1 && $past($past(data)) == 0)\n                    state <= 3'b001;\n                else\n                    state <= 3'b000;\n            end\n            3'b001: begin\n                shift_ena <= 1'b1;\n                state <= 3'b010;\n            end\n            3'b010: begin\n                shift_ena <= 1'b0;\n                counting <= 1'b1;\n                state <= 3'b011;\n            end\n            3'b011: begin\n                if (done_counting)\n                    state <= 3'b100;\n                else\n                    state <= 3'b011;\n            end\n            3'b100: begin\n                done <= 1'b1;\n                if (ack)\n                    state <= 3'b000;\n                else\n                    state <= 3'b100;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        for (int i = 0; i < 16; i = i + 1) begin\n            for (int j = 0; j < 16; j = j + 1) begin\n                int neighbors = q[(((i+15)%16)*16) + ((j+15)%16)] + q[(((i+15)%16)*16) + j] + q[(((i+15)%16)*16) + ((j+1)%16)]\n                              + q[(i*16) + ((j+15)%16)] + q[(i*16) + ((j+1)%16)]\n                              + q[(((i+1)%16)*16) + ((j+15)%16)] + q[(((i+1)%16)*16) + j] + q[(((i+1)%16)*16) + ((j+1)%16)];\n                \n                if (neighbors == 0 || neighbors == 1 || neighbors >= 4) begin\n                    q[(i*16) + j] <= 1'b0;\n                end else if (neighbors == 3) begin\n                    q[(i*16) + j] <= 1'b1;\n                end\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [2:0] state, next_state;\n\nparameter WALK_LEFT = 3'b001;\nparameter WALK_RIGHT = 3'b010;\nparameter FALLING = 3'b011;\nparameter DIGGING = 3'b100;\n\nalways @ (posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= WALK_LEFT;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @ (*) begin\n    case (state)\n        WALK_LEFT:\n            if (bump_right)\n                next_state = WALK_RIGHT;\n            else if (dig && ground)\n                next_state = DIGGING;\n            else if (!ground)\n                next_state = FALLING;\n            else\n                next_state = WALK_LEFT;\n        \n        WALK_RIGHT:\n            if (bump_left)\n                next_state = WALK_LEFT;\n            else if (dig && ground)\n                next_state = DIGGING;\n            else if (!ground)\n                next_state = FALLING;\n            else\n                next_state = WALK_RIGHT;\n        \n        FALLING:\n            if (ground)\n                next_state = (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n            else\n                next_state = FALLING;\n        \n        DIGGING:\n            if (!dig || !ground)\n                next_state = (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n            else\n                next_state = DIGGING;\n    endcase\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\nassign aaah = (state == FALLING);\nassign digging = (state == DIGGING);\n\nendmodule"}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\thh <= 8'd1;\n\t\tmm <= 8'd2;\n\t\tss <= 8'd0;\n\t\tpm <= 1'b0;\n\tend else begin\n\t\tif (ena) begin\n\t\t\tss <= ss + 1;\n\t\t\tif (ss == 8'd59) begin\n\t\t\t\tss <= 8'd0;\n\t\t\t\tmm <= mm + 1;\n\t\t\t\tif (mm == 8'd59) begin\n\t\t\t\t\tmm <= 8'd0;\n\t\t\t\t\thh <= hh + 1;\n\t\t\t\t\tif (hh == 8'd12) begin\n\t\t\t\t\t\thh <= 8'd1;\n\t\t\t\t\t\tpm <= ~pm;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "reg [1:0] state;\nparameter WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01, FALLING = 2'b10;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tcase (state)\n\t\t\tWALK_LEFT: begin\n\t\t\t\tif (bump_left && !bump_right)\n\t\t\t\t\tstate <= WALK_RIGHT;\n\t\t\t\telse if (!bump_left && bump_right)\n\t\t\t\t\tstate <= WALK_LEFT;\n\t\t\t\telse if (ground)\n\t\t\t\t\tstate <= WALK_LEFT;\n\t\t\t\telse\n\t\t\t\t\tstate <= FALLING;\n\t\t\tend\n\t\t\tWALK_RIGHT: begin\n\t\t\t\tif (bump_left && !bump_right)\n\t\t\t\t\tstate <= WALK_RIGHT;\n\t\t\t\telse if (!bump_left && bump_right)\n\t\t\t\t\tstate <= WALK_LEFT;\n\t\t\t\telse if (ground)\n\t\t\t\t\tstate <= WALK_RIGHT;\n\t\t\t\telse\n\t\t\t\t\tstate <= FALLING;\n\t\t\tend\n\t\t\tFALLING: begin\n\t\t\t\tif (ground)\n\t\t\t\t\tstate <= (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\nassign aaah = (state == FALLING);\n\nendmodule"}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "reg [3:0] count;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tcount <= 4'b0000;\n\t\tq <= 16'b0000;\n\tend else begin\n\t\tif (count == 4'b1001) begin\n\t\t\tcount <= 4'b0000;\n\t\t\tq <= q + 1;\n\t\tend else begin\n\t\t\tcount <= count + 1;\n\t\tend\n\tend\nend\n\nassign ena = count[2:0];\nendmodule"}
{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "assign out = (sel == 1'b0) ? a : b;\n\nendmodule"}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(*)\nbegin\n    case(y)\n        3'b000: Y2 = (w == 1) ? 0 : 1;\n        3'b001: Y2 = (w == 1) ? 1 : 0;\n        3'b010: Y2 = (w == 1) ? 1 : 0;\n        3'b011: Y2 = (w == 1) ? 2 : 1;\n        3'b100: Y2 = (w == 1) ? 2 : 1;\n        3'b101: Y2 = (w == 1) ? 2 : 1;\n        default: Y2 = 0;\n    endcase\nend\n\nendmodule"}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "assign ringer = ~vibrate_mode & ring;\nassign motor = vibrate_mode & ~ring;\n\nendmodule"}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*) begin\n\tout_alwaysblock = a & b;\nend\n\nendmodule"}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": ""}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n    if (a) begin\n        q <= 0;\n    end else begin\n        q <= a;\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [2:0] state;\nreg z;\nreg [2:0] next_state;\n\nparameter s0 = 3'b000, s1 = 3'b001, s2 = 3'b010, s3 = 3'b011;\n\nalways @(posedge clk or negedge areset) begin\n\tif (!areset)\n\t\tstate <= s0;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @* begin\n\tcase(state)\n\t\ts0: begin\n\t\t\tif (areset)\n\t\t\t\tnext_state = s0;\n\t\t\telse if (x == 1'b1)\n\t\t\t\tnext_state = s1;\n\t\t\telse\n\t\t\t\tnext_state = s0;\n\t\tend\n\t\ts1: begin\n\t\t\tif (areset)\n\t\t\t\tnext_state = s0;\n\t\t\telse if (x == 1'b0)\n\t\t\t\tnext_state = s2;\n\t\t\telse\n\t\t\t\tnext_state = s1;\n\t\tend\n\t\ts2: begin\n\t\t\tif (areset)\n\t\t\t\tnext_state = s0;\n\t\t\telse if (x == 1'b1)\n\t\t\t\tnext_state = s2;\n\t\t\telse\n\t\t\t\tnext_state = s3;\n\t\tend\n\t\ts3: begin\n\t\t\tif (areset)\n\t\t\t\tnext_state = s0;\n\t\t\telse\n\t\t\t\tnext_state = s3;\n\t\tend\n\t\tdefault: next_state = s0;\n\tendcase\nend\n\nalways @* begin\n\tcase(state)\n\t\ts0: z = 1'b0;\n\t\ts1: z = 1'b1;\n\t\ts2: z = ~z;\n\t\ts3: z = ~z + 1'b1;\n\t\tdefault: z = 1'b0;\n\tendcase\nend\n\nendmodule"}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\nreg out_reg;\n\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @ (posedge clk or posedge areset)\nbegin\n    if (areset)\n        state <= A;\n    else\n        state <= next_state;\nend\n\nalways @ (*)\nbegin\n    case(state)\n        A: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = A;\n            out_reg = 1'b0;\n        end\n        B: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = C;\n            out_reg = 1'b0;\n        end\n        C: begin\n            if (in)\n                next_state = D;\n            else\n                next_state = A;\n            out_reg = 1'b0;\n        end\n        D: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = C;\n            out_reg = 1'b1;\n        end\n    endcase\nend\n\nassign out = out_reg;\n\nendmodule"}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n  assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule"}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk) begin\n    if (r) begin\n        q <= 0;\n    end else begin\n        q <= d;\n    end\nend\nendmodule"}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        case(amount)\n            2'b00: q <= ena ? {q[62:0], q[63]} : q;\n            2'b01: q <= ena ? data : q << 8;\n            2'b10: q <= ena ? {q[63], q[63:1]} : q;\n            2'b11: q <= ena ? {64{q[63]}} : q >> 8;\n        endcase\n    end\nend\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter S0 = 2'b00;\nparameter S1 = 2'b01;\nparameter S2 = 2'b10;\n\nalways @(posedge clk or negedge aresetn) begin\n    if (~aresetn) begin\n        state <= S0;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @(*) begin\n    next_state = S0;\n    z = 0;\n\n    case (state)\n        S0: begin\n            if (x) begin\n                next_state = S1;\n            end\n        end\n        S1: begin\n            if (!x) begin\n                next_state = S0;\n            end else begin\n                next_state = S2;\n            end\n        end\n        S2: begin\n            if (x) begin\n                z = 1;\n            end\n            next_state = S1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nparameter A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tA: begin\n\t\t\tif (w)\n\t\t\t\tnext_state = A;\n\t\t\telse\n\t\t\t\tnext_state = B;\n\t\tend\n\t\tB: begin\n\t\t\tif (w)\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = C;\n\t\tend\n\t\tC: begin\n\t\t\tif (w)\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = E;\n\t\tend\n\t\tD: begin\n\t\t\tif (w)\n\t\t\t\tnext_state = A;\n\t\t\telse\n\t\t\t\tnext_state = F;\n\t\tend\n\t\tE: begin\n\t\t\tif (w)\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = E;\n\t\tend\n\t\tF: begin\n\t\t\tif (w)\n\t\t\t\tnext_state = D;\n\t\t\telse\n\t\t\t\tnext_state = C;\n\t\tend\n\t\tdefault: next_state = A;\n\tendcase\nend\n\nassign z = (state == F);\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "\nreg [1:0] state;\nreg [7:0] first_byte, second_byte, third_byte;\nreg [23:0] out_bytes_reg;\nreg done_reg;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= 0;\n        done_reg <= 0;\n    end else begin\n        case (state)\n            0: begin // Idle state\n                if (in[3] == 1) begin\n                    first_byte <= in;\n                    state <= 1;\n                end\n            end\n            1: begin // First byte received, waiting for second byte\n                second_byte <= in;\n                state <= 2;\n            end\n            2: begin // Second byte received, waiting for third byte\n                third_byte <= in;\n                state <= 3;\n            end\n            3: begin // Third byte received, output message and set done\n                out_bytes_reg <= {first_byte, second_byte, third_byte};\n                done_reg <= 1;\n                state <= 0;\n            end\n            default: state <= 0; // Reset to idle state on any unexpected state\n        endcase\n    end\nend\n\nassign out_bytes = done_reg ? out_bytes_reg : 24'bxxxxxxxxxxxxxxxxxxxxxxxx;\nassign done = done_reg;\n\nendmodule\n"}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = y[0] & ((y[1] & w) | (y[0] & ~w));\nassign Y3 = y[2] & ((y[3] & w) | (y[2] & ~w));\n\nendmodule"}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "assign {o2, o1, o0} = vec;\nassign outv = vec;\n\nendmodule"}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case ({c, d, a, b})\n        4'b0000: out = 1'b0;\n        4'b0001: out = 1'b1;\n        4'b0011: out = 1'b0;\n        4'b0010: out = 1'b1;\n        4'b0110: out = 1'b1;\n        4'b0111: out = 1'b0;\n        4'b0101: out = 1'b0;\n        4'b0100: out = 1'b1;\n        4'b1100: out = 1'b1;\n        4'b1101: out = 1'b0;\n        4'b1111: out = 1'b1;\n        4'b1110: out = 1'b0;\n        4'b1010: out = 1'b0;\n        4'b1011: out = 1'b1;\n        4'b1001: out = 1'b1;\n        4'b1000: out = 1'b0;\n        default: out = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "assign out_hi = in[15:8];\n\tassign out_lo = in[7:0];\n\nendmodule"}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "\n  assign out = ~(a | b);\n\nendmodule"}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @* begin\n    out_always_comb = a ^ b;\nend\n\nalways @(posedge clk) begin\n    out_always_ff <= a ^ b;\nend\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "assign Y2 = (y[1] & ~y[4] & ~y[3]) | (~y[1] & y[4] & ~y[3]) | (~y[1] & ~y[4] & y[3]);\nassign Y4 = (~y[1] & y[4] & ~y[3]) | (~y[1] & ~y[4] & y[3]);\n\nendmodule"}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "\nassign out = in[sel];\nendmodule\n"}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n\tif (L) begin\n\t\tQ <= R;\n\tend else begin\n\t\tif (E) begin\n\t\t\tQ <= w;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "always @(posedge clk)\nbegin\n\t// Define flip-flops\n\treg flop1, flop2, flop3;\n\t\n\t// Define logic gates\n\twire xor_out, and_out, or_out;\n\t\n\t// Implement XOR gate\n\tassign xor_out = x ^ flop1;\n\t// Implement AND gate\n\tassign and_out = flop2 & (~flop2);\n\t// Implement OR gate\n\tassign or_out = flop3 | (~flop3);\n\t\n\t// Implement flip-flops\n\talways @(posedge clk)\n\tbegin\n\t\tflop1 <= xor_out;\n\t\tflop2 <= and_out;\n\t\tflop3 <= or_out;\n\tend\n\n\t// XNOR gate\n\tassign z = ~(xor_out ^ and_out ^ or_out);\nend\nendmodule"}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & (~b & ~c & d)) | (~a & ~b & c) | (a & ~b & c) | (a & b & ~c) | (a & b & c);\nendmodule\n"}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @ (posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        q[0] = (q[1] & q[0]) | (~q[1] & ~q[0]);\n        for (int i = 1; i < 511; i = i + 1) begin\n            q[i] = (q[i-1] & q[i] & ~q[i+1]) | (q[i-1] & ~q[i] & q[i+1]) | (q[i-1] & ~q[i] & ~q[i+1]) | (~q[i-1] & q[i] & q[i+1]);\n        end\n        q[511] = (q[510] & q[511]) | (~q[510] & ~q[511]);\n    end\nend\n\nendmodule"}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\nreg out_reg;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= A;\n\t\tout_reg <= 1'b0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tout_reg <= (state == D) ? 1'b1 : 1'b0;\n\tend\nend\n\nalways @(*) begin\n\tcase(state)\n\t\tA: begin\n\t\t\tnext_state = (in) ? B : A;\n\t\tend\n\t\tB: begin\n\t\t\tnext_state = (in) ? B : C;\n\t\tend\n\t\tC: begin\n\t\t\tnext_state = (in) ? D : A;\n\t\tend\n\t\tD: begin\n\t\t\tnext_state = (in) ? B : C;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = A;\n\t\tend\n\tendcase\nend\n\nassign out = out_reg;\n\nendmodule"}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @* begin\n    case({a,b,c,d,e})\n        4'b0000: q = b;\n        4'b0001: q = b;\n        4'b0010: q = e;\n        4'b0011: q = a;\n        4'b0100: q = d;\n        4'b0101: q = 4'b1111; // f in binary\n        4'b0110: q = 4'b1111;\n        4'b0111: q = 4'b1111;\n        4'b1000: q = 4'b1111;\n        4'b1001: q = 4'b1111;\n        4'b1010: q = 4'b1111;\n        4'b1011: q = 4'b1111;\n        4'b1100: q = 4'b1111;\n        4'b1101: q = 4'b1111;\n        4'b1110: q = 4'b1111;\n        4'b1111: q = 4'b1111;\n        default: q = 4'b1111;\n    endcase\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "assign out = (~sel & a) | (sel & b);\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "full_module full_inst1(.r(r_in), .L(L), .clk(clk), .q(Q));\nfull_module full_inst2(.r(Q), .L(L), .clk(clk), .q(Q));\nfull_module full_inst3(.r(Q), .L(L), .clk(clk), .q(Q));\n\nendmodule"}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "always @(posedge clk) begin\n    if (reset)\n        out <= 32'b0;\n    else begin\n        for (int i=0; i<32; i=i+1) begin\n            if (in[i] && ~in[i])\n                out[i] <= 1;\n        end\n    end\nend\n\nendmodule"}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "reg [7:0] q_reg;\n\nalways @(posedge clk) begin\n    q_reg <= d;\nend\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "reg [6:0] a_temp;\nreg sum_sign;\n\nalways @(a, b) begin\n    a_temp = a + b;\n    sum_sign = a_temp[7] ^ a[7] ^ b[7];\nend\n\nassign s = a_temp;\nassign overflow = sum_sign;\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "always @(*) begin\n    case(state)\n        10'b0000000000: begin // S\n            S_next = d ? 10'b0000000010 : 10'b0000000001;\n        end\n        10'b0000000010: begin // S1\n            S1_next = d ? 10'b0000000100 : 10'b0000000010;\n        end\n        10'b0000000100: begin // S11\n            case(d)\n                1: S11_next = 10'b0000000100;\n                0: S11_next = 10'b0000000001;\n            endcase\n        end\n        10'b0000001000: begin // B3\n            B3_next = 10'b1000000000;\n        end\n        10'b1000000000: begin // Count\n            Count_next = done_counting ? 10'b0100000000 : 10'b1000000000;\n        end\n        10'b0100000000: begin // Wait\n            Wait_next = ack ? 10'b0000000001 : 10'b0100000000;\n        end\n    endcase\n\n    done = state == 10'b0100000000 ? 1 : 0;\n    counting = state == 10'b1000000000 ? 1 : 0;\n    shift_ena = state >= 10'b0111 && state <= 10'b1111 ? 1 : 0;\nend\n\nendmodule"}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "always_ff @(posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= 2'b01;\n    end else begin\n        if (train_valid) begin\n            if (train_taken) begin\n                if (state < 2'b11) begin\n                    state <= state + 1;\n                end\n            end else begin\n                if (state > 2'b00) begin\n                    state <= state - 1;\n                end\n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "always @(*) begin\n\tpos = 3'b0;\n\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\tif (in[i] == 1) begin\n\t\t\tpos = i + 1;\n\t\t\tbreak;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @* begin\n    case (scancode)\n        16'he06b: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'he072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'he074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'he075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "wire [3:0] carry;\nwire overflow;\n\nfull_adder fa0(.a(x[0]), .b(y[0]), .cin(1'b0), .sum(sum[0]), .cout(carry[0]));\nfull_adder fa1(.a(x[1]), .b(y[1]), .cin(carry[0]), .sum(sum[1]), .cout(carry[1]));\nfull_adder fa2(.a(x[2]), .b(y[2]), .cin(carry[1]), .sum(sum[2]), .cout(carry[2]));\nfull_adder fa3(.a(x[3]), .b(y[3]), .cin(carry[2]), .sum(sum[3]), .cout(carry[3]));\n\nassign sum[4] = overflow;\nassign overflow = carry[3] & (carry[2] ^ carry[3]);\n\nendmodule"}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "\n    logic [31:0] branch_history_reg;\n\n    always_ff @(posedge clk or posedge areset) begin\n        if (areset)\n            branch_history_reg <= 32'b0;\n        else if (train_mispredicted)\n            branch_history_reg <= {train_history[30:0], train_taken};\n        else if (predict_valid)\n            branch_history_reg <= {branch_history_reg[30:0], predict_taken};\n    end\n\n    assign predict_history = branch_history_reg;\n\nendmodule\n"}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "wire inter1, inter2;\n\nand gate1 (inter1, a, b);\nand gate2 (inter2, c, d);\nor gate3 (out, inter1, inter2);\nassign out_n = ~out;\n\nendmodule"}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk)\nbegin\n    q <= d;\nend\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] Q;\n\nalways @(posedge clk) begin\n\tif(enable) begin\n\t\tQ <= {Q[6:0], S};\n\tend\n\t\n\tcase({A,B,C})\n\t\t3'b000: Z <= Q[0];\n\t\t3'b001: Z <= Q[1];\n\t\t3'b010: Z <= Q[2];\n\t\t3'b011: Z <= Q[3];\n\t\t3'b100: Z <= Q[4];\n\t\t3'b101: Z <= Q[5];\n\t\t3'b110: Z <= Q[6];\n\t\t3'b111: Z <= Q[7];\n\tendcase\nend\n\nendmodule"}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "reg fan;\n\nalways @ (mode, too_cold, too_hot, fan_on)\nbegin\n\tif (mode == 1 && too_cold)\n\tbegin\n\t\theater = 1;\n\t\taircon = 0;\n\t\tfan = 1;\n\tend\n\telse if (mode == 0 && too_hot)\n\tbegin\n\t\theater = 0;\n\t\taircon = 1;\n\t\tfan = 1;\n\tend\n\telse if (fan_on)\n\tbegin\n\t\theater = 0;\n\t\taircon = 0;\n\t\tfan = 1;\n\tend\n\telse\n\tbegin\n\t\theater = 0;\n\t\taircon = 0;\n\t\tfan = 0;\n\tend\nend\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "assign out_sop = (~a & ~b & c & d) | (~a & b & ~c & ~d) | (a & ~b & ~c & ~d);\nassign out_pos = (a + b + ~c + ~d) * (a + ~b + c + d) * (~a + b + c + d); \n\nendmodule"}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 32'h1;\n\tend else begin\n\t\tq <= {q[30]^q[21]^q[1]^q[0], q[31:1]};\n\tend\nend\n\nendmodule"}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = !(a & b & c) | d;\nendmodule\n"}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "nand nand_gate1(p1a, p1b, p1c, p1d, temp1);\nnand nand_gate2(p2a, p2b, p2c, p2d, temp2);\nassign p1y = temp1;\nassign p2y = temp2;\n\nendmodule"}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "always @(*) begin\n    out = 0;\n    for (int i = 0; i < 255; i = i + 1) begin\n        out = out + in[i];\n    end\nend\nendmodule"}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "assign out_both[0] = (in[0] & in[3]);\nassign out_both[1] = (in[1] & in[0]);\nassign out_both[2] = (in[2] & in[1]);\n\nassign out_any[1] = (in[1] | in[2]);\nassign out_any[2] = (in[2] | in[3]);\nassign out_any[3] = (in[3] | in[0]);\n\nassign out_different[0] = (in[0] ^ in[3]);\nassign out_different[1] = (in[1] ^ in[0]);\nassign out_different[2] = (in[2] ^ in[1]);\nassign out_different[3] = (in[3] ^ in[2]);\n\nendmodule"}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @(*) begin\n    case(a)\n        3'b000: q <= 16'h1232;\n        3'b001: q <= 16'haee0;\n        3'b010: q <= 16'h27d4;\n        3'b011: q <= 16'h5a0e;\n        3'b100: q <= 16'h2066;\n        3'b101: q <= 16'h64ce;\n        3'b110: q <= 16'hc526;\n        3'b111: q <= 16'h2f19;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] count;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tcount <= 4'b0;\n\tend else begin\n\t\tif (slowena) begin\n\t\t\tif (count == 4'b1001) begin\n\t\t\t\tcount <= 4'b0;\n\t\t\tend else begin\n\t\t\t\tcount <= count + 1;\n\t\t\tend\n\t\tend\n\tend\nend\n\nassign q = count;\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\nassign out = in1 & ~in2;\nendmodule"}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule"}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= B;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @(*) begin\n    case (state)\n        A: begin\n            if (in) begin\n                next_state = A;\n            end else begin\n                next_state = B;\n            end\n        end\n        \n        B: begin\n            if (in) begin\n                next_state = B;\n            end else begin\n                next_state = A;\n            end\n        end\n    endcase\nend\n\nassign out = (state == A) ? 1'b0 : 1'b1;\n\nendmodule"}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk)\n    begin\n        q <= d;\n    end\n\nalways @(negedge clk)\n    begin\n        q <= d;\n    end\nendmodule"}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "assign out = ~(a ^ b);\nendmodule"}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\n\n\tassign z = (x ^ y) & x;\n\nendmodule\n\nmodule B(\n\tinput x,\n\tinput y,\n\toutput z\n);\n\n\treg z;\n\t\n\tinitial begin\n\t\t$monitor(\"%dns: x=%b, y=%b, z=%b\", $time, x, y, z);\n\t\tz = 1'b1;\n\t\t#5;\n\t\tz = 1'b0;\n\t\t#10;\n\t\tz = x & y;\n\t\t#5;\n\t\tz = 1'b0;\n\t\t#5;\n\t\tz = x & y;\n\t\t#5;\n\t\tz = 1'b1;\n\t\t#5;\n\t\tz = x;\n\t\t#5;\n\t\tz = 1'b0;\n\t\t#5;\n\t\tz = x & y;\n\t\t#5;\n\t\tz = 1'b1;\n\t\t#5;\n\t\tz = x;\n\t\t#5;\n\t\tz = 1'b0;\n\t\t#5;\n\t\tz = x & y;\n\t\t#5;\n\t\tz = 1'b0;\n\t\t#5;\n\t\tz = x & y;\n\t\t#5;\n\t\tz = 1'b0;\n\tend\n\nendmodule\n\nmodule top_module(\n\tinput x,\n\tinput y,\n\toutput z\n);\n\n\twire z1, z2;\n\n\tA a1(.x(x), .y(y), .z(z1));\n\tA a2(.x(x), .y(y), .z(z2));\n\tB b1(.x(x), .y(y), .z(z1));\n\tB b2(.x(x), .y(y), .z(z2));\n\n\tassign z = z1 ^ z2;\n\nendmodule"}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        case (ena)\n            2'b01: q <= {q[0], q[99:1]};\n            2'b10: q <= {q[1:99], q[0]};\n            default: q <= q;\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "reg [9:0] count;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tcount <= 10'd0;\n\tend else begin\n\t\tif (count == 10'd999) begin\n\t\t\tcount <= 10'd0;\n\t\tend else begin\n\t\t\tcount <= count + 10'd1;\n\t\tend\n\tend\nend\n\nassign q = count;\n\nendmodule"}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "not_gate not (\n\t.in(in),\n\t.out(out)\n);\n\nendmodule"}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "always_comb begin\n    case(state)\n        10'b1 : begin // S0\n            next_state = 10'b01;\n            out1 = 1'b0;\n            out2 = 1'b0;\n        end\n        10'b10 : begin // S1\n            if(in == 1'b0) begin\n                next_state = 10'b01;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end else begin\n                next_state = 10'b100;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end\n        end\n        10'b100 : begin // S2\n            if(in == 1'b0) begin\n                next_state = 10'b01;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end else begin\n                next_state = 10'b1000;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end\n        end\n        10'b1000 : begin // S3\n            if(in == 1'b0) begin\n                next_state = 10'b01;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end else begin\n                next_state = 10'b10000;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end\n        end\n        10'b10000 : begin // S4\n            if(in == 1'b0) begin\n                next_state = 10'b01;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end else begin\n                next_state = 10'b100000;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end\n        end\n        10'b100000 : begin // S5\n            if(in == 1'b0) begin\n                next_state = 10'b100000000;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end else begin\n                next_state = 10'b1000000;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end\n        end\n        10'b1000000 : begin // S6\n            if(in == 1'b0) begin\n                next_state = 10'b1000000000;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end else begin\n                next_state = 10'b10000000;\n                out1 = 1'b0;\n                out2 = 1'b0;\n            end\n        end\n        10'b10000000 : begin // S7\n            if(in == 1'b0) begin\n                next_state = 10'b01;\n                out1 = 1'b0;\n                out2 = 1'b1;\n            end else begin\n                next_state = 10'b10000000;\n                out1 = 1'b0;\n                out2 = 1'b1;\n            end\n        end\n        10'b100000000 : begin // S8\n            if(in == 1'b0) begin\n                next_state = 10'b01;\n                out1 = 1'b1;\n                out2 = 1'b0;\n            end else begin\n                next_state = 10'b10;\n                out1 = 1'b1;\n                out2 = 1'b0;\n            end\n        end\n        10'b1000000000 : begin // S9\n            if(in == 1'b0) begin\n                next_state = 10'b01;\n                out1 = 1'b1;\n                out2 = 1'b1;\n            end else begin\n                next_state = 10'b10;\n                out1 = 1'b1;\n                out2 = 1'b1;\n            end\n        end\n        default: begin\n            next_state = 10'b01;\n            out1 = 1'b0;\n            out2 = 1'b0;\n        end\n    endcase\nend\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n    if (j & !k)\n        Q <= 1;\n    else if (!j & k)\n        Q <= 0;\n    else if (j & k)\n        Q <= ~Q;\nend\nendmodule"}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "reg [1:0] count;\n\nalways @(*) begin\n\tcount = in[0] + in[1] + in[2];\nend\n\nassign out = count;\n\nendmodule"}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "\nassign out[24] = ~a ^ a;\nassign out[23] = ~a ^ b;\nassign out[22] = ~a ^ c;\nassign out[21] = ~a ^ d;\nassign out[20] = ~a ^ e;\nassign out[19] = ~b ^ a;\nassign out[18] = ~b ^ b;\nassign out[17] = ~b ^ c;\nassign out[16] = ~b ^ d;\nassign out[15] = ~b ^ e;\nassign out[14] = ~c ^ a;\nassign out[13] = ~c ^ b;\nassign out[12] = ~c ^ c;\nassign out[11] = ~c ^ d;\nassign out[10] = ~c ^ e;\nassign out[9] = ~d ^ a;\nassign out[8] = ~d ^ b;\nassign out[7] = ~d ^ c;\nassign out[6] = ~d ^ d;\nassign out[5] = ~d ^ e;\nassign out[4] = ~e ^ a;\nassign out[3] = ~e ^ b;\nassign out[2] = ~e ^ c;\nassign out[1] = ~e ^ d;\nassign out[0] = ~e ^ e;\nendmodule\n"}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "reg [1:0] state;\nreg walk_left, walk_right;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= 2'b01; //reset to walk_left state\n\t\twalk_left <= 1;\n\t\twalk_right <= 0;\n\tend else begin\n\t\tcase (state)\n\t\t\t2'b00: begin //walk_right state\n\t\t\t\tif (bump_left) begin\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\t\twalk_left <= 1;\n\t\t\t\t\twalk_right <= 0;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b01: begin //walk_left state\n\t\t\t\tif (bump_right) begin\n\t\t\t\t\tstate <= 2'b00;\n\t\t\t\t\twalk_left <= 0;\n\t\t\t\t\twalk_right <= 1;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule"}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "\nassign q = a & b;\nendmodule\n"}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "\nassign p1y = (p1a & p1b & p1c) | (p1d & p1e & p1f);\nassign p2y = (p2a & p2b) | (p2c & p2d);\nendmodule\n"}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "always @(posedge clk) begin\n    case({y, x})\n        3'b0000: begin Y0 <= 1'b0; z <= 1'b0; end\n        3'b0001: begin Y0 <= 1'b0; z <= 1'b0; end\n        3'b0010: begin Y0 <= 1'b0; z <= 1'b0; end\n        3'b0111: begin Y0 <= 1'b0; z <= 1'b1; end\n        3'b1000: begin Y0 <= 1'b1; z <= 1'b1; end\n        default: begin Y0 <= 1'b0; z <= 1'b0; end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "\n  assign out = ~(in1 | in2);\nendmodule"}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "assign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule"}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or posedge ar)\nbegin\n\tif(ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\nendmodule"}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @(*)\nbegin\n\tif (sel == 3'b000) out <= data0;\n\telse if (sel == 3'b001) out <= data1;\n\telse if (sel == 3'b010) out <= data2;\n\telse if (sel == 3'b011) out <= data3;\n\telse if (sel == 3'b100) out <= data4;\n\telse if (sel == 3'b101) out <= data5;\n\telse out <= 4'b0000;\nend\n\nendmodule"}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "\nreg [9:0] counter;\nreg tc;\n\nalways @(posedge clk) begin\n    if (load == 1) begin\n        counter <= data;\n    end else begin\n        if (counter > 0) begin\n            counter <= counter - 1;\n        end\n    end\n    \n    if (counter == 0) begin\n        tc <= 1;\n    end else begin\n        tc <= 0;\n    end\nend\n\nendmodule\n"}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\nreg [3:0] state;\nreg start_shifting;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 4'b0000;\n        start_shifting <= 1'b0;\n    end else begin\n        case (state)\n            4'b0000: begin // Initial state\n                if (data) begin\n                    state <= 4'b0001;\n                end\n            end\n            4'b0001: begin\n                if (data) begin\n                    state <= 4'b0010;\n                end else begin\n                    state <= 4'b0000;\n                end\n            end\n            4'b0010: begin\n                if (data) begin\n                    state <= 4'b0011;\n                end else begin\n                    state <= 4'b0000;\n                end\n            end\n            4'b0011: begin\n                if (data) begin\n                    start_shifting <= 1'b1;\n                    state <= 4'b0011;\n                end else begin\n                    state <= 4'b0000;\n                end\n            end\n        endcase\n    end\nend\n\nendmodule\n"}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk)\nbegin\n    if (reset == 1'b1)\n        q <= 8'd0;\n    else\n        q <= d;\nend\n\nendmodule"}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "always @(posedge clk) begin\n    for (int i = 0; i < 8; i = i + 1) begin\n        if (in[i] && !prev_in[i]) begin\n            anyedge[i] <= 1;\n        end\n    end\n    prev_in <= in;\nend\nendmodule"}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        q <= 4'b0001;\n    end else begin\n        if (q == 4'b1010) begin\n            q <= 4'b0001;\n        end else begin\n            q <= q + 4'b0001;\n        end\n    end\nend\n\nendmodule"}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1) begin\n        q <= q + 3;\n    end else begin\n        q <= {q[1:0], 0};\n    end\nend\n\nendmodule"}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        q <= 5'b1;\n    end else begin\n        q <= {q[3]^q[4], q[0:3]};\n    end\nend\n\nendmodule"}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "    always @(*) begin\n        case (do_sub)\n            0: out = a + b;\n            1: out = a - b;\n        endcase\n\n        if (out == 8'h00)\n            result_is_zero = 1;\n        else\n            result_is_zero = 0;\n    end\nendmodule"}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "always_comb begin\n    case (x)\n        4'b0000: f = 1'b0;\n        4'b0001: f = 1'bx;\n        4'b0010: f = 1'b1;\n        4'b0011: f = 1'b0;\n        4'b1011: f = 1'b1;\n        4'b1010: f = 1'b0;\n        4'b1110: f = 1'bx;\n        4'b1111: f = 1'bx;\n        default: f = 1'bx;\n    endcase\nend\nendmodule"}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case(code)\n        8'h45: begin\n            out <= 4'b0000;\n            valid <= 1;\n        end\n        8'h16: begin\n            out <= 4'b0001;\n            valid <= 1;\n        end\n        8'h1e: begin\n            out <= 4'b0010;\n            valid <= 1;\n        end\n        8'h26: begin\n            out <= 4'b0011;\n            valid <= 1;\n        end\n        8'h25: begin\n            out <= 4'b0100;\n            valid <= 1;\n        end\n        8'h2e: begin\n            out <= 4'b0101;\n            valid <= 1;\n        end\n        8'h36: begin\n            out <= 4'b0110;\n            valid <= 1;\n        end\n        8'h3d: begin\n            out <= 4'b0111;\n            valid <= 1;\n        end\n        8'h3e: begin\n            out <= 4'b1000;\n            valid <= 1;\n        end\n        8'h46: begin\n            out <= 4'b1001;\n            valid <= 1;\n        end\n        default: begin\n            out <= 4'b0000;\n            valid <= 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "\n  assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule"}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n    case ({c, d, a, b})\n        4'b0000: out = 1'b1;\n        4'b0010: out = 1'b1;\n        4'b0011: out = 1'b1;\n        4'b0111: out = 1'b1;\n        default: out = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] shift_reg;\n\nalways @(posedge clk) begin\n    if (shift_ena) begin\n        shift_reg <= {shift_reg[2:0], data};\n    end\n    else if (count_ena) begin\n        shift_reg <= shift_reg - 1;\n    end\nend\n\nassign q = shift_reg;\n\nendmodule"}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "reg [2:0] counter = 3'b100;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tshift_ena <= 1;\n\t\tcounter <= 3'b100;\n\tend else begin\n\t\tif (counter > 0) begin\n\t\t\tshift_ena <= 1;\n\t\t\tcounter <= counter - 1;\n\t\tend else begin\n\t\t\tshift_ena <= 0;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] counter;\n\nalways @(posedge clk) begin\n\tif (reset)\n\t\tcounter <= 4'b0000;\n\telse if (counter == 4'b1111)\n\t\tcounter <= 4'b0000;\n\telse\n\t\tcounter <= counter + 4'd1;\nend\n\nassign q = counter;\n\nendmodule"}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\nalways @* begin\n\tif (sel_b1 & sel_b2) begin\n\t\tout_always <= b;\n\tend else begin\n\t\tout_always <= a;\n\tend\nend\n\nendmodule"}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "\n  // Creating the output based on the Karnaugh map\n  assign out = (~a & b) | (b & c);\n  \nendmodule"}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "reg [3:1] state, next_state;\n\nparameter A = 3'b001;\nparameter B = 3'b010;\nparameter C = 3'b011;\nparameter D = 3'b100;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase(state)\n\t\tA: begin\n\t\t\tif (r[1] == 1) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else if (r[2] == 1) begin\n\t\t\t\tnext_state = C;\n\t\t\tend else if (r[3] == 1) begin\n\t\t\t\tnext_state = D;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tB: begin\n\t\t\tif (r[1] == 1) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tC: begin\n\t\t\tif (r[2] == 1) begin\n\t\t\t\tnext_state = C;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tD: begin\n\t\t\tif (r[1] == 1) begin\n\t\t\t\tnext_state = A;\n\t\t\tend else begin\n\t\t\t\tnext_state = D;\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = A;\n\tendcase\nend\n\nassign g[1] = (state == B) ? 1 : 0;\nassign g[2] = (state == C) ? 1 : 0;\nassign g[3] = (state == D) ? 1 : 0;\n\nendmodule"}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 4'b0000;\n\tend else begin\n\t\tif (q == 4'b1001) begin\n\t\t\tq <= 4'b0000;\n\t\tend else begin\n\t\t\tq <= q + 4'b0001;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "reg [1:0] state;\nreg done;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\t\tdone <= 0;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\t2'b00: begin\n\t\t\t\tif (in[3] == 1)\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\telse\n\t\t\t\t\tstate <= 2'b00;\n\t\t\tend\n\t\t\t2'b01: begin\n\t\t\t\tstate <= 2'b10;\n\t\t\tend\n\t\t\t2'b10: begin\n\t\t\t\tif (in[3] == 1) begin\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\t\tdone <= 1;\n\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tstate <= 2'b00;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule"}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "assign out = sel ? b : a;\n\nendmodule"}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = in[0] & in[1] & in[2] & in[3];\nassign out_or = in[0] | in[1] | in[2] | in[3];\nassign out_xor = in[0] ^ in[1] ^ in[2] ^ in[3];\n\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "always @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\ty <= 3'b000;\n\tend else begin\n\t\tcase(y)\n\t\t\t3'b000: begin\n\t\t\t\tif (x) begin\n\t\t\t\t\ty <= 3'b001;\n\t\t\t\tend else begin\n\t\t\t\t\ty <= 3'b000;\n\t\t\t\tend\n\t\t\tend\n\t\t\t3'b001: begin\n\t\t\t\tif (x) begin\n\t\t\t\t\ty <= 3'b100;\n\t\t\t\tend else begin\n\t\t\t\t\ty <= 3'b001;\n\t\t\t\tend\n\t\t\tend\n\t\t\t3'b010: begin\n\t\t\t\tif (x) begin\n\t\t\t\t\ty <= 3'b001;\n\t\t\t\tend else begin\n\t\t\t\t\ty <= 3'b010;\n\t\t\t\tend\n\t\t\tend\n\t\t\t3'b011: begin\n\t\t\t\tif (x) begin\n\t\t\t\t\ty <= 3'b010;\n\t\t\t\tend else begin\n\t\t\t\t\ty <= 3'b001;\n\t\t\t\t\tz <= 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t3'b100: begin\n\t\t\t\tif (x) begin\n\t\t\t\t\ty <= 3'b100;\n\t\t\t\tend else begin\n\t\t\t\t\ty <= 3'b011;\n\t\t\t\t\tz <= 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or negedge resetn) begin\n    if (~resetn) begin\n        state <= 2'b00; // State A\n        f <= 0;\n        g <= 0;\n    end\n    else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case (state)\n        2'b00: begin // State A\n            next_state = 2'b01;\n            f = 1;\n            g = 0;\n        end\n        2'b01: begin // State B\n            if (x == 1 && (y != 1 || y === 2'b01)) begin\n                next_state = 2'b10;\n            end\n            else begin\n                next_state = 2'b01;\n            end\n            f = 0;\n        end\n        2'b10: begin // State C\n            if (y === 2'b01) begin\n                g = 1;\n            end\n            else if (y === 2'b00) begin\n                g = 0;\n            end\n            else begin\n                g = g;\n            end\n            next_state = 2'b10;\n        end\n        default: begin\n            next_state = 2'b00; // State A\n            f = 0;\n            g = 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "\nreg [7:0] q_ff [7:0]; // Array of 8 D flip-flops\n\nalways @(negedge clk) begin\n\tif (reset) begin\n\t\tfor (int i=0; i<8; i=i+1) begin\n\t\t\tq_ff[i] <= 8'h34;\n\t\tend\n\tend else begin\n\t\tfor (int i=0; i<8; i=i+1) begin\n\t\t\tq_ff[i] <= d[i];\n\t\tend\n\tend\nend\n\nassign q = q_ff;\n\nendmodule\n"}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "\n  wire xor_result;\n\n  assign xor_result = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7];\n  assign parity = xor_result;\n\nendmodule\n"}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        2'b00: begin\n            if (in == 1'b0) begin\n                next_state = 2'b00;\n                out = 1'b0;\n            end\n            else begin\n                next_state = 2'b01;\n                out = 1'b0;\n            end\n        end\n        \n        2'b01: begin\n            if (in == 1'b0) begin\n                next_state = 2'b10;\n                out = 1'b0;\n            end\n            else begin\n                next_state = 2'b01;\n                out = 1'b0;\n            end\n        end\n        \n        2'b10: begin\n            if (in == 1'b0) begin\n                next_state = 2'b00;\n                out = 1'b0;\n            end\n            else begin\n                next_state = 2'b11;\n                out = 1'b0;\n            end\n        end\n        \n        2'b11: begin\n            if (in == 1'b0) begin\n                next_state = 2'b10;\n                out = 1'b1;\n            end\n            else begin\n                next_state = 2'b01;\n                out = 1'b0;\n            end\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\nreg z;\n\nalways @ (x or y)\nbegin\n\tif (x & y)\n\t\tz <= 1;\n\telse\n\t\tz <= 0;\nend\n\nendmodule\n"}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= 3'b000; // State A\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\t3'b000: begin // State A\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b001; // State B\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b000; // State A\n\t\t\tend\n\t\tend\n\t\t3'b001: begin // State B\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010; // State C\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011; // State D\n\t\t\tend\n\t\tend\n\t\t3'b010: begin // State C\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b100; // State E\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011; // State D\n\t\t\tend\n\t\tend\n\t\t3'b011: begin // State D\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b101; // State F\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b000; // State A\n\t\t\tend\n\t\tend\n\t\t3'b100: begin // State E\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b100; // State E\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011; // State D\n\t\t\tend\n\t\tend\n\t\t3'b101: begin // State F\n\t\t\tif (w) begin\n\t\t\t\tnext_state = 3'b010; // State C\n\t\t\tend else begin\n\t\t\t\tnext_state = 3'b011; // State D\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign z = state[2];\n\nendmodule"}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk) begin\n    if (!resetn) begin\n        q <= 16'b0;\n    end else begin\n        if (byteena[0]) begin\n            q[7:0] <= d[7:0];\n        end\n        if (byteena[1]) begin\n            q[15:8] <= d[15:8];\n        end\n    end\nend\n\nendmodule"}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "always @(posedge clk) begin\n\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\tif (in[i] && !past_in[i])\n\t\t\tpedge[i] <= 1;\n\t\telse\n\t\t\tpedge[i] <= 0;\n\tend\n\tpast_in <= in;\nend\nendmodule"}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "always @(posedge clock) begin\n    if (a && !p) begin\n        p <= 1;\n    end else begin\n        p <= 0;\n    end\n    \n    if (p && !q) begin\n        q <= 1;\n    end else begin\n        q <= 0;\n    end\nend\n\nendmodule"}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        q[0] = q[1] ^ 0;\n        for (int i = 1; i < 511; i = i + 1) begin\n            q[i] = q[i-1] ^ q[i+1];\n        end\n        q[511] = q[510] ^ 0;\n    end\nend\nendmodule"}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "always @(*) begin\n\tif(A == B) begin\n\t\tz = 1;\n\tend\n\telse begin\n\t\tz = 0;\n\tend\nend\n\nendmodule"}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "// Define logic for \"out_both\"\nalways @(*) begin\n    out_both[0] = 0; // Assume in[0] has no left neighbor\n    for (int i = 1; i < 99; i = i + 1) begin\n        out_both[i] = (in[i] & in[i-1]);\n    end\nend\n\n// Define logic for \"out_any\"\nalways @(*) begin\n    out_any[99] = 0; // Assume in[99] has no right neighbor\n    for (int i = 1; i < 99; i = i + 1) begin\n        out_any[i] = (in[i] | in[i+1]);\n    end\nend\n\n// Define logic for \"out_different\"\nalways @(*) begin\n    for (int i = 0; i < 99; i = i + 1) begin\n        out_different[i] = (in[i] != in[(i + 1) % 100]);\n    end\nend\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "\n\talways @(posedge ena)\n\tbegin\n\t\tif (ena)\n\t\t\tq <= d;\n\tend\n"}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "\n  assign out = in[sel*4 +: 4];\n\nendmodule"}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "assign out = (sel == 0) ? a :\n              (sel == 1) ? b :\n              (sel == 2) ? c :\n              (sel == 3) ? d :\n              (sel == 4) ? e :\n              (sel == 5) ? f :\n              (sel == 6) ? g :\n              (sel == 7) ? h :\n              (sel == 8) ? i :\n              16'hFFFF; // Default case for sel=9 to 15\n\nendmodule"}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "// Perform bitwise OR operation\nassign out_or_bitwise = a | b;\n\n// Perform logical OR operation\nassign out_or_logical = a || b;\n\n// Generate inverse of input vectors\nassign out_not = ~{b, a};\n\nendmodule"}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        4'b0001: begin // State A\n            next_state = in ? 4'b0010 : 4'b0001;\n            out = 1'b0;\n        end\n        4'b0010: begin // State B\n            next_state = in ? 4'b0010 : 4'b0100;\n            out = 1'b0;\n        end\n        4'b0100: begin // State C\n            next_state = in ? 4'b0001 : 4'b1000;\n            out = 1'b0;\n        end\n        4'b1000: begin // State D\n            next_state = in ? 4'b0100 : 4'b0010;\n            out = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "always @(*) begin\n    min = a;\n    if (b < min) min = b;\n    if (c < min) min = c;\n    if (d < min) min = d;\nend\n\nendmodule"}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "and_gate and_gate_inst (\n\t.input_a(a),\n\t.input_b(b),\n\t.output(out_and)\n);\n\nor_gate or_gate_inst (\n\t.input_a(a),\n\t.input_b(b),\n\t.output(out_or)\n);\n\nxor_gate xor_gate_inst (\n\t.input_a(a),\n\t.input_b(b),\n\t.output(out_xor)\n);\n\nnand_gate nand_gate_inst (\n\t.input_a(a),\n\t.input_b(b),\n\t.output(out_nand)\n);\n\nnor_gate nor_gate_inst (\n\t.input_a(a),\n\t.input_b(b),\n\t.output(out_nor)\n);\n\nxnor_gate xnor_gate_inst (\n\t.input_a(a),\n\t.input_b(b),\n\t.output(out_xnor)\n);\n\nanotb_gate anotb_gate_inst (\n\t.input_a(a),\n\t.input_b(b),\n\t.output(out_anotb)\n);\n\nendmodule"}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "assign out = (a & b & ~c & d) | (a & ~b & ~c & d) | (~a & b & c & d) | (a & b & ~c & ~d); \n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 2'b00; // initial state A\n\tend \n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\tz = 0;\n\tcase (state)\n\t\t2'b00: begin // state A\n\t\t\tif (s == 1) begin\n\t\t\t\tnext_state = 2'b01; // move to state B\n\t\t\tend\n\t\tend\n\t\t2'b01: begin // state B\n\t\t\tif (w == 1) begin\n\t\t\t\tnext_state = 2'b10; // move to check state\n\t\t\tend\n\t\tend\n\t\t2'b10: begin // check state\n\t\t\tif (w == 1) begin\n\t\t\t\tnext_state = 2'b11; // set z to 1 state\n\t\t\tend\n\t\tend\n\t\t2'b11: begin // set z to 1 state\n\t\t\tz = 1;\n\t\t\tnext_state = 2'b01; // move back to state B\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "\n  assign out = {24{in[7]}, in};\n\nendmodule"}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "reg [3:0] d_ff;\n\nalways @(posedge clk or negedge resetn)\nbegin\n\tif (~resetn)\n\t\td_ff <= 4'b0;\n\telse\n\t\td_ff <= {d_ff[2:0], in};\nend\n\nassign out = d_ff[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @(*) begin\n    case(in)\n        4'b0000: pos = 2'b00;\n        4'b0001: pos = 2'b01;\n        4'b0010: pos = 2'b10;\n        4'b0011: pos = 2'b01;\n        4'b0100: pos = 2'b11;\n        4'b0101: pos = 2'b01;\n        4'b0110: pos = 2'b10;\n        4'b0111: pos = 2'b01;\n        4'b1000: pos = 2'b00;\n        4'b1001: pos = 2'b01;\n        4'b1010: pos = 2'b10;\n        4'b1011: pos = 2'b01;\n        4'b1100: pos = 2'b11;\n        4'b1101: pos = 2'b01;\n        4'b1110: pos = 2'b10;\n        4'b1111: pos = 2'b01;\n    endcase\nend\nendmodule"}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @ (posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= OFF;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\tcase(state)\n\t\tOFF: begin\n\t\t\tif(j) begin\n\t\t\t\tnext_state = ON;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend\n\t\tend\n\t\tON: begin\n\t\t\tif(k) begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = ON;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": "assign out = 1'b0;\n\nendmodule"}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "assign one = 1'b1;\n\nendmodule"}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "always @* begin\n    integer i;\n    for(i = 0; i < 100; i = i + 1) begin\n        out[i] = in[99 - i];\n    end\nend\n\nendmodule"}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "\nlogic ff_input, ff_output;\nlogic xor_input;\n\nassign xor_input = in ^ ff_output;\n\nalways @(posedge clk) begin\n    ff_input <= xor_input;\nend\n\nalways @* begin\n    out = ff_output;\nend\n\nendmodule\n"}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset)\nbegin\n    if (areset)\n        q <= 4'b0;\n    else if (load)\n        q <= data;\n    else if (ena)\n        q <= {q[3], q[2:0]};\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = !(x3 & x2) & (x1 | x2); \n\nendmodule"}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk or areset)\nbegin\n\tif (areset)\n\t\tq <= 8'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule"}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = &in;\n\tassign out_or = |in;\n\tassign out_xor = ^in;\nendmodule"}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "\n  assign sum = a ^ b;\n  assign cout = a & b;\nendmodule"}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "always @(*) begin\n\tif (cpu_overheated)\n\t\tshut_off_computer = 1;\n\telse\n\t\tshut_off_computer = 0;\nend\n\nalways @(*) begin\n\tif (!arrived)\n\t\tkeep_driving = ~gas_tank_empty;\n\telse\n\t\tkeep_driving = 0;\nend\n\nendmodule"}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00;\nparameter ON = 2'b01;\n\nalways @(posedge clk or posedge reset)\nbegin\n\tif (reset)\n\t\tstate <= OFF;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*)\nbegin\n\tcase(state)\n\t\tOFF:\n\t\tbegin\n\t\t\tif (j)\n\t\t\t\tnext_state = ON;\n\t\t\telse\n\t\t\t\tnext_state = OFF;\n\t\tend\n\t\tON:\n\t\tbegin\n\t\t\tif (k)\n\t\t\t\tnext_state = OFF;\n\t\t\telse\n\t\t\t\tnext_state = ON;\n\t\tend\n\t\tdefault: next_state = OFF;\n\tendcase\nend\n\nassign out = (state == ON) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "wire [29:0] input_concatenated;\nwire [31:0] output_combined;\n\nassign input_concatenated = {a, b, c, d, e, f};\nassign output_combined = {input_concatenated, 2'b11};\n\nassign w = output_combined[7:0];\nassign x = output_combined[15:8];\nassign y = output_combined[23:16];\nassign z = output_combined[31:24];\n\nendmodule"}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & ~b & ~c & d) | (~a & ~b & c & ~d) | (~a & b & ~c & d) | (a & b & c & d);\nendmodule\n"}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "and_gate and_gate_inst(\n\t.input_a(a),\n\t.input_b(b),\n\t.output_out(out)\n);\n\nendmodule"}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg state, next_state;\n\nparameter B = 1'b0;\nparameter A = 1'b1;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= B;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case (state)\n        B: begin\n            out = 1'b1;\n            if (in) begin\n                next_state = B;\n            end else begin\n                next_state = A;\n            end\n        end\n        A: begin\n            out = 1'b0;\n            if (in) begin\n                next_state = A;\n            end else begin\n                next_state = B;\n            end\n        end\n        default: begin\n            next_state = B;\n            out = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "\n  wire w1, w2, w3;\n  \n  // First stage: generate sum\n  xor (sum, a, b);\n  xor (sum, sum, cin);\n  \n  // Second stage: generate carry-out\n  and (w1, a, b);\n  and (w2, b, cin);\n  and (w3, a, cin);\n  \n  // Final carry-out\n  or (cout, w1, w2);\n  or (cout, cout, w3);\n  \nendmodule"}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\nwire xnor_out;\nxnor_gate xnor_gate_1 (\n\t.in1(in1),\n\t.in2(in2),\n\t.out(xnor_out)\n);\n\nxor_gate xor_gate_1 (\n\t.in1(xnor_out),\n\t.in2(in3),\n\t.out(out)\n);\nendmodule\n"}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "assign mux_in[0] = (c & d) | (c & ~d) | (~c & ~d);\nassign mux_in[1] = (c & ~d) | (~c & ~d) | (~c & d);\nassign mux_in[2] = (c & ~d) | (~c & d) | (~c & ~d);\nassign mux_in[3] = (c & d) | (c & ~d) | (~c & d);\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00, B = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= A;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case (state)\n        A: begin\n            z = 1'b0;\n            if (x) begin\n                next_state = B;\n            end else begin\n                next_state = A;\n            end\n        end\n        B: begin\n            z = 1'b1;\n            if (x) begin\n                next_state = B;\n            end else begin\n                next_state = B;\n            end\n        end\n        default: begin\n            next_state = A;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "\nreg q, state;\nalways @(posedge clk) begin\n    state <= a & ~b;\n    q <= state;\nend\n"}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "assign f = x[1]&x[3] | x[1]&x[2]&~x[4] | x[2]&x[3]&~x[4] | x[3]&~x[2]&x[4] | ~x[1]&~x[3]&~x[4]; \n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "reg [2:0] state, next_state;\n\nparameter IDLE = 3'b000;\nparameter BIT1 = 3'b001;\nparameter BIT2 = 3'b010;\nparameter BIT3 = 3'b011;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= IDLE;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @(*) begin\n    disc = 1'b0;\n    flag = 1'b0;\n    err = 1'b0;\n\n    case(state)\n        IDLE: begin\n            if (in == 1'b1) begin\n                next_state = BIT1;\n            end else begin\n                next_state = IDLE;\n            end\n        end\n        BIT1: begin\n            if (in == 1'b1) begin\n                next_state = BIT2;\n            end else begin\n                next_state = IDLE;\n            end\n        end\n        BIT2: begin\n            if (in == 1'b1) begin\n                next_state = BIT3;\n            end else begin\n                next_state = IDLE;\n            end\n        end\n        BIT3: begin\n            if (in == 1'b0) begin\n                next_state = IDLE;\n            end else if (in == 1'b1) begin\n                disc = 1'b1;\n                next_state = IDLE;\n            end else begin\n                next_state = IDLE;\n            end\n        end\n    endcase\n    if (state == BIT3 && in == 1'b0) begin\n        flag = 1'b1;\n    end\n    if (state == BIT3 && in == 1'b1) begin\n        err = 1'b1;\n    end\nend\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "always @(posedge clk) begin\n    if (reset) begin\n        // Reset the state machine to look for the start sequence (1101)\n        // Additional reset logic as needed\n    end else begin\n        // State machine logic\n        // Implement the timer functionality as described in the requirements\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        fr3 <= 1'b1;\n        fr2 <= 1'b1;\n        fr1 <= 1'b1;\n        dfr <= 1'b1;\n    end else begin\n        case(s)\n            3'b100: begin // Above s[3]\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b0;\n                dfr <= 1'b0;\n            end\n            3'b011: begin // Between s[3] and s[2]\n                fr3 <= 1'b1;\n                fr2 <= 1'b1;\n                fr1 <= 1'b0;\n                dfr <= 1'b0;\n            end\n            3'b010: begin // Between s[2] and s[1]\n                fr3 <= 1'b1;\n                fr2 <= 1'b0;\n                fr1 <= 1'b0;\n                dfr <= 1'b1;\n            end\n            3'b001: begin // Below s[1]\n                fr3 <= 1'b0;\n                fr2 <= 1'b0;\n                fr1 <= 1'b0;\n                dfr <= 1'b1;\n            end\n            default: begin\n                fr3 <= 1'b1;\n                fr2 <= 1'b1;\n                fr1 <= 1'b1;\n                dfr <= 1'b1;\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "\nreg [3:0] state, next_state;\n\nparameter IDLE = 4'b0000, START_BIT = 4'b0001, DATA = 4'b0010, STOP_BIT = 4'b0011;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (in == 1'b0)\n\t\t\t\tnext_state = START_BIT;\n\t\t\telse\n\t\t\t\tnext_state = IDLE;\n\t\tend\n\t\tSTART_BIT: begin\n\t\t\tnext_state = DATA;\n\t\tend\n\t\tDATA: begin\n\t\t\tnext_state = (next_state == 8) ? STOP_BIT : DATA + 1;\n\t\tend\n\t\tSTOP_BIT: begin\n\t\t\tif (in == 1'b1)\n\t\t\t\tnext_state = IDLE;\n\t\t\telse\n\t\t\t\tnext_state = STOP_BIT;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = IDLE;\n\t\tend\n\tendcase\nend\n\nassign done = (state == STOP_BIT);\n\nendmodule\n"}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "reg [3:0] state, next_state;\nreg [2:0] data_bit_count;\nreg [7:0] received_byte;\n\nparameter IDLE = 4'b0000, START_BIT = 4'b0001, DATA_BITS = 4'b0010, STOP_BIT = 4'b0011;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\t\tdata_bit_count <= 0;\n\t\treceived_byte <= 8'b0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tdata_bit_count <= data_bit_count + 1;\n\t\tif (next_state == IDLE) begin\n\t\t\tdata_bit_count <= 0;\n\t\t\treceived_byte <= 8'b0;\n\t\tend\n\tend\nend\n\nalways @(*) begin\n\tnext_state = state;\n\tdone = 0;\n\tout_byte = 8'b0;\n\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (in == 1) begin\n\t\t\t\tnext_state = START_BIT;\n\t\t\tend\n\t\tend\n\n\t\tSTART_BIT: begin\n\t\t\tif (in == 0) begin\n\t\t\t\tnext_state = DATA_BITS;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\n\t\tDATA_BITS: begin\n\t\t\tif (data_bit_count == 8) begin\n\t\t\t\tnext_state = STOP_BIT;\n\t\t\tend\n\t\tend\n\n\t\tSTOP_BIT: begin\n\t\t\tif (in == 1) begin\n\t\t\t\tdone = 1;\n\t\t\t\tout_byte = received_byte;\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\treceived_byte <= 8'b0;\n\tend\n\telse begin\n\t\tif (state == DATA_BITS) begin\n\t\t\treceived_byte <= {in, received_byte[7:1]};\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "reg [127:0] pht; // Pattern history table\nreg [6:0] ghr; // Global history register\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tghr <= 0;\n\t\tpht <= 2'b11;\n\tend else begin\n\t\tif (predict_valid) begin\n\t\t\tpredict_history <= ghr;\n\t\t\tpredict_taken <= (pht[(ghr ^ predict_pc) & 127] > 1) ? 1'b1 : 1'b0;\n\t\tend\n\n\t\tif (train_valid) begin\n\t\t\tif (train_mispredicted) begin\n\t\t\t\tghr <= train_history;\n\t\t\tend\n\t\t\tpht[(train_history ^ train_pc) & 127] <= (train_taken) ? \n\t\t\t\t((pht[(train_history ^ train_pc) & 127] == 2'b11) ? \n\t\t\t\t\t2'b11 : pht[(train_history ^ train_pc) & 127] + 2'b01) \n\t\t\t\t: ((pht[(train_history ^ train_pc) & 127] == 2'b00) ?\n\t\t\t\t\t2'b00 : pht[(train_history ^ train_pc) & 127] - 2'b01);\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [3:0] state, next_state;\n\nparameter WALK_LEFT = 4'b0001, WALK_RIGHT = 4'b0010, FALLING = 4'b0100, DIGGING = 4'b1000;\n\nalways @(posedge clk or posedge areset)\nbegin\n    if (areset)\n        state <= WALK_LEFT;\n    else\n        state <= next_state;\nend\n\nalways @*\nbegin\n    next_state = state;\n    walk_left = 0;\n    walk_right = 0;\n    aaah = 0;\n    digging = 0;\n\n    case (state)\n        WALK_LEFT:\n        begin\n            if (bump_right)\n                next_state = WALK_RIGHT;\n            else if (!ground)\n                next_state = FALLING;\n            else if (dig && ground)\n                next_state = DIGGING;\n            walk_left = 1;\n        end\n        \n        WALK_RIGHT:\n        begin\n            if (bump_left)\n                next_state = WALK_LEFT;\n            else if (!ground)\n                next_state = FALLING;\n            else if (dig && ground)\n                next_state = DIGGING;\n            walk_right = 1;\n        end\n        \n        FALLING:\n        begin\n            aaah = 1;\n            if (ground)\n            begin\n                if (state == WALK_LEFT)\n                    next_state = WALK_LEFT;\n                else if (state == WALK_RIGHT)\n                    next_state = WALK_RIGHT;\n                // Do not change state if falling for too long (will result in splatting)\n            end\n        end\n        \n        DIGGING:\n        begin\n            digging = 1;\n            if (!ground)\n                next_state = FALLING;\n            else if (dig && ground)\n                next_state = DIGGING;\n        end\n    endcase\n    \n    if (state != FALLING && !ground)\n    begin\n        // Check for splatter condition\n        if (state == WALK_LEFT || state == WALK_RIGHT)\n            next_state = FALLING;\n    end\nend\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [2:0] state;\nparameter IDLE = 3'b000;\nparameter DETECT_PATTERN = 3'b001;\nparameter SHIFT_IN = 3'b010;\nparameter WAIT_FOR_COUNTING = 3'b011;\nparameter WAIT_FOR_ACK = 3'b100;\n\nalways @ (posedge clk) begin\n    if (reset) begin\n        state <= IDLE;\n        shift_ena <= 0;\n        counting <= 0;\n        done <= 0;\n    end else begin\n        case (state)\n            IDLE: begin\n                if (data == 1 && $past(data) == 1 && $past($past(data)) == 0) begin\n                    state <= DETECT_PATTERN;\n                end\n            end\n            DETECT_PATTERN: begin\n                state <= SHIFT_IN;\n                shift_ena <= 1;\n            end\n            SHIFT_IN: begin\n                if (shift_ena == 4'b1111) begin\n                    state <= WAIT_FOR_COUNTING;\n                    shift_ena <= 0;\n                end\n            end\n            WAIT_FOR_COUNTING: begin\n                if (done_counting) begin\n                    state <= WAIT_FOR_ACK;\n                    counting <= 1;\n                end\n            end\n            WAIT_FOR_ACK: begin\n                if (ack) begin\n                    state <= IDLE;\n                    counting <= 0;\n                    done <= 1;\n                end\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        // Implement game rules\n        // Iterate through each cell\n        for (int i = 0; i < 16; i = i + 1) begin\n            for (int j = 0; j < 16; j = j + 1) begin\n                int count = 0;\n                // Check all 8 neighbors\n                count = count + q[i*16 + ((j+1) % 16)]; // Right\n                count = count + q[i*16 + ((j+15) % 16)]; // Left\n                count = count + q[((i+1) % 16)*16 + j]; // Down\n                count = count + q[((i+15) % 16)*16 + j]; // Up\n                count = count + q[((i+1) % 16)*16 + ((j+1) % 16)]; // Down-Right\n                count = count + q[((i+1) % 16)*16 + ((j+15) % 16)]; // Down-Left\n                count = count + q[((i+15) % 16)*16 + ((j+1) % 16)]; // Up-Right\n                count = count + q[((i+15) % 16)*16 + ((j+15) % 16)]; // Up-Left\n                \n                // Apply game rules\n                if (q[i*16 + j] == 1) begin\n                    if ((count == 2) || (count == 3)) begin\n                        q[i*16 + j] <= 1;\n                    end else begin\n                        q[i*16 + j] <= 0;\n                    end\n                end else begin\n                    if (count == 3) begin\n                        q[i*16 + j] <= 1;\n                    end else begin\n                        q[i*16 + j] <= 0;\n                    end\n                end\n            end\n        end\n    end\nend\nendmodule"}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [1:0] state;\nparameter WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01, FALLING = 2'b10, DIGGING = 2'b11;\n\nalways @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= WALK_LEFT;\n\telse\n\t\tbegin\n\t\t\tcase (state)\n\t\t\t\tWALK_LEFT: \n\t\t\t\t\tbegin\n\t\t\t\t\t\tif (bump_right && !bump_left)\n\t\t\t\t\t\t\tstate <= WALK_RIGHT;\n\t\t\t\t\t\telse if (dig && ground)\n\t\t\t\t\t\t\tstate <= DIGGING;\n\t\t\t\t\t\telse if (ground == 0)\n\t\t\t\t\t\t\tstate <= FALLING;\n\t\t\t\t\tend\n\t\t\t\tWALK_RIGHT:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif (bump_left && !bump_right)\n\t\t\t\t\t\t\tstate <= WALK_LEFT;\n\t\t\t\t\t\telse if (dig && ground)\n\t\t\t\t\t\t state <= DIGGING;\n\t\t\t\t\t\telse if (ground == 0)\n\t\t\t\t\t\t\tstate <= FALLING;\n\t\t\t\t\tend\n\t\t\t\tFALLING:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif (ground)\n\t\t\t\t\t\t state <= (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n\t\t\t\t\tend\n\t\t\t\tDIGGING:\n\t\t\t\t\tbegin\n\t\t\t\t\t\tif (ground == 0)\n\t\t\t\t\t\t\tstate <= FALLING;\n\t\t\t\t\tend\n\t\t\tendcase\n\t\tend\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\nassign aaah = (state == FALLING);\nassign digging = (state == DIGGING);\n\nendmodule"}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tpm <= 1'b0;\n\t\thh <= 8'b0001_0010;\n\t\tmm <= 8'b0000_0000;\n\t\tss <= 8'b0000_0000;\n\tend else if (ena) begin\n\t\tss <= ss + 1;\n\t\tif (ss == 8'b0110_0000) begin\n\t\t\tss <= 8'b0000_0000;\n\t\t\tmm <= mm + 1;\n\t\t\tif (mm == 8'b0101_1001) begin\n\t\t\t\tmm <= 8'b0000_0000;\n\t\t\t\thh <= hh + 1;\n\t\t\t\tif (hh == 8'b0001_0011) begin\n\t\t\t\t\tif (pm) begin\n\t\t\t\t\t\tpm <= 1'b0;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tpm <= 1'b1;\n\t\t\t\t\tend\n\t\t\t\t\thh <= 8'b0000_0001;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter WALK_LEFT = 2'b00;\nparameter WALK_RIGHT = 2'b01;\nparameter FALLING = 2'b10;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase(state)\n\t\tWALK_LEFT: begin\n\t\t\tif (bump_left && !bump_right)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if (!bump_left && !bump_right && ground == 0)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse\n\t\t\t\tnext_state = WALK_LEFT;\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\tif (!bump_left && bump_right)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if (!bump_left && !bump_right && ground == 0)\n\t\t\t\tnext_state = FALLING;\n\t\t\telse\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\tend\n\t\tFALLING: begin\n\t\t\tif (ground == 1)\n\t\t\t\tnext_state = (state == WALK_LEFT) ? WALK_LEFT : WALK_RIGHT;\n\t\t\telse\n\t\t\t\tnext_state = FALLING;\n\t\tend\n\t\tdefault: next_state = WALK_LEFT;\n\tendcase\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\nassign aaah = (state == FALLING);\n\nendmodule"}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "reg [15:0] q_next;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        q <= 0;\n    end else begin\n        q <= q_next;\n    end\nend\n\nalways @* begin\n    q_next = q + 1;\n    if (ena[1])\n        q_next[3:0] = q[3:0] + 1;\n    if (ena[2])\n        q_next[7:4] = q[7:4] + 1;\n    if (ena[3])\n        q_next[11:8] = q[11:8] + 1;\nend\n\nendmodule"}
{"task_id": "mux2to1v", "description": "Create a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out\n);\n", "completion": "assign out = (sel) ? b : a;\n\nendmodule"}
{"task_id": "m2014_q6b", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Assume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].", "prompt": "module top_module(\n\tinput [3:1] y,\n\tinput w,\n\toutput reg Y2);\n", "completion": "always @(*) begin\n    case(y)\n        3'b000: Y2 = (w) ? 0 : 0;\n        3'b001: Y2 = (w) ? 1 : 0;\n        3'b010: Y2 = (w) ? 1 : 0;\n        3'b011: Y2 = (w) ? 1 : 0;\n        3'b100: Y2 = (w) ? 1 : 0;\n        3'b101: Y2 = (w) ? 1 : 0;\n        default: Y2 = 0;\n    endcase\nend\nendmodule"}
{"task_id": "ringer", "description": "Suppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.", "prompt": "module top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor\n);\n", "completion": "assign ringer = (~vibrate_mode) & ring;\nassign motor = vibrate_mode & ring;\n\nendmodule"}
{"task_id": "alwaysblock1", "description": "Build an AND gate using both an assign statement and a combinational always block. ", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock\n);\n", "completion": "assign out_assign = a & b;\n\nalways @(*)\nbegin\n\tout_alwaysblock = a & b;\nend\n\nendmodule"}
{"task_id": "zero", "description": "Build a circuit that always outputs a LOW.", "prompt": "module top_module(\n\toutput zero);\n", "completion": ""}
{"task_id": "circuit7", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               x               x               \n// 5ns             1               0               x               \n// 10ns            0               0               x               \n// 15ns            1               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               1               \n// 30ns            0               0               1               \n// 35ns            1               1               1               \n// 40ns            0               1               1               \n// 45ns            1               1               0               \n// 50ns            0               1               0               \n// 55ns            1               1               0               \n// 60ns            0               1               0               \n// 65ns            1               1               0               \n// 70ns            0               1               0               \n// 75ns            1               1               0               \n// 80ns            0               1               0               \n// 85ns            1               1               0               \n// 90ns            0               1               0         ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 0)\n        q <= 1'b1;\n    else\n        q <= 1'b0;\nend\nendmodule"}
{"task_id": "ece241_2014_q5a", "description": "You are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [2:0] state;\nreg [3:0] reg_x;\nreg [3:0] reg_z;\n\nalways @(posedge clk or negedge areset)\nbegin\n\tif (!areset) begin\n\t\tstate <= 3'b000;\n\t\treg_x <= 4'b0000;\n\t\treg_z <= 4'b0000;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\t3'b000: begin\n\t\t\t\treg_x <= {reg_x[2:0], x}; // Shift input x into reg_x\n\t\t\t\tstate <= 3'b001;\n\t\t\tend\n\t\t\t\n\t\t\t3'b001: begin\n\t\t\t\treg_z <= ~reg_x + 4'b0001; // Compute 2's complement of reg_x\n\t\t\t\tstate <= 3'b010;\n\t\t\tend\n\n\t\t\t3'b010: begin\n\t\t\t\tz <= reg_z[0]; // Output the LSB of reg_z\n\t\t\t\tstate <= 3'b011;\n\t\t\tend\n\n\t\t\t3'b011: begin\n\t\t\t\treg_z <= {reg_z[2:0], z}; // Shift output z back into reg_z\n\t\t\t\tstate <= 3'b000;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule"}
{"task_id": "fsm3", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\nreg out_reg;\n\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @ (posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= A;\n\t\tout_reg <= 1'b0;\n\tend else begin\n\t\tstate <= next_state;\n\t\tout_reg <= (state == D) ? 1'b1 : 1'b0;\n\tend\nend\n\nalways @ (*) begin\n\tcase (state)\n\t\tA: begin\n\t\t\tnext_state = (in) ? B : A;\n\t\tend\n\t\tB: begin\n\t\t\tnext_state = (in) ? B : C;\n\t\tend\n\t\tC: begin\n\t\t\tnext_state = (in) ? D : A;\n\t\tend\n\t\tD: begin\n\t\t\tnext_state = (in) ? B : C;\n\t\tend\n\tendcase\nend\n\nassign out = out_reg;\n\nendmodule"}
{"task_id": "vector2", "description": "Build a circuit that reverses the byte order of a 32-bit vector.", "prompt": "module top_module (\n\tinput [31:0] in,\n\toutput [31:0] out\n);\n", "completion": ""}
{"task_id": "m2014_q4c", "description": "Implement a simple D flip flop with active high synchronous reset (reset output to 0).", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput logic q\n);\n", "completion": "always @(posedge clk) begin\n\tif (r) begin\n\t\tq <= 0;\n\tend else begin\n\t\tq <= d;\n\tend\nend\n\nendmodule"}
{"task_id": "mt2015_q4a", "description": "Implement the boolean function z = (x^y) & x.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "assign z = (x ^ y) & x;\n\nendmodule"}
{"task_id": "shift18", "description": "Build a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n", "completion": "reg [63:0] shifter;\n\nalways @(posedge clk) begin\n    if (load) begin\n        shifter <= data;\n    end else begin\n        case(amount)\n            2'b00: shifter <= {shifter[62:0], shifter[63]}; // shift left by 1 bit\n            2'b01: shifter <= {shifter[55:0], shifter[63:56]}; // shift left by 8 bits\n            2'b10: shifter <= {shifter[0], shifter[63:1]}; // shift right by 1 bit\n            2'b11: shifter <= {shifter[7:0], shifter[63:8]}; // shift right by 8 bits\n            default: shifter <= shifter;\n        endcase\n    end\nend\n\nassign q = shifter;\n\nendmodule"}
{"task_id": "ece241_2013_q8", "description": "Implement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.", "prompt": "module top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z\n);\n", "completion": "    reg [1:0] state, next_state;\n    \n    always @(posedge clk or negedge aresetn) begin\n        if (~aresetn) begin\n            state <= 2'b00;\n        end else begin\n            state <= next_state;\n        end\n    end\n    \n    always @(*) begin\n        case (state)\n            2'b00: begin\n                if (x) begin\n                    next_state = 2'b01;\n                    z = 0;\n                end else begin\n                    next_state = 2'b00;\n                    z = 0;\n                end\n            end\n            2'b01: begin\n                if (x) begin\n                    next_state = 2'b10;\n                    z = 0;\n                end else begin\n                    next_state = 2'b00;\n                    z = 0;\n                end\n            end\n            2'b10: begin\n                if (x) begin\n                    next_state = 2'b01;\n                    z = 1;\n                end else begin\n                    next_state = 2'b00;\n                    z = 0;\n                end\n            end\n        endcase\n    end\n    \nendmodule"}
{"task_id": "m2014_q6", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Implement this state machine in Verilog.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset)\n\t\tstate <= 3'b000; // initial state A\n\t\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t3'b000: begin // State A\n\t\t\tif (w)\n\t\t\t\tnext_state = 3'b000;\n\t\t\telse\n\t\t\t\tnext_state = 3'b001;\n\t\tend\n\t\t\n\t\t3'b001: begin // State B\n\t\t\tif (w)\n\t\t\t\tnext_state = 3'b010;\n\t\t\telse\n\t\t\t\tnext_state = 3'b011;\n\t\tend\n\t\t\n\t\t3'b010: begin // State C\n\t\t\tif (w)\n\t\t\t\tnext_state = 3'b100;\n\t\t\telse\n\t\t\t\tnext_state = 3'b011;\n\t\tend\n\t\t\n\t\t3'b011: begin // State D\n\t\t\tif (w)\n\t\t\t\tnext_state = 3'b110;\n\t\t\telse\n\t\t\t\tnext_state = 3'b001;\n\t\tend\n\t\t\n\t\t3'b100: begin // State E\n\t\t\tif (w)\n\t\t\t\tnext_state = 3'b100;\n\t\t\telse\n\t\t\t\tnext_state = 3'b001;\n\t\tend\n\t\t\n\t\t3'b101: begin // State F\n\t\t\tif (w)\n\t\t\t\tnext_state = 3'b010;\n\t\t\telse\n\t\t\t\tnext_state = 3'b001;\n\t\tend\n\t\t\n\t\tdefault: next_state = 3'b000; // Default state A\n\tendcase\nend\n\nassign z = (state == 3'b101); // Output z when in state F\n\nendmodule"}
{"task_id": "fsm_ps2data", "description": "We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\n// time            clk             reset           in[7:0]         done            out_bytes       \n// 0ns             0               1                0              x                    x          \n// 5ns             1               1                0              0                    x          \n// 10ns            0               1                0              0                    x          \n// 15ns            1               0               2c              0                    x          \n// 20ns            0               0               2c              0                    x          \n// 25ns            1               0               81              0                    x          \n// 30ns            0               0               81              0                    x          \n// 35ns            1               0                9              0                    x          \n// 40ns            0               0                9              0                    x          \n// 45ns            1               0               6b              1               2c8109          \n// 50ns            0               0               6b              1               2c8109          \n// 55ns            1               0                d              0                    x          \n// 60ns            0               0                d              0                    x          \n// 65ns            1               0               8d              0                    x          \n// 70ns            0               0               8d              0                    x          \n// 75ns            1               0               6d              1               6b0d8d          \n// 80ns            0               0               6d              1               6b0d8d          \n// 85ns            1               0               12              0                    x          \n// 90ns            0               0               12              0                    x          \n// 95ns            1               0                1              0                    x          \n// 100ns           0               0                1              0                    x          \n// 105ns           1               0                d              1               6d1201          \n// 110ns           0               0                d              1               6d1201          \n// 115ns           1               0               76              0                    x          \n// 120ns           0               0               76              0                    x          \n// 125ns           1               0               3d              0                    x          \n// 130ns           0               0               3d              0                    x          \n// 135ns           1               0               ed              1                d763d          \n// 140ns           0               0               ed              1                d763d          \n// 145ns           1               0               8c              0                    x          \n// 150ns           0               0               8c              0                    x          \n// 155ns           1               0               f9              0                    x          \n// 160ns           0               0               f9              0                    x          \n// 165ns           1               0               ce              1               ed8cf9          \n// 170ns           0               0               ce              1               ed8cf9          \n// 175ns           1               0               c5              0                    x          \n// 180ns           0               0               c5              0                    x          \n// 185ns           1               0               aa              0                    x          \n// 190ns           0               0               aa              0                    x          ", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput [23:0] out_bytes,\n\toutput done\n);\n", "completion": "reg [7:0] buffer [2:0];\nreg [2:0] state;\nreg [23:0] out_bytes_reg;\nreg done_reg;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= 0;\n\t\tout_bytes_reg <= 24'b0;\n\t\tdone_reg <= 0;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\t0: begin // Waiting for first byte of a message\n\t\t\t\tif (in[3] == 1) begin\n\t\t\t\t\tbuffer[0] <= in;\n\t\t\t\t\tstate <= 1;\n\t\t\t\tend\n\t\t\tend\n\t\t\t1: begin // Waiting for second byte of a message\n\t\t\t\tbuffer[1] <= in;\n\t\t\t\tstate <= 2;\n\t\t\tend\n\t\t\t2: begin // Waiting for third byte of a message\n\t\t\t\tbuffer[2] <= in;\n\t\t\t\tout_bytes_reg[23:16] <= buffer[0];\n\t\t\t\tout_bytes_reg[15:8] <= buffer[1];\n\t\t\t\tout_bytes_reg[7:0] <= buffer[2];\n\t\t\t\tdone_reg <= 1;\n\t\t\t\tstate <= 0;\n\t\t\tend\n\t\t\tdefault: state <= 0;\n\t\tendcase\n\tend\nend\n\nassign out_bytes = done_reg ? out_bytes_reg : 24'b0;\nassign done = done_reg;\n\nendmodule"}
{"task_id": "2012_q2b", "description": "\n// Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Assume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F)\n\n// Write a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n", "prompt": "module top_module (\n\tinput [5:0] y,\n\tinput w,\n\toutput Y1,\n\toutput Y3\n);\n", "completion": "assign Y1 = y[2] | y[4] | (y[0] & w);\nassign Y3 = y[1] & (y[3] | y[5] & w);\n\nendmodule"}
{"task_id": "vector0", "description": "Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.", "prompt": "module top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0\n);\n", "completion": "assign {o2, o1, o0} = vec;\nassign outv = vec;\n\nendmodule"}
{"task_id": "kmap4", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 0 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 1 | 0 |\n//  11 | 0 | 1 | 0 | 1 |\n//  10 | 1 | 0 | 1 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @* begin\n\tif (c & d & ~a & b) begin\n\t\tout <= 1;\n\tend else if (~c & d & a & b) begin\n\t\tout <= 1;\n\tend else if (~c & ~d & ~a & b) begin\n\t\tout <= 0;\n\tend else if (c & ~d & a & b) begin\n\t\tout <= 0;\n\tend else begin\n\t\tout <= 0;\n\tend\nend\n\nendmodule"}
{"task_id": "vector1", "description": "Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.", "prompt": "module top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo\n);\n", "completion": "assign out_hi = in[15:8];\nassign out_lo = in[7:0];\n\nendmodule"}
{"task_id": "norgate", "description": "Create a module that implements a NOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "\n\tassign out = ~(a | b);\n\nendmodule"}
{"task_id": "alwaysblock2", "description": "Build an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.", "prompt": "module top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff\n);\n", "completion": "assign out_assign = a ^ b;\n\nalways @*\nbegin\n    out_always_comb = a ^ b;\nend\n\nalways @(posedge clk)\nbegin\n    out_always_ff <= a ^ b;\nend\n\nendmodule"}
{"task_id": "m2014_q6c", "description": "Consider the state machine shown below:\n\n// A (0) --0--> B\n// A (0) --1--> A\n// B (0) --0--> C\n// B (0) --1--> D\n// C (0) --0--> E\n// C (0) --1--> D\n// D (0) --0--> F\n// D (0) --1--> A\n// E (1) --0--> E\n// E (1) --1--> D\n// F (1) --0--> C\n// F (1) --1--> D\n\n// Resets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\n// Write Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding. ", "prompt": "module top_module (\n\tinput [6:1] y,\n\tinput w,\n\toutput Y2,\n\toutput Y4\n);\n", "completion": "always @(*) begin\n    Y2 = (y[1] & ~y[3] & ~y[4] & ~y[5] & ~y[6] & w) | (y[0] & y[3] & ~y[4] & ~y[5] & ~y[6] & ~w);\n    Y4 = (y[1] & ~y[2] & ~y[3] & y[4] & ~y[5] & ~y[6] & ~w) | (y[0] & ~y[4] & y[5] & ~y[6] & w);\nend\n\nendmodule"}
{"task_id": "mux256to1", "description": "Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.", "prompt": "module top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out\n);\n", "completion": "\n  assign out = in[sel];\nendmodule"}
{"task_id": "2014_q4a", "description": "Consider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.", "prompt": "module top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q\n);\n", "completion": "always @ (posedge clk) begin\n\tif (E) begin\n\t\tif (L) begin\n\t\t\tQ <= R;\n\t\tend else begin\n\t\t\tQ <= w;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "ece241_2014_q4", "description": "Given the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\toutput z\n);\n", "completion": "\nreg [2:0] flip_flop_out;\nwire xor_in, and_in, or_in;\n\nassign xor_in = x ^ flip_flop_out[0];\nassign and_in = x & ~flip_flop_out[1];\nassign or_in = x | ~flip_flop_out[2];\n\nalways @(posedge clk) begin\n    flip_flop_out <= {xor_in, and_in, or_in};\nend\n\nassign z = ~(flip_flop_out[0] ^ flip_flop_out[1] ^ flip_flop_out[2]);\n\nendmodule\n"}
{"task_id": "circuit4", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               1               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               1               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               0               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (a & !b & !c & d) | (!a & b & c & !d);\nendmodule\n"}
{"task_id": "rule110", "description": "Rule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 1\n// 1 | 0 | 0 | 0\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 1\n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0 \n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        q[0] = (q[1] & q[0] & ~q[2]) | (q[1] & ~q[0] & q[2]) | (~q[1] & q[0] & q[2]) | (~q[1] & ~q[0] & ~q[2]);\n        for (int i = 1; i < 511; i = i + 1) begin\n            q[i] = (q[i+1] & q[i] & ~q[i+2]) | (q[i+1] & ~q[i] & q[i+2]) | (~q[i+1] & q[i] & q[i+2]) | (~q[i+1] & ~q[i] & ~q[i+2]);\n        end\n        q[511] = (q[510] & q[511] & ~1'b0) | (q[510] & ~q[511] & 1'b0) | (~q[510] & q[511] & 1'b0) | (~q[510] & ~q[511] & ~1'b0);\n    end\nend\n\nendmodule"}
{"task_id": "fsm3s", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= A;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    case(state)\n        A: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = A;\n            out = 1'b0;\n        end\n        B: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = C;\n            out = 1'b0;\n        end\n        C: begin\n            if (in)\n                next_state = D;\n            else\n                next_state = A;\n            out = 1'b0;\n        end\n        D: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = C;\n            out = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "circuit5", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               e               q               \n// 0ns             x               x               x               x               x               x               \n// 5ns             x               x               x               x               x               x               \n// 10ns            x               x               x               x               x               x               \n// 15ns            a               b               0               d               e               b               \n// 20ns            a               b               1               d               e               e               \n// 25ns            a               b               2               d               e               a               \n// 30ns            a               b               3               d               e               d               \n// 35ns            a               b               4               d               e               f               \n// 40ns            a               b               5               d               e               f               \n// 45ns            a               b               6               d               e               f               \n// 50ns            a               b               7               d               e               f               \n// 55ns            a               b               8               d               e               f               \n// 60ns            a               b               9               d               e               f               \n// 65ns            a               b               a               d               e               f               \n// 70ns            a               b               b               d               e               f               \n// 75ns            a               b               c               d               e               f               \n// 80ns            a               b               d               d               e               f               \n// 85ns            a               b               e               d               e               f               \n// 90ns            a               b               f               d               e               f               ", "prompt": "module top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q\n);\n", "completion": "always @* begin\n    case({a, b, c, d, e})\n        5'b00000: q <= 4'b1011;\n        5'b00001: q <= 4'b1110;\n        5'b00010: q <= 4'b1010;\n        5'b00011: q <= 4'b1101;\n        5'b00100: q <= 4'b1111;\n        default: q <= 4'b1111;\n    endcase\nend\n\nendmodule"}
{"task_id": "bugs_mux2", "description": "Find the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule", "prompt": "module top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n", "completion": "assign out = (~sel & a) | (sel & b);\nendmodule"}
{"task_id": "mt2015_muxdff", "description": "Consider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n", "prompt": "module top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n", "completion": "reg [2:0] q1, q2, q3;\n\nfull_module full1 (.r(r_in), .L(L), .clk(clk), .q(q1));\nfull_module full2 (.r(q1), .L(L), .clk(clk), .q(q2));\nfull_module full3 (.r(q2), .L(L), .clk(clk), .q(q3));\n\nassign Q = q3;\n\nendmodule"}
{"task_id": "edgecapture", "description": "For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n", "completion": "always @(posedge clk) begin\n\tif (reset == 1'b1) begin\n\t\tout <= 32'b0;\n\tend else begin\n\t\tfor (int i = 0; i < 32; i = i + 1) begin\n\t\t\tif (in[i] && !in[i]) begin\n\t\t\t\tout[i] <= 1'b1;\n\t\t\tend\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "dff8", "description": "Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n    q <= d;\nend\n\nendmodule"}
{"task_id": "ece241_2014_q1c", "description": "Assume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow\n);\n", "completion": "reg [8:0] temp; \n\nalways @* begin\n    temp = a + b;\n    if ((a[7] & b[7] & ~temp[7]) | (~a[7] & ~b[7] & temp[7]))\n        overflow = 1;\n    else\n        overflow = 0;\nend\n\nassign s = temp[7:0];\n\nendmodule"}
{"task_id": "review2015_fsmonehot", "description": "Given the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\n// S () --d=0--> S\n// S () --d=1--> S1\n// S1 () --d=0--> S\n// S1 () --d=1--> S11\n// S11 () --d=0--> S110\n// S11 () --d=1--> S11\n// S110 () --d=0--> S\n// S110 () --d=1--> B0\n// B0 (shift_ena=1) -- (always go to next cycle) --> B1\n// B1 (shift_ena=1) -- (always go to next cycle) --> B2\n// B2 (shift_ena=1) -- (always go to next cycle) --> B3\n// B3 (shift_ena=1) -- (always go to next cycle) --> Count\n// Count (counting=1) --!(done_counting)--> Count\n// Count (counting=1) --(done_counting)--> Wait\n// Wait (done=1) --ack=0--> Wait\n// Wait (done=1) --ack=1--> S\n\n// At reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\n// Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\n// Write code that generates the following equations:\n\n// - B3_next -- next-state logic for state B3\n// - S_next\n// - S1_next\n// - Count_next\n// - Wait_next\n// - done -- output logic\n// - counting\n// - shift_ena\n", "prompt": "module top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output B3_next,\n    output S_next,\n    output S1_next,\n    output Count_next,\n    output Wait_next,\n    output done,\n    output counting,\n    output shift_ena\n );\n", "completion": "assign B3_next = (state == 10'b0000001000) ? 1'b1 : 1'b0;\nassign S_next = (state == 10'b0000000001) ? 1'b1 : 1'b0;\nassign S1_next = (state == 10'b0000000010) ? 1'b1 : 1'b0;\nassign Count_next = (state == 10'b1000000000) ? 1'b1 : 1'b0;\nassign Wait_next = ((state == 10'b0100000000) && (done == 1'b1)) ? 1'b1 : 1'b0;\n\nassign done = state == 10'b0100000000 ? 1 : 0;\nassign counting = state == 10'b1000000000 ? 1 : 0;\nassign shift_ena = (state >= 10'b0010000000) && (state <= 10'b0000000111) ? 1 : 0;\n\nendmodule"}
{"task_id": "counter_2bc", "description": "Build a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.", "prompt": "module top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output logic [1:0] state\n);\n", "completion": "logic [1:0] counter;\n\nalways_ff @(posedge clk or posedge areset) begin\n    if (areset) begin\n        counter <= 2'b01;\n    end else begin\n        if (train_valid) begin\n            if (train_taken && (counter < 2'b11)) begin\n                counter <= counter + 2'b01;\n            end else if (!train_taken && (counter > 2'b00)) begin\n                counter <= counter - 2'b01;\n            end\n        end\n    end\nend\n\nassign state = counter;\n\nendmodule"}
{"task_id": "always_casez", "description": "Build a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos\n);\n", "completion": "always @(*) begin\n    case(in)\n        8'b00000001: pos = 3'd0;\n        8'b00000010: pos = 3'd1;\n        8'b00000100: pos = 3'd2;\n        8'b00001000: pos = 3'd3;\n        8'b00010000: pos = 3'd4;\n        8'b00100000: pos = 3'd5;\n        8'b01000000: pos = 3'd6;\n        8'b10000000: pos = 3'd7;\n        default: pos = 3'd0;\n    endcase\nend\n\nendmodule"}
{"task_id": "always_nolatches", "description": "Suppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n", "prompt": "module top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up\n);\n", "completion": "always @(*) begin\n    case(scancode)\n        16'he06b: begin\n            left = 1;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n        16'he072: begin\n            left = 0;\n            down = 1;\n            right = 0;\n            up = 0;\n        end\n        16'he074: begin\n            left = 0;\n            down = 0;\n            right = 1;\n            up = 0;\n        end\n        16'he075: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 1;\n        end\n        default: begin\n            left = 0;\n            down = 0;\n            right = 0;\n            up = 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4j", "description": "Implement a 4-bit adder with full adders. The output sum should include the overflow bit.", "prompt": "module top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum\n);\n", "completion": "wire [3:0] carry;\nwire cout;\n\nfull_adder fa0(.a(x[0]), .b(y[0]), .cin(1'b0), .sum(sum[0]), .cout(carry[0]));\nfull_adder fa1(.a(x[1]), .b(y[1]), .cin(carry[0]), .sum(sum[1]), .cout(carry[1]));\nfull_adder fa2(.a(x[2]), .b(y[2]), .cin(carry[1]), .sum(sum[2]), .cout(carry[2]));\nfull_adder fa3(.a(x[3]), .b(y[3]), .cin(carry[2]), .sum(sum[3]), .cout(cout));\n\nassign sum[4] = cout;\n\nendmodule"}
{"task_id": "history_shift", "description": "Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n", "prompt": "module top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output logic [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history\n);\n", "completion": "\nlogic [31:0] history_reg;\n\nalways_ff @(posedge clk or posedge areset) begin\n    if (areset) begin\n        history_reg <= 32'b0;\n    end else if (train_mispredicted) begin\n        history_reg <= {train_history, train_taken};\n    end else if (predict_valid) begin\n        history_reg <= {history_reg[30:0], predict_taken};\n    end\nend\n\nassign predict_history = history_reg;\n\nendmodule\n"}
{"task_id": "wire_decl", "description": "Implement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n", "completion": "wire int1, int2;\n\nand gate1 (int1, a, b);\nand gate2 (int2, c, d);\nor gate3 (out, int1, int2);\nnot inv1 (out_n, out);\n\nendmodule"}
{"task_id": "dff", "description": "Create a single D flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk)\nbegin\n    q <= d;\nend\nendmodule"}
{"task_id": "ece241_2013_q12", "description": "In this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. ", "prompt": "module top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z\n);\n", "completion": "reg [7:0] Q;\n\nalways @(posedge clk) begin\n    if (enable) begin\n        Q <= {Q[6:0], S};\n    end\nend\n\nalways @* begin\n    case ({A, B, C})\n        3'b000: Z = Q[0];\n        3'b001: Z = Q[1];\n        3'b010: Z = Q[2];\n        3'b011: Z = Q[3];\n        3'b100: Z = Q[4];\n        3'b101: Z = Q[5];\n        3'b110: Z = Q[6];\n        3'b111: Z = Q[7];\n        default: Z = 1'b0;\n    endcase\nend\n\nendmodule"}
{"task_id": "thermostat", "description": "A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.", "prompt": "module top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan\n);\n", "completion": "reg heater, aircon, fan;\n\nalways @(*) begin\n    if (mode && too_cold) begin\n        heater = 1;\n        aircon = 0;\n        fan = 1;\n    end else if (!mode && too_hot) begin\n        heater = 0;\n        aircon = 1;\n        fan = 1;\n    end else if (fan_on) begin\n        heater = 0;\n        aircon = 0;\n        fan = 1;\n    end else begin\n        heater = 0;\n        aircon = 0;\n        fan = 0;\n    end\nend\n\nendmodule"}
{"task_id": "ece241_2013_q2", "description": "A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos\n);\n", "completion": "\nassign out_sop = (~a & ~b & c & d) | (~a & b & ~c & ~d) | (a & ~b & ~c & ~d);\n\nassign out_pos = (a + b + ~c + ~d) * (a + ~b + c + ~d) * (~a + b + c + ~d);\nendmodule\n"}
{"task_id": "lfsr32", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n", "completion": "\nreg [31:0] state_reg;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state_reg <= 32'h1;\n    end\n    else begin\n        state_reg <= {state_reg[30] ^ state_reg[20] ^ state_reg[0] ^ state_reg[31], state_reg[31:1]};\n    end\nend\n\nassign q = state_reg;\n\nendmodule\n"}
{"task_id": "circuit3", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               0               \n// 5ns             0               0               0               0               0               \n// 10ns            0               0               0               0               0               \n// 15ns            0               0               0               0               0               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               0               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               1               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               1               \n// 75ns            1               1               0               0               0               \n// 80ns            1               1               0               1               1               \n// 85ns            1               1               1               0               1               \n// 90ns            1               1               1               1               1               ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\n    // A 4-input AND gate\n\tassign q = a & b & c & d;\nendmodule\n"}
{"task_id": "7420", "description": "The 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "nand gate1 (nand1_out, p1a, p1b, p1c, p1d);\nnand gate2 (nand2_out, p2a, p2b, p2c, p2d);\n\nassign p1y = nand1_out;\nassign p2y = nand2_out;\n\nendmodule"}
{"task_id": "popcount255", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.", "prompt": "module top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out\n);\n", "completion": "assign out = $countones(in);\n\nendmodule"}
{"task_id": "gatesv", "description": "You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different\n);\n", "completion": "assign out_both[0] = (in[0] & in[3]);\nassign out_both[1] = (in[1] & in[0]);\nassign out_both[2] = (in[2] & in[1]);\nassign out_any[1] = (in[1] | in[0]);\nassign out_any[2] = (in[2] | in[1]);\nassign out_any[3] = (in[3] | in[2]);\nassign out_different[0] = (in[0] ^ in[3]);\nassign out_different[1] = (in[1] ^ in[0]);\nassign out_different[2] = (in[2] ^ in[1]);\nassign out_different[3] = (in[3] ^ in[0]);\nendmodule"}
{"task_id": "circuit6", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a                  q            \n// 0ns             x                  x            \n// 5ns             x                  x            \n// 10ns            x                  x            \n// 15ns            0               1232            \n// 20ns            1               aee0            \n// 25ns            2               27d4            \n// 30ns            3               5a0e            \n// 35ns            4               2066            \n// 40ns            5               64ce            \n// 45ns            6               c526            \n// 50ns            7               2f19            \n// 55ns            0               1232            \n// 60ns            1               aee0            \n// 65ns            2               27d4            \n// 70ns            4               2066            \n// 75ns            1               aee0            \n// 80ns            1               aee0            \n// 85ns            3               5a0e            \n// 90ns            5               64ce            ", "prompt": "module top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q\n);\n", "completion": "always @* begin\n    case (a)\n        3'b000: q = 16'd1232;\n        3'b001: q = 16'haee0;\n        3'b010: q = 16'h27d4;\n        3'b011: q = 16'h5a0e;\n        3'b100: q = 16'h2066;\n        3'b101: q = 16'h64ce;\n        3'b110: q = 16'hc526;\n        3'b111: q = 16'h2f19;\n    endcase\nend\n\nendmodule"}
{"task_id": "countslow", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. ", "prompt": "module top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\n\treg [3:0] counter;\n\n\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tcounter <= 4'b0;\n\t\tend else begin\n\t\t\tif (slowena) begin\n\t\t\t\tif (counter == 4'b1001) begin\n\t\t\t\t\tcounter <= 4'b0;\n\t\t\t\tend else begin\n\t\t\t\t\tcounter <= counter + 4'b1;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\tassign q = counter;\n\nendmodule"}
{"task_id": "m2014_q4f", "description": "Implement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "te_inst (\n\t.in1(in1),\n\t.in2(~in2),\n\t.out(out)\n);\nendmodule\n"}
{"task_id": "m2014_q4h", "description": "The module assigns the output port to the same value as the input port combinationally.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\n\nendmodule"}
{"task_id": "fsm1", "description": "Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= B;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @(*) begin\n    case(state)\n        A: begin\n            if (in)\n                next_state = A;\n            else\n                next_state = B;\n        end\n        B: begin\n            if (in)\n                next_state = B;\n            else\n                next_state = A;\n        end\n    endcase\nend\n\nassign out = (state == A) ? 1'b0 : 1'b1;\n\nendmodule"}
{"task_id": "dualedge", "description": "A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.", "prompt": "module top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n", "completion": "always @(posedge clk) begin\n\tif (d && !q) begin\n\t\tq <= 1'b1;\n\tend\nend\n\nalways @(negedge clk) begin\n\tif (!d && q) begin\n\t\tq <= 1'b0;\n\tend\nend\n\nendmodule"}
{"task_id": "xnorgate", "description": "Create a module that implements an XNOR gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": " out = ~(a ^ b);\nendmodule\n"}
{"task_id": "mt2015_q4", "description": "Module A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               \n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "\n\n\tassign z = (x ^ y) & x;\n\nendmodule\n\nmodule B(\n\tinput x,\n\tinput y,\n\toutput z\n);\n\n\treg z;\n\n\talways @(*)\n\tbegin\n\t\tcase({x, y})\n\t\t\t2'b00: z = 1;\n\t\t\t2'b01: z = 0;\n\t\t\t2'b10: z = 0;\n\t\t\t2'b11: z = 1;\n\t\tendcase\n\tend\n\nendmodule\n\nmodule top_module(\n\tinput x,\n\tinput y,\n\toutput z\n);\n\n\twire z1, z2, z3;\n\n\tA a1(.x(x), .y(y), .z(z1));\n\tB b1(.x(x), .y(y), .z(z2));\n\tB b2(.x(x), .y(y), .z(z3));\n\tA a2(.x(x), .y(y), .z(z));\n\n\tassign z = z1 | z2;\n\tassign z = z ^ z3;\n\nendmodule"}
{"task_id": "rotate100", "description": "Build a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (load) begin\n\t\tq <= data;\n\tend else begin\n\t\tcase (ena)\n\t\t\t2'b01: q <= {q[0], q[99:1]};\n\t\t\t2'b10: q <= {q[1:99], q[0]};\n\t\t\tdefault: q <= q;\n\t\tendcase\n\tend\nend\nendmodule"}
{"task_id": "review2015_count1k", "description": "Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset == 1) begin\n\t\tq <= 0;\n\tend else begin\n\t\tif (q == 999) begin\n\t\t\tq <= 0;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "notgate", "description": "Create a module that implements a NOT gate.", "prompt": "module top_module(\n\tinput in,\n\toutput out\n);\n", "completion": "\nassign out = ~in;\nendmodule\n"}
{"task_id": "fsm_onehot", "description": "Given the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\n// S0 (0, 0) --0--> S0\n// S0 (0, 0) --1--> S1\n// S1 (0, 0) --0--> S0\n// S1 (0, 0) --1--> S2\n// S2 (0, 0) --0--> S0\n// S2 (0, 0) --1--> S3\n// S3 (0, 0) --0--> S0\n// S3 (0, 0) --1--> S4\n// S4 (0, 0) --0--> S0\n// S4 (0, 0) --1--> S5\n// S5 (0, 0) --0--> S8\n// S5 (0, 0) --1--> S6\n// S6 (0, 0) --0--> S9\n// S6 (0, 0) --1--> S7\n// S7 (0, 1) --0--> S0\n// S7 (0, 1) --1--> S7\n// S8 (1, 0) --0--> S0\n// S8 (1, 0) --1--> S1\n// S9 (1, 1) --0--> S0\n// S9 (1, 1) --1--> S1\n\n// Suppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\n// Write Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.", "prompt": "module top_module (\n\tinput in,\n\tinput [9:0] state,\n\toutput [9:0] next_state,\n\toutput out1,\n\toutput out2);\n", "completion": "always_comb begin\n    case (state)\n        10'b1: begin // S0\n            if (in) begin\n                next_state = 10'b10;\n                out1 = 0;\n                out2 = 0;\n            end else begin\n                next_state = 10'b1;\n                out1 = 0;\n                out2 = 0;\n            end\n        end\n        10'b10: begin // S1\n            if (in) begin\n                next_state = 10'b100;\n                out1 = 0;\n                out2 = 0;\n            end else begin\n                next_state = 10'b1;\n                out1 = 0;\n                out2 = 0;\n            end\n        end\n        10'b100: begin // S2\n            if (in) begin\n                next_state = 10'b1000;\n                out1 = 0;\n                out2 = 0;\n            end else begin\n                next_state = 10'b1;\n                out1 = 0;\n                out2 = 0;\n            end\n        end\n        10'b1000: begin // S3\n            if (in) begin\n                next_state = 10'b10000;\n                out1 = 0;\n                out2 = 0;\n            end else begin\n                next_state = 10'b1;\n                out1 = 0;\n                out2 = 0;\n            end\n        end\n        10'b10000: begin // S4\n            if (in) begin\n                if (state[0])\n                    next_state = 10'b1000000;\n                else\n                    next_state = 10'b1000;\n                out1 = 0;\n                out2 = 0;\n            end else begin\n                next_state = 10'b1;\n                out1 = 0;\n                out2 = 0;\n            end\n        end\n        10'b1000000: begin // S5\n            if (in) begin\n                if (state[1])\n                    next_state = 10'b100000000;\n                else\n                    next_state = 10'b100000;\n                out1 = 0;\n                out2 = 0;\n            end else begin\n                next_state = 10'b1000;\n                out1 = 0;\n                out2 = 0;\n            end\n        end\n        10'b100000: begin // S6\n            if (in) begin\n                if (state[2])\n                    next_state = 10'b1000000000;\n                else\n                    next_state = 10'b10000000;\n                out1 = 0;\n                out2 = 0;\n            end else begin\n                next_state = 10'b10000;\n                out1 = 0;\n                out2 = 0;\n            end\n        end\n        10'b10000000: begin // S7\n            if (in) begin\n                if (state[1])\n                    next_state = 10'b100000000;\n                else\n                    next_state = 10'b10000000;\n                out1 = 0;\n                out2 = 1;\n            end else begin\n                next_state = 10'b10000000;\n                out1 = 0;\n                out2 = 1;\n            end\n        end\n        10'b100000000: begin // S8\n            if (in) begin\n                if (state[0])\n                    next_state = 10'b1000000000;\n                else\n                    next_state = 10'b10;\n                out1 = 1;\n                out2 = 0;\n            end else begin\n                next_state = 10'b1;\n                out1 = 1;\n                out2 = 0;\n            end\n        end\n        10'b1000000000: begin // S9\n            if (in) begin\n                if (state[0] && state[2])\n                    next_state = 10'b10000000000;\n                else\n                    next_state = 10'b10;\n                out1 = 1;\n                out2 = 1;\n            end else begin\n                next_state = 10'b1;\n                out1 = 1;\n                out2 = 1;\n            end\n        end\n        default: begin\n            next_state = 10'b1;\n            out1 = 0;\n            out2 = 0;\n        end\n    endcase\nend\nendmodule"}
{"task_id": "ece241_2013_q7", "description": "A JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n// J | K | Q\n// 0 | 0 | Qold\n// 0 | 1 | 0\n// 1 | 0 | 1\n// 1 | 1 | ~Qold", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\toutput reg Q\n);\n", "completion": "always @(posedge clk) begin\n    if (j & ~k) begin\n        Q <= 1;\n    end else if (~j & k) begin\n        Q <= 0;\n    end else if (j & k) begin\n        Q <= ~Q;\n    end\nend\n\nendmodule"}
{"task_id": "popcount3", "description": "A \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.", "prompt": "module top_module (\n\tinput [2:0] in,\n\toutput [1:0] out\n);\n", "completion": "\n  assign out = in[0] + in[1] + in[2];\nendmodule"}
{"task_id": "vector5", "description": "Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out\n);\n", "completion": "xor #25 (\n\t.in0(a),\n\t.in1({b,c,d,e}),\n\t.out(out)\n);\nendmodule"}
{"task_id": "lemmings1", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);\n", "completion": "reg [1:0] state;\nparameter WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01;\n\nalways @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tstate <= WALK_LEFT;\n\telse if (bump_left)\n\t\tstate <= WALK_RIGHT;\n\telse if (bump_right)\n\t\tstate <= WALK_LEFT;\n\telse \n\t\tstate <= (state == WALK_LEFT) ? WALK_RIGHT : WALK_LEFT;\nend\n\nassign walk_left = (state == WALK_LEFT) ? 1 : 0;\nassign walk_right = (state == WALK_RIGHT) ? 1 : 0;\n\nendmodule"}
{"task_id": "circuit1", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               q               \n// 0ns             0               0               0               \n// 5ns             0               0               0               \n// 10ns            0               0               0               \n// 15ns            0               0               0               \n// 20ns            0               0               0               \n// 25ns            0               1               0               \n// 30ns            0               1               0               \n// 35ns            1               0               0               \n// 40ns            1               0               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               0               \n// 60ns            0               0               0               \n// 65ns            0               1               0               \n// 70ns            0               1               0               \n// 75ns            1               0               0               \n// 80ns            1               0               0               \n// 85ns            1               1               1               \n// 90ns            1               1               1               \n", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\toutput q\n);\n", "completion": "\nassign q = (a & ~b) | (~a & b);\nendmodule\n"}
{"task_id": "7458", "description": "The 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.", "prompt": "module top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y\n);\n", "completion": "\nassign p1y = (p1a & p1b & p1c) | (p1d & p1e & p1f);\nassign p2y = (p2a & p2b) | (p2c & p2d);\nendmodule\n"}
{"task_id": "2014_q3c", "description": "Given the state-assigned table shown below, implement the logic functions Y[0] and z.\n// Present state y[2:0] | Next state Y[2:0] x=0, Next state Y[2:0] x=1 | Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput x,\n\tinput [2:0] y,\n\toutput reg Y0,\n\toutput reg z\n);\n", "completion": "always @(posedge clk) begin\n    case ({y, x})\n        3'b000_0: begin\n            Y0 <= 1'b0;\n            z <= 1'b0;\n        end\n        3'b001_0: begin\n            Y0 <= 1'b0;\n            z <= 1'b0;\n        end\n        3'b001_1: begin\n            Y0 <= 1'b0;\n            z <= 1'b0;\n        end\n        3'b010_0: begin\n            Y0 <= 1'b0;\n            z <= 1'b0;\n        end\n        3'b011_0: begin\n            Y0 <= 1'b0;\n            z <= 1'b1;\n        end\n        3'b100_0: begin\n            Y0 <= 1'b1;\n            z <= 1'b1;\n        end\n        default: begin\n            Y0 <= 1'b0;\n            z <= 1'b0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "m2014_q4e", "description": "Implement a 2-input NOR gate.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\toutput logic out\n);\n", "completion": "assign out = ~(in1 | in2);\n\nendmodule"}
{"task_id": "wire4", "description": "Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n", "completion": "assign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\n\nendmodule"}
{"task_id": "m2014_q4b", "description": "Implement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".", "prompt": "module top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput logic q\n);\n", "completion": "always_ff @(posedge clk or negedge ar)\nbegin\n\tif (!ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\nendmodule"}
{"task_id": "always_case", "description": "Create a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.", "prompt": "module top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out\n);\n", "completion": "always @* begin\n    case (sel)\n        0: out = data0;\n        1: out = data1;\n        2: out = data2;\n        3: out = data3;\n        4: out = data4;\n        5: out = data5;\n        default: out = 4'b0000;\n    endcase\nend\n\nendmodule"}
{"task_id": "timer", "description": "Implement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n", "prompt": "module top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc\n);\n", "completion": "reg [9:0] counter;\n\nalways @(posedge clk) begin\n\tif (load == 1) begin\n\t\tcounter <= data;\n\tend else begin\n\t\tif (counter > 0) begin\n\t\t\tcounter <= counter - 1;\n\t\tend\n\tend\nend\n\nassign tc = (counter == 0);\n\nendmodule"}
{"task_id": "review2015_fsmseq", "description": "Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n", "completion": "\nreg [3:0] state;\nreg start_shifting;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 4'b0000;\n        start_shifting <= 1'b0;\n    end else begin\n        case(state)\n            4'b0000: begin // Initial state\n                if(data) begin\n                    state <= 4'b0001;\n                end\n            end\n            4'b0001: begin // State 1\n                if(data) begin\n                    state <= 4'b0010;\n                end else begin\n                    state <= 4'b0000;\n                end\n            end\n            4'b0010: begin // State 2\n                if(data) begin\n                    state <= 4'b0011;\n                end else begin\n                    state <= 4'b0000;\n                end\n            end\n            4'b0011: begin // State 3\n                if(data) begin\n                    state <= 4'b1101;\n                end else begin\n                    state <= 4'b0000;\n                end\n            end\n            4'b1101: begin // Sequence found\n                start_shifting <= 1;\n                state <= 4'b1101;\n            end\n        endcase\n    end\nend\n\nendmodule\n"}
{"task_id": "dff8r", "description": "Create 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 8'd0;\n\tend else begin\n\t\tq <= d;\n\tend\nend\n\nendmodule"}
{"task_id": "edgedetect2", "description": "For each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n", "completion": "always @(posedge clk) begin\n    for (int i=0; i<8; i=i+1) begin\n        if (in[i] & !prev_in[i]) begin\n            anyedge[i] <= 1;\n        end\n    end\n    prev_in <= in;\nend\nendmodule"}
{"task_id": "count1to10", "description": "Make a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset == 1) begin\n\t\tq <= 4'b0001;\n\tend else begin\n\t\tif (q == 4'b1010) begin\n\t\t\tq <= 4'b0001;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "circuit9", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               q               \n// 0ns             0               1               x               \n// 5ns             1               1               4               \n// 10ns            0               1               4               \n// 15ns            1               1               4               \n// 20ns            0               1               4               \n// 25ns            1               1               4               \n// 30ns            0               1               4               \n// 35ns            1               1               4               \n// 40ns            0               1               4               \n// 45ns            1               0               4               \n// 50ns            0               0               4               \n// 55ns            1               0               5               \n// 60ns            0               0               5               \n// 65ns            1               0               6               \n// 70ns            0               0               6               \n// 75ns            1               0               0               \n// 80ns            0               0               0               \n// 85ns            1               0               1               \n// 90ns            0               0               1               ", "prompt": "module top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q\n);\n", "completion": "always @(posedge clk) begin\n    if (a == 1)\n        q <= q + 1;\n    else\n        q <= 0;\nend\nendmodule"}
{"task_id": "lfsr5", "description": "A linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n", "completion": "\nreg [4:0] lfsr;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        lfsr <= 5'b1;\n    end else begin\n        lfsr <= {lfsr[3] ^ lfsr[4], lfsr[0:3]};\n    end\nend\n\nassign q = lfsr;\nendmodule\n"}
{"task_id": "bugs_addsubz", "description": "The following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule", "prompt": "module top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n", "completion": "always @(*) begin\n    case (do_sub)\n        0: out = a + b;\n        1: out = a - b;\n    endcase\n\n    if (out == 8'h00)\n        result_is_zero = 1;\n    else\n        result_is_zero = 0;\nend\n\nendmodule"}
{"task_id": "m2014_q3", "description": "Consider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | d | 0 | d | d |\n//  01 | 0 | d | 1 | 0 |\n//  11 | 1 | 1 | d | d |\n//  10 | 1 | 1 | 0 | d |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "// Karnaugh map values: (spaces represent \"don't care\")\n// 00: d\n// 01: 0\n// 11: 1\n// 10: 1\n\nassign f = (x == 4'b0101) ? 1 :    // x == 5\n           (x == 4'b1100) ? 1 :    // x == 12\n           (x == 4'b1101) ? 0 :    // x == 13\n           (x == 4'b1110) ? 1 :    // x == 14\n           (x == 4'b1111) ? 1 : 0; // x == 15\n\nendmodule"}
{"task_id": "bugs_case", "description": "This combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.", "prompt": "module top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid\n);\n", "completion": "always @(*) begin\n    case(code)\n        8'h45: begin\n            out = 4'b0000;\n            valid = 1;\n        end\n        8'h16: begin\n            out = 4'b0001;\n            valid = 1;\n        end\n        8'h1e: begin\n            out = 4'b0010;\n            valid = 1;\n        end\n        8'h26: begin\n            out = 4'b0011;\n            valid = 1;\n        end\n        8'h25: begin\n            out = 4'b0100;\n            valid = 1;\n        end\n        8'h2e: begin\n            out = 4'b0101;\n            valid = 1;\n        end\n        8'h36: begin\n            out = 4'b0110;\n            valid = 1;\n        end\n        8'h3d: begin\n            out = 4'b0111;\n            valid = 1;\n        end\n        8'h3e: begin\n            out = 4'b1000;\n            valid = 1;\n        end\n        8'h46: begin\n            out = 4'b1001;\n            valid = 1;\n        end\n        default: begin\n            out = 4'b0000;\n            valid = 0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vectorr", "description": "Given an 8-bit input vector [7:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [7:0] out\n);\n", "completion": "\n  assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\n\nendmodule"}
{"task_id": "kmap3", "description": "Implement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\n//        ab\n// cd   01 00 10 11\n//  00 | d | 0 | 1 | 1 |\n//  01 | 0 | 0 | d | d |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 0 | 1 | 1 | 1 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out\n);\n", "completion": "always @(*) begin\n    case({c, d, a, b})\n        4'b0000, 4'b0010, 4'b1010: out = 1;\n        4'b0001: out = 0;\n        4'b0011, 4'b1110, 4'b1100, 4'b1011: out = d;\n        default: out = 1;\n    endcase\nend\n\nendmodule"}
{"task_id": "review2015_shiftcount", "description": "Build a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).", "prompt": "module top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n", "completion": "reg [3:0] shift_reg;\n\nalways @(posedge clk) begin\n\tif (shift_ena)\n\t\tshift_reg <= {shift_reg[2:0], data};\n\telse if (count_ena)\n\t\tshift_reg <= shift_reg - 1;\nend\n\nassign q = shift_reg;\n\nendmodule"}
{"task_id": "wire", "description": "Create a module with one input and one output that behaves like a wire.", "prompt": "module top_module(\n\tinput in,\n\toutput out);\n", "completion": "assign out = in;\nendmodule"}
{"task_id": "review2015_fsmshift", "description": "This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n", "completion": "reg [3:0] counter;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tshift_ena <= 1;\n\t\tcounter <= 4'b1000;\n\tend else begin\n\t\tif (counter != 4'b0000) begin\n\t\t\tshift_ena <= 1;\n\t\t\tcounter <= counter - 1;\n\t\tend else begin\n\t\t\tshift_ena <= 0;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "count15", "description": "Build a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tq <= 4'b0000;\n\tend else begin\n\t\tif (q == 4'b1111) begin\n\t\t\tq <= 4'b0000;\n\t\tend else begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "always_if", "description": "Build a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always\n);\n", "completion": "assign out_assign = (sel_b1 & sel_b2) ? b : a;\n\nalways @(*) begin\n\tif (sel_b1 & sel_b2)\n\t\tout_always = b;\n\telse\n\t\tout_always = a;\nend\n\nendmodule"}
{"task_id": "kmap1", "description": "Implement the circuit described by the Karnaugh map below.\n//        a\n// bc   0 1 \n//  00 | 0 | 1 |\n//  01 | 1 | 1 | \n//  11 | 1 | 1 | \n//  10 | 1 | 1 | \n", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n", "completion": "\n  assign out = (a & b) | (b & c) | (a & c);\nendmodule"}
{"task_id": "2013_q2afsm", "description": "Consider the FSM described by the state diagram shown below:\n\n// A --r1=0,r2=0,r3=0--> A\n// A --r1=1--> B\n// A --r1=0,r2=1--> C\n// A --r1=0,r2=0,r3=0--> D\n// B (g1=1) --r1=1--> B\n// B (g1=1) --r1=0--> A\n// C (g2=1) --r2=1--> C\n// C (g2=1) --r2=0--> A\n\n// Resetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\n// Write complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput [3:1] r,\n\toutput [3:1] g\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00;\nparameter B = 2'b01;\nparameter C = 2'b10;\nparameter D = 2'b11;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (~resetn) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tnext_state = state;\n\tcase (state)\n\t\tA: begin\n\t\t\tif (r[1]) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else if (r[2]) begin\n\t\t\t\tnext_state = C;\n\t\t\tend else if (r[3]) begin\n\t\t\t\tnext_state = D;\n\t\t\tend\n\t\tend\n\t\tB: begin\n\t\t\tif (r[1]) begin\n\t\t\t\tnext_state = B;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tC: begin\n\t\t\tif (r[2]) begin\n\t\t\t\tnext_state = C;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\tend\n\t\tend\n\t\tD: begin\n\t\t\tif (r[1]) begin\n\t\t\t\tnext_state = A;\n\t\t\tend else if (r[2]) begin\n\t\t\t\tnext_state = C;\n\t\t\tend else if (r[3]) begin\n\t\t\t\tnext_state = D;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tA: begin\n\t\t\tg = 3'b000;\n\t\tend\n\t\tB: begin\n\t\t\tg = 3'b001;\n\t\tend\n\t\tC: begin\n\t\t\tg = 3'b010;\n\t\tend\n\t\tD: begin\n\t\t\tg = 3'b100;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "count10", "description": "Build a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n", "completion": "\nreg [3:0] count;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        count <= 4'b0000;\n    else\n        count <= (count == 4'b1001) ? 4'b0000 : count + 1;\nend\n\nassign q = count;\nendmodule\n"}
{"task_id": "fsm_ps2", "description": "The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done\n);\n", "completion": "reg [1:0] state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\tend else begin\n\t\tcase (state)\n\t\t\t2'b00: begin\n\t\t\t\tif (in[3] == 1'b1) begin\n\t\t\t\t\tstate <= 2'b01;\n\t\t\t\tend\n\t\t\tend\n\t\t\t2'b01: begin\n\t\t\t\tstate <= 2'b10;\n\t\t\tend\n\t\t\t2'b10: begin\n\t\t\t\tstate <= 2'b00;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign done = (state == 2'b10);\n\nendmodule"}
{"task_id": "mux2to1", "description": "Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out\n);\n", "completion": "\nassign out = (sel == 1'b0) ? a : b;\n\nendmodule"}
{"task_id": "gates4", "description": "Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "assign out_and = in[0] & in[1] & in[2] & in[3];\nassign out_or = in[0] | in[1] | in[2] | in[3];\nassign out_xor = in[0] ^ in[1] ^ in[2] ^ in[3];\n\nendmodule"}
{"task_id": "2014_q3bfsm", "description": "Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 3'b000;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\t3'b000: begin\n\t\t\tif (x == 1)\n\t\t\t\tnext_state = 3'b001;\n\t\t\telse\n\t\t\t\tnext_state = 3'b000;\n\t\t\tz = 1'b0;\n\t\tend\n\t\t3'b001: begin\n\t\t\tif (x == 1)\n\t\t\t\tnext_state = 3'b100;\n\t\t\telse\n\t\t\t\tnext_state = state;\n\t\t\tz = 1'b0;\n\t\tend\n\t\t3'b010: begin\n\t\t\tif (x == 1)\n\t\t\t\tnext_state = 3'b001;\n\t\t\telse\n\t\t\t\tnext_state = state;\n\t\t\tz = 1'b0;\n\t\tend\n\t\t3'b011: begin\n\t\t\tif (x == 1)\n\t\t\t\tnext_state = 3'b010;\n\t\t\telse\n\t\t\t\tnext_state = 3'b001;\n\t\t\tz = 1'b1;\n\t\tend\n\t\t3'b100: begin\n\t\t\tif (x == 1)\n\t\t\t\tnext_state = 3'b100;\n\t\t\telse\n\t\t\t\tnext_state = 3'b011;\n\t\t\tz = 1'b1;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "2013_q2bfsm", "description": "Consider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or negedge resetn)\nbegin\n\tif (~resetn)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*)\nbegin\n\tcase (state)\n\t\t2'b00: begin // State A\n\t\t\tif (~resetn)\n\t\t\t\tnext_state = 2'b00;\n\t\t\telse if (x == 1'b1)\n\t\t\t\tnext_state = 2'b01;\n\t\t\telse\n\t\t\t\tnext_state = 2'b00;\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tnext_state = 2'b10;\n\t\tend\n\t\t2'b10: begin // State C\n\t\t\tif (y == 1'b1)\n\t\t\t\tnext_state = 2'b11;\n\t\t\telse if (y == 1'b0)\n\t\t\t\tnext_state = 2'b00;\n\t\t\telse\n\t\t\t\tnext_state = 2'b10;\n\t\tend\n\t\t2'b11: begin // State D\n\t\t\tif (y == 1'b1)\n\t\t\t\tnext_state = 2'b11;\n\t\t\telse if (y == 1'b0)\n\t\t\t\tnext_state = 2'b00;\n\t\t\telse\n\t\t\t\tnext_state = 2'b10;\n\t\tend\n\t\tdefault: next_state = 2'b00;\n\tendcase\nend\n\nalways @(posedge clk or negedge resetn)\nbegin\n\tif (~resetn)\n\t\tf <= 1'b0;\n\telse if (state == 2'b01)\n\t\tf <= 1'b1;\n\telse\n\t\tf <= f;\nend\n\nalways @(posedge clk or negedge resetn)\nbegin\n\tif (~resetn)\n\t\tg <= 1'b0;\n\telse if (state == 2'b11 || (state == 2'b10 && y == 1'b1))\n\t\tg <= 1'b1;\n\telse if (state == 2'b10 && y == 1'b0)\n\t\tg <= 1'b0;\n\telse\n\t\tg <= g;\nend\n\nendmodule"}
{"task_id": "dff8p", "description": "Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n", "completion": "always @(negedge clk) begin\n    if (reset) begin\n        q <= 8'd52; // 8'd52 is equivalent to 0x34 in decimal\n    end else begin\n        q <= d;\n    end\nend\n\nendmodule"}
{"task_id": "reduction", "description": "Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput parity\n);\n", "completion": "\n  reg parity;\n\n  always @* begin\n    parity = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7];\n  end\n\nendmodule"}
{"task_id": "fsm3comb", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.\n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [1:0] state,\n\toutput reg [1:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case (state)\n        2'b00: begin // State A\n            next_state = (in) ? 2'b01 : 2'b00;\n            out = 1'b0;\n        end\n        2'b01: begin // State B\n            next_state = (in) ? 2'b01 : 2'b10;\n            out = 1'b0;\n        end\n        2'b10: begin // State C\n            next_state = (in) ? 2'b11 : 2'b00;\n            out = 1'b0;\n        end\n        2'b11: begin // State D\n            next_state = (in) ? 2'b10 : 2'b01;\n            out = 1'b1;\n        end\n        default: begin\n            next_state = 2'b00;\n            out = 1'b0;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "mt2015_q4b", "description": "The module can be described by the following simulation waveform: \n\n// time            x               y               z               \n// 0ns             0               0               1               \n// 5ns             0               0               1               \n// 10ns            0               0               1               \n// 15ns            0               0               1               \n// 20ns            0               0               1               \n// 25ns            1               0               0               \n// 30ns            1               0               0               \n// 35ns            0               1               0               \n// 40ns            0               1               0               \n// 45ns            1               1               1               \n// 50ns            1               1               1               \n// 55ns            0               0               1               \n// 60ns            0               1               0               \n// 65ns            0               1               0               \n// 70ns            1               1               1               \n// 75ns            0               1               0               \n// 80ns            0               1               0               \n// 85ns            0               1               0               \n// 90ns            1               0               0               ", "prompt": "module top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n", "completion": "always @(x, y)\nbegin\n\tif (x & y)\n\t\tz <= 1;\n\telse\n\t\tz <= 0;\nend\nendmodule"}
{"task_id": "2012_q2fsm", "description": "Consider the state machine shown below:\n\n// A (0) --1--> B\n// A (0) --0--> A\n// B (0) --1--> C\n// B (0) --0--> D\n// C (0) --1--> E\n// C (0) --0--> D\n// D (0) --1--> F\n// D (0) --0--> A\n// E (1) --1--> E\n// E (1) --0--> D\n// F (1) --1--> C\n// F (1) --0--> D\n\n// Reset resets into state A and is synchronous active-high. \n\n// Write complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput w,\n\toutput z\n);\n", "completion": "reg [2:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset)\n        state <= 3'b000;\n    else\n        state <= next_state;\nend\n\nalways @* begin\n    case (state)\n        3'b000: begin // State A\n            if (w)\n                next_state = 3'b001; // Transition to state B\n            else\n                next_state = 3'b000; // Remain in state A\n            z = 1'b0;\n        end\n        3'b001: begin // State B\n            if (w)\n                next_state = 3'b010; // Transition to state C\n            else\n                next_state = 3'b011; // Transition to state D\n            z = 1'b0;\n        end\n        3'b010: begin // State C\n            if (w)\n                next_state = 3'b100; // Transition to state E\n            else\n                next_state = 3'b011; // Transition to state D\n            z = 1'b0;\n        end\n        3'b011: begin // State D\n            if (w)\n                next_state = 3'b110; // Transition to state F\n            else\n                next_state = 3'b000; // Transition to state A\n            z = 1'b0;\n        end\n        3'b100: begin // State E\n            if (w)\n                next_state = 3'b100; // Remain in state E\n            else\n                next_state = 3'b011; // Transition to state D\n            z = 1'b1;\n        end\n        3'b110: begin // State F\n            if (w)\n                next_state = 3'b010; // Transition to state C\n            else\n                next_state = 3'b011; // Transition to state D\n            z = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "dff16e", "description": "Create 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n", "completion": "always @(posedge clk) begin\n    if (!resetn) begin\n        q <= 16'b0;\n    end else begin\n        if (byteena[0]) begin\n            q[7:0] <= d[7:0];\n        end\n        if (byteena[1]) begin\n            q[15:8] <= d[15:8];\n        end\n    end\nend\n\nendmodule"}
{"task_id": "edgedetect", "description": "For each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n", "completion": "always @(posedge clk) begin\n\tfor (int i = 0; i < 8; i = i + 1) begin\n\t\tif (in[i] == 1 && in_prev[i] == 0) begin\n\t\t\tpedge[i] <= 1;\n\t\tend else begin\n\t\t\tpedge[i] <= 0;\n\t\tend\n\tend\n\tin_prev <= in;\nend\n\nendmodule"}
{"task_id": "circuit8", "description": "This is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clock           a               p               q               \n// 0ns             0               0               x               x               \n// 5ns             0               0               x               x               \n// 10ns            0               0               x               x               \n// 15ns            0               0               x               x               \n// 20ns            0               0               x               x               \n// 25ns            1               0               0               x               \n// 30ns            1               0               0               x               \n// 35ns            1               0               0               x               \n// 40ns            1               0               0               x               \n// 45ns            1               0               0               x               \n// 50ns            1               0               0               x               \n// 55ns            0               0               0               0               \n// 60ns            0               0               0               0               \n// 65ns            0               0               0               0               \n// 70ns            0               1               0               0               \n// 75ns            0               0               0               0               \n// 80ns            0               1               0               0               \n// 85ns            1               0               0               0               \n// 90ns            1               1               1               0               \n// 95ns            1               0               0               0               \n// 100ns           1               1               1               0               \n// 105ns           1               0               0               0               \n// 110ns           1               1               1               0               \n// 115ns           0               0               1               1               \n// 120ns           0               1               1               1               \n// 125ns           0               0               1               1               \n// 130ns           0               1               1               1               \n// 135ns           0               0               1               1               \n// 140ns           0               0               1               1               \n// 145ns           1               0               0               1               \n// 150ns           1               0               0               1               \n// 155ns           1               0               0               1               \n// 160ns           1               0               0               1               \n// 165ns           1               1               1               1               \n// 170ns           1               0               0               1               \n// 175ns           0               1               0               0               \n// 180ns           0               0               0               0               \n// 185ns           0               1               0               0               \n// 190ns           0               0               0               0       ", "prompt": "module top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q\n);\n", "completion": "\nreg state_p, state_q;\n\nalways @(posedge clock) begin\n    if (state_p == 1'b0 && a == 1'b1) begin\n        p <= 1'b1;\n    end else begin\n        p <= 1'b0;\n    end\n\n    if (state_q == 1'b0 && p == 1'b1) begin\n        q <= 1'b1;\n    end else begin\n        q <= 1'b0;\n    end\n\n    state_p <= p;\n    state_q <= q;\nend\nendmodule\n"}
{"task_id": "rule90", "description": "Rule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n// Left | Center | Right | Center's next state\n// 1 | 1 | 1 | 0\n// 1 | 1 | 0 | 1\n// 1 | 0 | 1 | 0\n// 1 | 0 | 0 | 1\n// 0 | 1 | 1 | 1\n// 0 | 1 | 0 | 0 \n// 0 | 0 | 1 | 1\n// 0 | 0 | 0 | 0\n// In this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [511:0] data,\n\toutput reg [511:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        q[0] = q[1] ^ q[511];\n        q[511] = q[0] ^ q[510];\n        for (int i = 1; i < 511; i=i+1) begin\n            q[i] = q[i-1] ^ q[i+1];\n        end\n    end\nend\n\nendmodule"}
{"task_id": "mt2015_eq2", "description": "Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.", "prompt": "module top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n", "completion": "assign z = (A == B) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "gatesv100", "description": "You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different\n);\n", "completion": "// Calculate out_both\nalways @*\nbegin\n    for (int i = 0; i < 99; i=i+1) begin\n        out_both[i] = (in[i] & in[i+1]);\n    end\nend\n\n// Calculate out_any\nalways @*\nbegin\n    out_any[1] = (in[0] | in[1]);\n    for (int i = 1; i < 99; i=i+1) begin\n        out_any[i+1] = (in[i] | in[i-1]);\n    end\nend\n\n// Calculate out_different\nalways @*\nbegin\n    out_different[0] = (in[0] ^ in[99]);\n    for (int i = 1; i < 99; i=i+1) begin\n        out_different[i] = (in[i] ^ in[i-1]);\n    end\n    out_different[99] = (in[99] ^ in[98]);\nend\n\nendmodule"}
{"task_id": "m2014_q4a", "description": "Implement a D latch using an always block.\n", "prompt": "module top_module (\n\tinput d,\n\tinput ena,\n\toutput logic q\n);\n", "completion": "\n\talways @(posedge ena) begin\n\t\tif (ena) begin\n\t\t\tq <= d;\n\t\tend\n\tend\nendmodule\n"}
{"task_id": "mux256to1v", "description": "Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.", "prompt": "module top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out\n);\n", "completion": "reg [3:0] out;\n\nalways @(*) begin\n\tcase(sel)\n\t\t0: out = in[3:0];\n\t\t1: out = in[7:4];\n\t\t2: out = in[11:8];\n\t\t3: out = in[15:12];\n\t\t4: out = in[19:16];\n\t\t5: out = in[23:20];\n\t\t6: out = in[27:24];\n\t\t7: out = in[31:28];\n\t\t8: out = in[35:32];\n\t\t9: out = in[39:36];\n\t\t10: out = in[43:40];\n\t\t11: out = in[47:44];\n\t\t12: out = in[51:48];\n\t\t13: out = in[55:52];\n\t\t14: out = in[59:56];\n\t\t15: out = in[63:60];\n\t\t16: out = in[67:64];\n\t\t17: out = in[71:68];\n\t\t18: out = in[75:72];\n\t\t19: out = in[79:76];\n\t\t20: out = in[83:80];\n\t\t21: out = in[87:84];\n\t\t22: out = in[91:88];\n\t\t23: out = in[95:92];\n\t\t24: out = in[99:96];\n\t\t25: out = in[103:100];\n\t\t26: out = in[107:104];\n\t\t27: out = in[111:108];\n\t\t28: out = in[115:112];\n\t\t29: out = in[119:116];\n\t\t30: out = in[123:120];\n\t\t31: out = in[127:124];\n\t\t32: out = in[131:128];\n\t\t33: out = in[135:132];\n\t\t34: out = in[139:136];\n\t\t35: out = in[143:140];\n\t\t36: out = in[147:144];\n\t\t37: out = in[151:148];\n\t\t38: out = in[155:152];\n\t\t39: out = in[159:156];\n\t\t40: out = in[163:160];\n\t\t41: out = in[167:164];\n\t\t42: out = in[171:168];\n\t\t43: out = in[175:172];\n\t\t44: out = in[179:176];\n\t\t45: out = in[183:180];\n\t\t46: out = in[187:184];\n\t\t47: out = in[191:188];\n\t\t48: out = in[195:192];\n\t\t49: out = in[199:196];\n\t\t50: out = in[203:200];\n\t\t51: out = in[207:204];\n\t\t52: out = in[211:208];\n\t\t53: out = in[215:212];\n\t\t54: out = in[219:216];\n\t\t55: out = in[223:220];\n\t\t56: out = in[227:224];\n\t\t57: out = in[231:228];\n\t\t58: out = in[235:232];\n\t\t59: out = in[239:236];\n\t\t60: out = in[243:240];\n\t\t61: out = in[247:244];\n\t\t62: out = in[251:248];\n\t\t63: out = in[255:252];\n\t\t64: out = in[259:256];\n\t\t65: out = in[263:260];\n\t\t66: out = in[267:264];\n\t\t67: out = in[271:268];\n\t\t68: out = in[275:272];\n\t\t69: out = in[279:276];\n\t\t70: out = in[283:280];\n\t\t71: out = in[287:284];\n\t\t72: out = in[291:288];\n\t\t73: out = in[295:292];\n\t\t74: out = in[299:296];\n\t\t75: out = in[303:300];\n\t\t76: out = in[307:304];\n\t\t77: out = in[311:308];\n\t\t78: out = in[315:312];\n\t\t79: out = in[319:316];\n\t\t80: out = in[323:320];\n\t\t81: out = in[327:324];\n\t\t82: out = in[331:328];\n\t\t83: out = in[335:332];\n\t\t84: out = in[339:336];\n\t\t85: out = in[343:340];\n\t\t86: out = in[347:344];\n\t\t87: out = in[351:348];\n\t\t88: out = in[355:352];\n\t\t89: out = in[359:356];\n\t\t90: out = in[363:360];\n\t\t91: out = in[367:364];\n\t\t92: out = in[371:368];\n\t\t93: out = in[375:372];\n\t\t94: out = in[379:376];\n\t\t95: out = in[383:380];\n\t\t96: out = in[387:384];\n\t\t97: out = in[391:388];\n\t\t"}
{"task_id": "mux9to1v", "description": "Create a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.", "prompt": "module top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput logic [15:0] out\n);\n", "completion": "always_comb begin\n    case(sel)\n        0: out = a;\n        1: out = b;\n        2: out = c;\n        3: out = d;\n        4: out = e;\n        5: out = f;\n        6: out = g;\n        7: out = h;\n        8: out = i;\n        default: out = 16'hFFFF; // for sel=9 to 15, set all output bits to '1'\n    endcase\nend endmodule"}
{"task_id": "vectorgates", "description": "Build a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.", "prompt": "module top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not\n);\n", "completion": "  \n  assign out_or_bitwise = a | b;\n  assign out_or_logical = a || b;\n  assign out_not = {~b, ~a};\n\nendmodule"}
{"task_id": "fsm3onehot", "description": "The following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. \n// State | Next state in=0, Next state in=1 | Output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1", "prompt": "module top_module (\n\tinput in,\n\tinput [3:0] state,\n\toutput reg [3:0] next_state,\n\toutput out\n);\n", "completion": "always @(*) begin\n    case(state)\n        4'b0001: begin // State A\n            next_state = in ? 4'b0010 : 4'b0001;\n            out = 1'b0;\n        end\n        4'b0010: begin // State B\n            next_state = in ? 4'b0010 : 4'b0100;\n            out = 1'b0;\n        end\n        4'b0100: begin // State C\n            next_state = in ? 4'b0001 : 4'b1000;\n            out = 1'b0;\n        end\n        4'b1000: begin // State D\n            next_state = in ? 4'b0100 : 4'b0010;\n            out = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "conditional", "description": "Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). ", "prompt": "module top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min\n);\n", "completion": "always @(*) begin\n\tmin = a;\n\tif (b < min) begin\n\t\tmin = b;\n\tend\n\tif (c < min) begin\n\t\tmin = c;\n\tend\n\tif (d < min) begin\n\t\tmin = d;\n\tend\nend\n\nendmodule"}
{"task_id": "gates", "description": "Build a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb\n);\n", "completion": "and_gate and_gate_inst(.a(a), .b(b), .y(out_and));\nor_gate or_gate_inst(.a(a), .b(b), .y(out_or));\nxor_gate xor_gate_inst(.a(a), .b(b), .y(out_xor));\nnand_gate nand_gate_inst(.a(a), .b(b), .y(out_nand));\nnor_gate nor_gate_inst(.a(a), .b(b), .y(out_nor));\nxnor_gate xnor_gate_inst(.a(a), .b(b), .y(out_xnor));\nandnot_gate andnot_gate_inst(.a(a), .b(b), .y(out_anotb));\n\nendmodule"}
{"task_id": "kmap2", "description": "Implement the circuit described by the Karnaugh map below.\n\n//        ab\n// cd   00 01 11 10\n//  00 | 1 | 1 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 1 |\n//  11 | 0 | 1 | 1 | 1 |\n//  10 | 1 | 1 | 0 | 0 |", "prompt": "module top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out\n);\n", "completion": "always @ (*) begin\n    out = (a & b & !c & d) | (a & !b & d) | (!a & b & c) | (a & !b & !c) | (a & b & c);\nend\n\nendmodule"}
{"task_id": "2014_q3fsm", "description": "Consider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z\n);\n", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk) begin\n    if (reset) begin\n        state <= 2'b00;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @(*) begin\n    case (state)\n        2'b00: begin // State A\n            if (s == 1) begin\n                next_state = 2'b01; // State B\n            end else begin\n                next_state = 2'b00;\n            end\n        end\n\n        2'b01: begin // State B\n            if (w == 1) begin\n                next_state = 2'b10; // State C\n            end else begin\n                next_state = 2'b01;\n            end\n        end\n\n        2'b10: begin // State C\n            if (w == 1) begin\n                next_state = 2'b11; // State D\n            end else begin\n                next_state = 2'b10;\n            end\n        end\n\n        2'b11: begin // State D\n            if (w == 1) begin\n                z = 1;\n                next_state = 2'b00; // State A\n            end else begin\n                z = 0;\n                next_state = 2'b01; // State B\n            end\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "vector4", "description": "One common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.", "prompt": "module top_module (\n\tinput [7:0] in,\n\toutput [31:0] out\n);\n", "completion": "\nassign out = {24{in[7]}, in};\nendmodule\n"}
{"task_id": "m2014_q4k", "description": "Implement a shift register with four D flops. Reset is active-low synchronous resettable.", "prompt": "module top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);\n", "completion": "reg [3:0] d_ff;\n\nalways @(posedge clk or negedge resetn)\nbegin\n\tif (~resetn)\n\t\td_ff <= 4'b0;\n\telse\n\t\td_ff <= {d_ff[2:0], in};\nend\n\nassign out = d_ff[3];\n\nendmodule"}
{"task_id": "always_case2", "description": "A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.", "prompt": "module top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos\n);\n", "completion": "always @(*) begin\n\tif (in[0] == 1) pos = 2'b00;\n\telse if (in[1] == 1) pos = 2'b01;\n\telse if (in[2] == 1) pos = 2'b10;\n\telse if (in[3] == 1) pos = 2'b11;\n\telse pos = 2'b00;\nend\n\nendmodule"}
{"task_id": "fsm2", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput areset,\n\toutput out\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter OFF = 2'b00, ON = 2'b01;\nparameter ON_out = 1'b1, OFF_out = 1'b0;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= OFF;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tOFF: begin\n\t\t\tif (j) begin\n\t\t\t\tnext_state = ON;\n\t\t\tend else begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend\n\t\tend\n\t\tON: begin\n\t\t\tif (k) begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend else begin\n\t\t\t\tnext_state = ON;\n\t\t\tend\n\t\tend\n\t\tdefault: next_state = OFF;\n\tendcase\nend\n\nassign out = (state == ON) ? ON_out : OFF_out;\n\nendmodule"}
{"task_id": "m2014_q4i", "description": "Build a circuit with no inputs and one output. That output should always drive 0 (or logic low).", "prompt": "module top_module(\n\toutput out);\n", "completion": "assign out = 0;  \n\nendmodule"}
{"task_id": "step_one", "description": "Build a circuit with no inputs and one output. That output should always drive 1 (or logic high).", "prompt": "module top_module(\n\toutput one);\n", "completion": "assign one = 1; \nendmodule"}
{"task_id": "vector100r", "description": "Given a 100-bit input vector [99:0], reverse its bit ordering.", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out\n);\n", "completion": "always @(*) begin\n    for (int i=0; i<100; i=i+1) begin\n        out[i] = in[99-i];\n    end\nend\n\nendmodule"}
{"task_id": "m2014_q4d", "description": "Implement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\toutput logic out\n);\n", "completion": "\nlogic ff_input, ff_output;\n\nassign out = ff_output;\n\nalways @(posedge clk) begin\n    ff_input <= in ^ ff_output;\nend\n\nalways @(*) begin\n    ff_output = ff_input;\nend\n"}
{"task_id": "shift4", "description": "Build a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n", "prompt": "module top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n", "completion": "always @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tq <= 4'b0;\n\tend else begin\n\t\tif (load) begin\n\t\t\tq <= data;\n\t\tend else if (ena) begin\n\t\t\tq <= {q[3], q[2:0]};\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "truthtable1", "description": "Create a combinational circuit that implements the truth table.\n\n// x3 | x2 | x1 | f\n// 0 | 0 | 0 | 0\n// 0 | 0 | 1 | 0\n// 0 | 1 | 0 | 1\n// 0 | 1 | 1 | 1\n// 1 | 0 | 0 | 0\n// 1 | 0 | 1 | 1\n// 1 | 1 | 0 | 0\n// 1 | 1 | 1 | 1", "prompt": "module top_module (\n\tinput x3,\n\tinput x2,\n\tinput x1,\n\toutput f\n);\n", "completion": "assign f = (x3 & ~x2 & x1) | (~x3 & x2 & ~x1); \n\nendmodule"}
{"task_id": "dff8ar", "description": "Create 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.", "prompt": "module top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n", "completion": "reg [7:0] q_reg;\n\nalways @(posedge clk or posedge areset)\nbegin\n\tif (areset)\n\t\tq_reg <= 8'b0;\n\telse\n\t\tq_reg <= d;\nend\n\nassign q = q_reg;\n\nendmodule"}
{"task_id": "gates100", "description": "Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n", "prompt": "module top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor\n);\n", "completion": "\nassign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\nendmodule\n"}
{"task_id": "hadd", "description": "Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout\n);\n", "completion": "\n\tassign sum = a ^ b;\n\tassign cout = a & b;\nendmodule"}
{"task_id": "always_if2", "description": "Fix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n", "prompt": "module top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n", "completion": "    always @(*) begin\n        if (cpu_overheated)\n            shut_off_computer = 1;\n    end\n\n    always @(*) begin\n        if (!arrived)\n            keep_driving = !gas_tank_empty;\n    end\n\nendmodule"}
{"task_id": "fsm2s", "description": "This is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\n// OFF (out=0) --j=0--> OFF\n// OFF (out=0) --j=1--> ON\n// ON (out=1) --k=0--> ON\n// ON (out=1) --k=1--> OFF", "prompt": "module top_module (\n\tinput clk,\n\tinput j,\n\tinput k,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg state, next_state;\n\nparameter OFF = 1'b0;\nparameter ON = 1'b1;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= OFF;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tOFF: begin\n\t\t\tif (j) begin\n\t\t\t\tnext_state = ON;\n\t\t\tend else begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend\n\t\t\tout = OFF;\n\t\tend\n\t\tON: begin\n\t\t\tif (k) begin\n\t\t\t\tnext_state = OFF;\n\t\t\tend else begin\n\t\t\t\tnext_state = ON;\n\t\t\tend\n\t\t\tout = ON;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = OFF;\n\t\t\tout = OFF;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "vector3", "description": "Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).", "prompt": "module top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z\n);\n", "completion": "assign {f, e, d, c, b, a, 2'b11} = {w, x, y, z};\n\nendmodule"}
{"task_id": "circuit2", "description": "This is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            a               b               c               d               q               \n// 0ns             0               0               0               0               1               \n// 5ns             0               0               0               0               1               \n// 10ns            0               0               0               0               1               \n// 15ns            0               0               0               0               1               \n// 20ns            0               0               0               1               0               \n// 25ns            0               0               1               0               0               \n// 30ns            0               0               1               1               1               \n// 35ns            0               1               0               0               0               \n// 40ns            0               1               0               1               1               \n// 45ns            0               1               1               0               1               \n// 50ns            0               1               1               1               0               \n// 55ns            1               0               0               0               0               \n// 60ns            1               0               0               1               1               \n// 65ns            1               0               1               0               1               \n// 70ns            1               0               1               1               0               \n// 75ns            1               1               0               0               1               \n// 80ns            1               1               0               1               0               \n// 85ns            1               1               1               0               0               \n// 90ns            1               1               1               1               1       ", "prompt": "module top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput q\n);\n", "completion": "\nassign q = (~a & b & c) | (a & ~b & ~d);\nendmodule\n"}
{"task_id": "andgate", "description": "Create a module that implements an AND gate.", "prompt": "module top_module(\n\tinput a, \n\tinput b,\n\toutput out\n);\n", "completion": "and_gate and_gate_inst(\n\t.a(a),\n\t.b(b),\n\t.out(out)\n);\n\nendmodule"}
{"task_id": "fsm1s", "description": "This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\n// B (out=1) --in=0--> A\n// B (out=1) --in=1--> B\n// A (out=0) --in=0--> B\n// A (out=0) --in=1--> A", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput out\n);\n", "completion": "reg state, next_state;\n\nparameter B = 0, A = 1;\nparameter OUT_B = 1, OUT_A = 0;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= B;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tcase (state)\n\t\tB: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = B;\n\t\t\t\tout = OUT_B;\n\t\t\tend else begin\n\t\t\t\tnext_state = A;\n\t\t\t\tout = OUT_A;\n\t\t\tend\n\t\tend\n\t\tA: begin\n\t\t\tif (in) begin\n\t\t\t\tnext_state = A;\n\t\t\t\tout = OUT_A;\n\t\t\tend else begin\n\t\t\t\tnext_state = B;\n\t\t\t\tout = OUT_B;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "fadd", "description": "Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.", "prompt": "module top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum\n);\n", "completion": "\t// Full Adder implementation\n\tassign {cout, sum} = a + b + cin;\n\nendmodule"}
{"task_id": "m2014_q4g", "description": "Implement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.", "prompt": "module top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput logic out\n);\n", "completion": "\n  assign out = ~(in1 ^ in2) ^ in3;\nendmodule\n"}
{"task_id": "ece241_2014_q3", "description": "For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\n//       ab\n// cd   00 01 11 10\n//  00 | 0 | 0 | 0 | 1 |\n//  01 | 1 | 0 | 0 | 0 |\n//  11 | 1 | 0 | 1 | 1 |\n//  10 | 1 | 0 | 0 | 1 |\n\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n", "prompt": "module top_module (\n\tinput c,\n\tinput d,\n\toutput [3:0] mux_in\n);\n", "completion": "assign mux_in[0] = (c & d) | (~c & ~d);\nassign mux_in[1] = (c & ~d);\nassign mux_in[2] = (c | ~d);\nassign mux_in[3] = (c & d) | (c & ~d) | (~c & d); \n\nendmodule"}
{"task_id": "ece241_2014_q5b", "description": "The following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\n// A --x=0 (z=0)--> A\n// A --x=1 (z=1)--> B\n// B --x=0 (z=1)--> B\n// B --x=1 (z=0)--> B", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z\n);\n", "completion": "reg [1:0] state, next_state;\n\nparameter A = 2'b00, B = 2'b01;\n\nalways @ (posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= A;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @ (*) begin\n\tcase(state)\n\t\tA: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tnext_state = A;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = B;\n\t\t\t\tz = 1'b1;\n\t\t\tend\n\t\tend\n\t\tB: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tnext_state = B;\n\t\t\t\tz = 1'b1;\n\t\t\tend else begin\n\t\t\t\tnext_state = B;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = A;\n\t\t\tz = 1'b0;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "circuit10", "description": "This is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\n// time            clk             a               b               state           q               \n// 0ns             0               1               x               x               x               \n// 5ns             1               1               x               x               x               \n// 10ns            0               0               0               x               x               \n// 15ns            1               0               0               0               0               \n// 20ns            0               0               0               0               0               \n// 25ns            1               0               0               0               0               \n// 30ns            0               0               0               0               0               \n// 35ns            1               0               0               0               0               \n// 40ns            0               0               0               0               0               \n// 45ns            1               0               1               0               1               \n// 50ns            0               0               1               0               1               \n// 55ns            1               1               0               0               1               \n// 60ns            0               1               0               0               1               \n// 65ns            1               1               1               0               0               \n// 70ns            0               1               1               0               0               \n// 75ns            1               0               0               1               1               \n// 80ns            0               0               0               1               1               \n// 85ns            1               1               1               0               0               \n// 90ns            0               1               1               0               0               \n// 95ns            1               1               1               1               1               \n// 100ns           0               1               1               1               1               \n// 105ns           1               1               1               1               1               \n// 110ns           0               1               1               1               1               \n// 115ns           1               1               0               1               0               \n// 120ns           0               1               0               1               0               \n// 125ns           1               0               1               1               0               \n// 130ns           0               0               1               1               0               \n// 135ns           1               0               0               1               1               \n// 140ns           0               0               0               1               1               \n// 145ns           1               0               0               0               0               \n// 150ns           0               0               0               0               0               \n// 155ns           1               0               0               0               0               \n// 160ns           0               0               0               0               0               \n// 165ns           1               0               0               0               0               \n// 170ns           0               0               0               0               0               \n// 175ns           1               0               0               0               0               \n// 180ns           0               0               0               0               0               \n// 185ns           1               0               0               0               0               \n// 190ns           0               0               0               0               0        ", "prompt": "module top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput q,\n\toutput state\n);\n", "completion": "\nreg q;\nreg state;\n\nalways @(posedge clk) begin\n    if (a & ~b & ~state) begin\n        q <= 1;\n    end else if (~a & b & state) begin\n        q <= 0;\n    end\n    state <= a & b;\nend\n\nassign q = state & (a ^ b);\n\nendmodule\n"}
{"task_id": "2012_q1g", "description": "Consider the function f shown in the Karnaugh map below. Implement this function.\n//        x[1]x[2]\n// x[3]x[4]   00 01 11 10\n//  00 | 1 | 0 | 0 | 1 |\n//  01 | 0 | 0 | 0 | 0 |\n//  11 | 1 | 1 | 1 | 0 |\n//  10 | 1 | 1 | 0 | 1 |", "prompt": "module top_module (\n\tinput [4:1] x,\n\toutput logic f\n);\n", "completion": "assign f = x[1] & x[2] & (!x[3] | x[4]) | (!x[1] & x[3] & x[4]) | (x[1] & x[3] & !x[4]) | (x[2] & !x[3] & x[4]); \n\nendmodule"}
{"task_id": "fsm_hdlc", "description": "Synchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n", "completion": "reg [2:0] state;\n\nparameter S_IDLE = 3'b000;\nparameter S_CHECK_DISC = 3'b001;\nparameter S_CHECK_FLAG = 3'b010;\nparameter S_CHECK_ERR = 3'b011;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= S_IDLE;\n\tend else begin\n\t\tcase (state)\n\t\t\tS_IDLE: begin\n\t\t\t\tif (in) begin\n\t\t\t\t\tstate <= S_CHECK_DISC;\n\t\t\t\tend\n\t\t\tend\n\t\t\tS_CHECK_DISC: begin\n\t\t\t\tif (in) begin\n\t\t\t\t\tdisc <= 1;\n\t\t\t\t\tstate <= S_IDLE;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= S_CHECK_FLAG;\n\t\t\t\tend\n\t\t\tend\n\t\t\tS_CHECK_FLAG: begin\n\t\t\t\tif (in) begin\n\t\t\t\t\tflag <= 1;\n\t\t\t\t\tstate <= S_IDLE;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= S_CHECK_ERR;\n\t\t\t\tend\n\t\t\tend\n\t\t\tS_CHECK_ERR: begin\n\t\t\t\tif (in) begin\n\t\t\t\t\terr <= 1;\n\t\t\t\t\tstate <= S_IDLE;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule"}
{"task_id": "review2015_fancytimer", "description": "We want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n", "prompt": "module top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n", "completion": "reg [3:0] delay;\nreg [3:0] count_reg;\nreg [3:0] remaining_time;\nreg [3:0] state;\n\nalways @ (posedge clk) begin\n    if (reset) begin\n        counting <= 0;\n        done <= 0;\n        state <= 4'b0000;\n    end else begin\n        case (state)\n            4'b0000: begin // Searching for input pattern (1101)\n                if (data == 4'b1101) begin\n                    state <= 4'b0001;\n                end\n            end\n            4'b0001: begin // Shifting in 4 more bits for delay\n                delay <= {data, delay[3:1]};\n                state <= 4'b0010;\n            end\n            4'b0010: begin // Assert counting output to indicate counting\n                counting <= 1;\n                remaining_time <= delay;\n                count_reg <= delay;\n                state <= 4'b0011;\n            end\n            4'b0011: begin // Counting state\n                if (remaining_time > 0) begin\n                    remaining_time <= remaining_time - 1;\n                    if (remaining_time == 0)\n                        done <= 1;\n                end else begin\n                    counting <= 0;\n                    if (ack)\n                        state <= 4'b0000; // Reset to look for the next occurrence of the start sequence\n                end\n            end\n        endcase\n    end\nend\n\nassign count = counting ? remaining_time : 4'bxxxx;\n\nendmodule"}
{"task_id": "ece241_2013_q4", "description": "A large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr). \n// Water Level | Sensors Asserted | Nominal Flow Rate Inputs to be Asserted\n// Above s[3] | s[1], s[2], s[3] | None\n// Between s[3] and s[2] | s[1], s[2] | fr1\n// Between s[2] and s[1]  | s[1] | fr1, fr2\n// Below s[1] | None | fr1, fr2, fr3\n// Also include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted).", "prompt": "module top_module (\n\tinput clk,\n\tinput reset,\n\tinput [3:1] s,\n\toutput reg fr3,\n\toutput reg fr2,\n\toutput reg fr1,\n\toutput reg dfr\n);\n", "completion": "\nreg [1:0] state, next_state;\n\nparameter ABOVE_S3 = 2'b00;\nparameter BETWEEN_S3_S2 = 2'b01;\nparameter BETWEEN_S2_S1 = 2'b10;\nparameter BELOW_S1 = 2'b11;\n\nalways @ (posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= BELOW_S1;\n        fr3 <= 1'b1;\n        fr2 <= 1'b1;\n        fr1 <= 1'b1;\n        dfr <= 1'b1;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    dfr <= 1'b0;\n    case(state)\n        ABOVE_S3: begin\n            fr3 <= 1'b0;\n            fr2 <= 1'b0;\n            fr1 <= 1'b0;\n        end\n        BETWEEN_S3_S2: begin\n            fr3 <= 1'b0;\n            fr2 <= 1'b0;\n            fr1 <= 1'b1;\n            if (s[2] > s[3]) begin\n                dfr <= 1'b1;\n            end\n        end\n        BETWEEN_S2_S1: begin\n            fr3 <= 1'b0;\n            fr2 <= 1'b1;\n            fr1 <= 1'b1;\n            if (s[1] > s[2]) begin\n                dfr <= 1'b1;\n            end\n        end\n        BELOW_S1: begin\n            fr3 <= 1'b1;\n            fr2 <= 1'b1;\n            fr1 <= 1'b1;\n        end\n    endcase\nend\n\nalways @* begin\n    case(state)\n        ABOVE_S3: next_state = (s[3]) ? BETWEEN_S3_S2 : ABOVE_S3;\n        BETWEEN_S3_S2: next_state = (s[2]) ? BETWEEN_S2_S1 : (s[3]) ? BETWEEN_S3_S2 : ABOVE_S3;\n        BETWEEN_S2_S1: next_state = (s[1]) ? BELOW_S1 : (s[2]) ? BETWEEN_S2_S1 : BETWEEN_S3_S2;\n        BELOW_S1: next_state = (s[1]) ? BELOW_S1 : BETWEEN_S2_S1;\n    endcase\nend\n\nendmodule\n"}
{"task_id": "fsm_serial", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done\n);\n", "completion": "\nreg [2:0] state, next_state;\n\nparameter IDLE = 3'b000, START_BIT = 3'b001, DATA_BIT = 3'b010, STOP_BIT = 3'b011;\nreg [7:0] data;\nreg done;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= IDLE;\n        data <= 8'b0;\n        done <= 0;\n    end else begin\n        state <= next_state;\n        case (state)\n            IDLE: begin\n                if (in == 1'b0)\n                    next_state <= START_BIT;\n                else\n                    next_state <= IDLE;\n            end\n            START_BIT: begin\n                next_state <= DATA_BIT;\n                data <= {data[6:0], in};\n            end\n            DATA_BIT: begin\n                if (data == 8'b11111110)\n                    next_state <= STOP_BIT;\n                else\n                    next_state <= DATA_BIT;\n                data <= {data[6:0], in};\n            end\n            STOP_BIT: begin\n                if (in == 1'b1)\n                    next_state <= IDLE;\n                else\n                    next_state <= STOP_BIT;\n            end\n        endcase\n    end\nend\n\nassign done = (state == STOP_BIT);\n\nendmodule\n"}
{"task_id": "fsm_serialdata", "description": "In many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.", "prompt": "module top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done\n);\n", "completion": "always @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= IDLE;\n        bit_count <= 0;\n        temp_byte <= 8'b0;\n        out_byte <= 8'b0;\n        done <= 1'b0;\n    end else begin\n        case (state)\n            IDLE: begin\n                if (in == 1'b0) begin\n                    state <= START_BIT;\n                    bit_count <= 0;\n                    temp_byte <= 8'b0;\n                end\n            end\n            START_BIT: begin\n                if (in == 1'b0) begin\n                    state <= DATA_BITS;\n                else\n                    state <= IDLE;\n            end\n            DATA_BITS: begin\n                temp_byte[bit_count] <= in;\n                bit_count <= bit_count + 1;\n                if (bit_count == 7) begin\n                    state <= STOP_BIT;\n                end\n            end\n            STOP_BIT: begin\n                if (in == 1'b1) begin\n                    out_byte <= temp_byte;\n                    done <= 1'b1;\n                    state <= IDLE;\n                end\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "gshare", "description": "Build a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.", "prompt": "module top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc\n);\n", "completion": "reg [6:0] global_branch_history;\nreg [7:0] pattern_history_table [0:127];\nreg [1:0] prediction;\nreg [1:0] prediction_next;\nreg [6:0] index;\n \nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tglobal_branch_history <= 0;\n\t\tpattern_history_table <= 0;\n\tend else begin\n\t\tindex <= (predict_pc ^ global_branch_history) & 7'b0111111;\n\t\tprediction_next <= pattern_history_table[index];\n\t\tprediction <= prediction_next;\n\t\t\n\t\tif (train_valid) begin\n\t\t\tif (train_mispredicted) begin\n\t\t\t\tpattern_history_table[index] <= (train_taken == 1) ? $saturate(pattern_history_table[index] + 1, 2'd3) : $saturate(pattern_history_table[index] - 1, 2'd0);\n\t\t\tend\n\t\t\tglobal_branch_history <= {global_branch_history[5:0], train_taken};\n\t\tend else if (predict_valid) begin\n\t\t\tglobal_branch_history <= {global_branch_history[5:0], prediction};\n\t\tend\n\tend\nend\n\nassign predict_taken = (prediction >= 2);\nassign predict_history = global_branch_history;\n\nendmodule"}
{"task_id": "lemmings4", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [4:0] state, next_state;\n\nparameter WALK_LEFT = 3'd0;\nparameter WALK_RIGHT = 3'd1;\nparameter FALL = 3'd2;\nparameter DIGGING = 3'd3;\nparameter SPLATTER = 3'd4;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state;\n\twalk_left = 1'b0;\n\twalk_right = 1'b0;\n\taaah = 1'b0;\n\tdigging = 1'b0;\n\t\n\tcase (state)\n\t\tWALK_LEFT: begin\n\t\t\tif (bump_right && !bump_left)\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig && ground)\n\t\t\t\tnext_state = DIGGING;\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\tif (bump_left && !bump_right)\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\telse if (!ground)\n\t\t\t\tnext_state = FALL;\n\t\t\telse if (dig && ground)\n\t\t\t\tnext_state = DIGGING;\n\t\tend\n\t\tFALL: begin\n\t\t\tif (ground)\n\t\t\t\tnext_state = state;\n\t\t\telse if (state == SPLATTER)\n\t\t\t\tnext_state = SPLATTER;\n\t\t\telse if (state == DIGGING)\n\t\t\t\tnext_state = FALL;\n\t\tend\n\t\tDIGGING: begin\n\t\t\tif (!ground)\n\t\t\t\tnext_state = FALL;\n\t\tend\n\tendcase\n\t\n\tcase (state)\n\t\tWALK_LEFT: walk_left = 1'b1;\n\t\tWALK_RIGHT: walk_right = 1'b1;\n\t\tFALL: aaah = 1'b1;\n\t\tDIGGING: digging = 1'b1;\n\t\tSPLATTER: begin\n\t\t\twalk_left = 1'b0;\n\t\t\twalk_right = 1'b0;\n\t\t\taaah = 1'b0;\n\t\t\tdigging = 1'b0;\n\t\tend\n\tendcase\nend\n\nendmodule"}
{"task_id": "review2015_fsm", "description": "We want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n", "completion": "reg [3:0] state;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        state <= 4'b0000;\n        shift_ena <= 0;\n        counting <= 0;\n        done <= 0;\n    end\n    else begin\n        case(state)\n            4'b0000: begin // Idle state\n                if (data == 1 && $past(data) == 1 && $past($past(data)) == 0 && $past($past($past(data))) == 1) begin\n                    state <= 4'b0001;\n                    shift_ena <= 1;\n                end\n            end\n            \n            4'b0001: begin // Wait for 4 clock cycles\n                shift_ena <= 1;\n                state <= 4'b0010;\n            end\n            \n            4'b0010: begin // Wait for done_counting signal\n                shift_ena <= 0;\n                counting <= 1;\n                if (done_counting == 1) begin\n                    state <= 4'b0011;\n                end\n            end\n            \n            4'b0011: begin // Wait for ack signal\n                done <= 1;\n                counting <= 0;\n                if (ack == 1) begin\n                    done <= 0;\n                    state <= 4'b0000;\n                end\n            end\n        endcase\n    end\nend\n\nendmodule"}
{"task_id": "conwaylife", "description": "The \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.", "prompt": "module top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n", "completion": "always @(posedge clk) begin\n    if (load) begin\n        q <= data;\n    end else begin\n        // Implement game logic\n        // Iterate through each cell in the 16x16 grid\n        for (int i = 0; i < 16; i = i + 1) begin\n            for (int j = 0; j < 16; j = j + 1) begin\n                int count = 0;\n                // Calculate number of alive neighbors\n                count = q[i * 16 + ((j - 1 + 16) % 16)] + q[i * 16 + ((j + 1) % 16)]; // Upper and lower neighbors\n                count = count + q[(((i - 1 + 16) % 16) * 16) + j] + q[(((i + 1) % 16) * 16) + j]; // Left and right neighbors\n                count = count + q[(((i - 1 + 16) % 16) * 16) + ((j - 1 + 16) % 16)] + q[(((i - 1 + 16) % 16) * 16) + ((j + 1) % 16)]; // Upper-left and upper-right neighbors\n                count = count + q[(((i + 1) % 16) * 16) + ((j - 1 + 16) % 16)] + q[(((i + 1) % 16) * 16) + ((j + 1) % 16)]; // Lower-left and lower-right neighbors\n\n                // Apply game rules\n                if (count <= 1 || count >= 4)\n                    q[i * 16 + j] <= 0;\n                else if (count == 3)\n                    q[i * 16 + j] <= 1;\n                // For 2 neighbors, state does not change\n            end\n        end\n    end\nend\nendmodule"}
{"task_id": "lemmings3", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging\n);\n", "completion": "reg [2:0] state, next_state;\n\nparameter WALK_LEFT = 3'b001;\nparameter WALK_RIGHT = 3'b010;\nparameter FALLING = 3'b011;\nparameter DIGGING = 3'b100;\n\nalways @(posedge clk or posedge areset) begin\n    if (areset) begin\n        state <= WALK_LEFT;\n    end else begin\n        state <= next_state;\n    end\nend\n\nalways @* begin\n    aaah = 1'b0;\n    digging = 1'b0;\n    walk_left = (state == WALK_LEFT);\n    walk_right = (state == WALK_RIGHT);\n\n    case (state)\n        WALK_LEFT: begin\n            if (bump_right)\n                next_state = WALK_RIGHT;\n            else if (dig && ground)\n                next_state = DIGGING;\n            else if (ground == 0)\n                next_state = FALLING;\n            else\n                next_state = WALK_LEFT;\n        end\n\n        WALK_RIGHT: begin\n            if (bump_left)\n                next_state = WALK_LEFT;\n            else if (dig && ground)\n                next_state = DIGGING;\n            else if (ground == 0)\n                next_state = FALLING;\n            else\n                next_state = WALK_RIGHT;\n        end\n\n        FALLING: begin\n            if (ground)\n                next_state = state;\n            else\n                next_state = FALLING;\n        end\n\n        DIGGING: begin\n            if (ground == 0)\n                next_state = FALLING;\n            else if (dig && ground)\n                next_state = DIGGING;\n            else\n                next_state = state;\n            digging = 1'b1;\n        end\n    endcase\nend\n\nendmodule"}
{"task_id": "count_clock", "description": "Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n", "completion": "always @(posedge clk) begin\n\tif (reset) begin\n\t\tpm <= 0;\n\t\thh <= 8'h01;\n\t\tmm <= 8'h00;\n\t\tss <= 8'h00;\n\tend else if (ena) begin\n\t\tss <= ss + 1;\n\t\tif (ss == 8'h3C) begin\n\t\t\tss <= 8'h00;\n\t\t\tmm <= mm + 1;\n\t\t\tif (mm == 8'h3C) begin\n\t\t\t\tmm <= 8'h00;\n\t\t\t\thh <= hh + 1;\n\t\t\t\tif (hh == 8'h13) begin\n\t\t\t\t\thh <= 8'h01;\n\t\t\t\t\tpm <= ~pm;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\n\nendmodule"}
{"task_id": "lemmings2", "description": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.", "prompt": "module top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah\n);\n", "completion": "reg [1:0] state, next_state; // 0: walk_left, 1: walk_right, 2: falling\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= 2; // reset to walk_left\n\tend\n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @* begin\n\tnext_state = state; // default next state is current state\n\taaah = 0; // default aaah output is 0\n\n\t// State transitions based on inputs\n\tcase(state)\n\t\t0: begin // state 0: walk_left\n\t\t\tif (bump_right) begin\n\t\t\t\tnext_state = 1; // switch to walk_right\n\t\t\tend\n\t\t\telse if (!ground) begin\n\t\t\t\tnext_state = 2; // falling\n\t\t\t\taaah = 1; // output \"aaah!\"\n\t\t\tend\n\t\tend\n\t\t1: begin // state 1: walk_right\n\t\t\tif (bump_left) begin\n\t\t\t\tnext_state = 0; // switch to walk_left\n\t\t\tend\n\t\t\telse if (!ground) begin\n\t\t\t\tnext_state = 2; // falling\n\t\t\t\taaah = 1; // output \"aaah!\"\n\t\t\tend\n\t\tend\n\t\t2: begin // state 2: falling\n\t\t\tif (ground) begin\n\t\t\t\tif (state == 0 && bump_right) begin\n\t\t\t\t\tnext_state = 1; // switch to walk_right\n\t\t\t\tend\n\t\t\t\telse if (state == 1 && bump_left) begin\n\t\t\t\t\tnext_state = 0; // switch to walk_left\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tnext_state = state; // stay in falling state\n\t\t\t\tend\n\t\t\t\taaah = 0; // end \"aaah!\" output\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign walk_left = (state == 0);\nassign walk_right = (state == 1);\n\nendmodule"}
{"task_id": "countbcd", "description": "Build a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.", "prompt": "module top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n", "completion": "reg [15:0] q_next;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        q <= 16'b0;\n    end else begin\n        q <= q_next;\n    end\nend\n\nalways @* begin\n    q_next = q;\n\n    if (ena[1]) begin\n        if (q[3:0] == 4'b1001) begin // check ones digit for 9\n            q_next[3:0] = 4'b0000;\n            if (q[7:4] == 4'b1001) begin // check tens digit for 9\n                q_next[7:4] = 4'b0000;\n                if (q[11:8] == 4'b1001) begin // check hundreds digit for 9\n                    q_next[11:8] = 4'b0000;\n                    if (q[15:12] == 4'b1001) begin // check thousands digit for 9\n                        q_next[15:12] = 4'b0000;\n                    end else begin\n                        q_next[15:12] = q[15:12] + 4'b0001;\n                    end\n                end else begin\n                    q_next[11:8] = q[11:8] + 4'b0001;\n                end\n            end else begin\n                q_next[7:4] = q[7:4] + 4'b0001;\n            end\n        end else begin\n            q_next[3:0] = q[3:0] + 4'b0001;\n        end\n    end\nend\n\nendmodule"}
